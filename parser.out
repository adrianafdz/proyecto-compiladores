Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ;
Rule 2     f_start -> <empty>
Rule 3     f_prog -> <empty>
Rule 4     f_main -> <empty>
Rule 5     f_end -> <empty>
Rule 6     clases -> clases clase
Rule 7     clases -> empty
Rule 8     clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass
Rule 9     clase -> TYPE ID f_startclass { cvars f_cvars funciones } f_endclass
Rule 10    f_startclass -> <empty>
Rule 11    f_clasepadre -> <empty>
Rule 12    f_cvars -> <empty>
Rule 13    f_endclass -> <empty>
Rule 14    funciones -> funciones funcion
Rule 15    funciones -> empty
Rule 16    funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc
Rule 17    funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc
Rule 18    f_startfunc -> <empty>
Rule 19    f_nothing -> <empty>
Rule 20    f_tipofunc -> <empty>
Rule 21    f_endfunc -> <empty>
Rule 22    vars -> vars DEF tipo dimension : lista_id ;
Rule 23    vars -> vars DEF ID f_varsobj : lista_id_obj ;
Rule 24    vars -> empty
Rule 25    f_varsobj -> <empty>
Rule 26    cvars -> cvars DEF tipo dimension : lista_id ;
Rule 27    cvars -> empty
Rule 28    lista_id -> ID f_vars
Rule 29    lista_id -> lista_id , ID f_vars
Rule 30    f_vars -> <empty>
Rule 31    lista_id_obj -> ID f_vars_obj
Rule 32    lista_id_obj -> lista_id_obj , ID f_vars_obj
Rule 33    f_vars_obj -> <empty>
Rule 34    dimension -> [ NUM f_dim1 ] f_onedim
Rule 35    dimension -> [ NUM f_dim1 ] [ NUM f_dim2 ] f_twodim
Rule 36    dimension -> empty
Rule 37    f_dim1 -> <empty>
Rule 38    f_dim2 -> <empty>
Rule 39    f_onedim -> <empty>
Rule 40    f_twodim -> <empty>
Rule 41    tipo -> NUMBER
Rule 42    tipo -> STRING
Rule 43    params -> pparams
Rule 44    params -> empty
Rule 45    pparams -> tipo ID f_param
Rule 46    pparams -> pparams , tipo ID f_param
Rule 47    f_param -> <empty>
Rule 48    estatutos -> estatutos estatuto
Rule 49    estatutos -> empty
Rule 50    estatuto -> asignacion
Rule 51    estatuto -> while
Rule 52    estatuto -> for
Rule 53    estatuto -> condicion
Rule 54    estatuto -> CALL call_func ;
Rule 55    call_func -> func
Rule 56    call_func -> input
Rule 57    call_func -> write
Rule 58    call_func -> to_num
Rule 59    call_func -> to_str
Rule 60    call_func -> return
Rule 61    func -> ID f_verify_func ( args )
Rule 62    func -> ID f_varobj : ID f_verify_func_composite ( args )
Rule 63    f_verify_func -> <empty>
Rule 64    f_verify_func_composite -> <empty>
Rule 65    args -> args_list f_end_args
Rule 66    args -> f_end_args
Rule 67    args_list -> expresion f_arg
Rule 68    args_list -> args_list , expresion f_arg
Rule 69    f_arg -> <empty>
Rule 70    f_end_args -> <empty>
Rule 71    asignacion -> var = f_oper expresion ;
Rule 72    var -> ID f_varobj : ID f_verify_type_composite indexacion
Rule 73    var -> ID f_verify_type indexacion
Rule 74    indexacion -> f_start_array [ expresion f_index ] f_end_array
Rule 75    indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array
Rule 76    indexacion -> f_no_index empty
Rule 77    f_varobj -> <empty>
Rule 78    f_verify_type -> <empty>
Rule 79    f_verify_type_composite -> <empty>
Rule 80    f_no_index -> <empty>
Rule 81    f_start_array -> <empty>
Rule 82    f_index -> <empty>
Rule 83    f_next_index -> <empty>
Rule 84    f_end_array -> <empty>
Rule 85    expresion -> exp
Rule 86    expresion -> expresion COMP f_oper exp f_expres
Rule 87    expresion -> STR f_string_expr
Rule 88    f_string_expr -> <empty>
Rule 89    f_expres -> <empty>
Rule 90    exp -> term
Rule 91    exp -> exp OPTERM f_oper term f_exp
Rule 92    f_exp -> <empty>
Rule 93    term -> fact
Rule 94    term -> term OPFACT f_oper fact f_term
Rule 95    f_term -> <empty>
Rule 96    f_oper -> <empty>
Rule 97    fact -> ( lparen expresion ) rparen
Rule 98    fact -> var
Rule 99    fact -> NUM f_fact
Rule 100   fact -> OPTERM NUM
Rule 101   fact -> CALL call_func f_return_val
Rule 102   f_return_val -> <empty>
Rule 103   lparen -> <empty>
Rule 104   rparen -> <empty>
Rule 105   f_fact -> <empty>
Rule 106   condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
Rule 107   condicionp -> ELSE f_else { estatutos }
Rule 108   condicionp -> empty
Rule 109   f_if -> <empty>
Rule 110   f_endif -> <empty>
Rule 111   f_else -> <empty>
Rule 112   while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
Rule 113   f_while -> <empty>
Rule 114   f_exprwhile -> <empty>
Rule 115   f_endwhile -> <empty>
Rule 116   for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
Rule 117   f_for_start -> <empty>
Rule 118   f_for_to -> <empty>
Rule 119   f_for_end -> <empty>
Rule 120   to_num -> TO_NUMBER ( STR )
Rule 121   to_num -> TO_NUMBER ( var )
Rule 122   to_str -> TO_STRING ( expresion )
Rule 123   input -> INPUT ( var )
Rule 124   write -> PRINT ( write_list )
Rule 125   write_list -> write_list & write_listp
Rule 126   write_list -> write_listp
Rule 127   write_listp -> STR f_string
Rule 128   write_listp -> var
Rule 129   write_listp -> CALL to_str
Rule 130   f_string -> <empty>
Rule 131   return -> RET ( expresion )
Rule 132   empty -> <empty>

Terminals, with rules where they appear

&                    : 125
(                    : 1 16 17 61 62 97 106 112 120 121 122 123 124 131
)                    : 1 16 17 61 62 97 106 112 120 121 122 123 124 131
,                    : 29 32 46 68
:                    : 8 16 17 22 23 26 62 72
;                    : 1 1 22 23 26 54 71
=                    : 71
CALL                 : 54 101 129
COMP                 : 86
DEF                  : 22 23 26
DO                   : 112
ELSE                 : 107
END                  : 1
FOR                  : 116
FUNC                 : 16 17
ID                   : 1 8 8 9 16 17 23 28 29 31 32 45 46 61 62 62 72 72 73
IF                   : 106
INPUT                : 123
MAIN                 : 1
NOTHING              : 17
NUM                  : 34 35 35 99 100
NUMBER               : 41
OPFACT               : 94
OPTERM               : 91 100
PRINT                : 124
PROGRAM              : 1
RET                  : 131
STR                  : 87 120 127
STRING               : 42
THEN                 : 106
TO                   : 116
TO_NUMBER            : 120 121
TO_STRING            : 122
TYPE                 : 8 9
WHILE                : 112
[                    : 34 35 35 74 75 75
]                    : 34 35 35 74 75 75
error                : 
{                    : 1 8 9 16 17 106 107 112 116
}                    : 1 8 9 16 17 106 107 112 116

Nonterminals, with rules where they appear

args                 : 61 62
args_list            : 65 68
asignacion           : 50
call_func            : 54 101
clase                : 6
clases               : 1 6
condicion            : 53
condicionp           : 106
cvars                : 8 9 26
dimension            : 22 26
empty                : 7 15 24 27 36 44 49 76 108
estatuto             : 48
estatutos            : 1 16 17 48 106 107 112 116
exp                  : 85 86 91
expresion            : 67 68 71 74 75 75 86 97 106 112 116 116 122 131
f_arg                : 67 68
f_clasepadre         : 8
f_cvars              : 8 9
f_dim1               : 34 35
f_dim2               : 35
f_else               : 107
f_end                : 1
f_end_args           : 65 66
f_end_array          : 74 75
f_endclass           : 8 9
f_endfunc            : 16 17
f_endif              : 106
f_endwhile           : 112
f_exp                : 91
f_expres             : 86
f_exprwhile          : 112
f_fact               : 99
f_for_end            : 116
f_for_start          : 116
f_for_to             : 116
f_if                 : 106
f_index              : 74 75 75
f_main               : 1
f_next_index         : 75
f_no_index           : 76
f_nothing            : 17
f_onedim             : 34
f_oper               : 71 86 91 94
f_param              : 45 46
f_prog               : 1
f_return_val         : 101
f_start              : 1
f_start_array        : 74 75
f_startclass         : 8 9
f_startfunc          : 16 17
f_string             : 127
f_string_expr        : 87
f_term               : 94
f_tipofunc           : 16 17
f_twodim             : 35
f_varobj             : 62 72
f_vars               : 28 29
f_vars_obj           : 31 32
f_varsobj            : 23
f_verify_func        : 61
f_verify_func_composite : 62
f_verify_type        : 73
f_verify_type_composite : 72
f_while              : 112
fact                 : 93 94
for                  : 52
func                 : 55
funcion              : 14
funciones            : 1 8 9 14
indexacion           : 72 73
input                : 56
lista_id             : 22 26 29
lista_id_obj         : 23 32
lparen               : 97
params               : 16 17
pparams              : 43 46
return               : 60
rparen               : 97
start                : 0
term                 : 90 91 94
tipo                 : 16 22 26 45 46
to_num               : 58
to_str               : 59 129
var                  : 71 98 121 123 128
vars                 : 1 16 17 22 23
while                : 51
write                : 57
write_list           : 124 125
write_listp          : 125 126

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ;

    PROGRAM         shift and go to state 2

    start                          shift and go to state 1

state 1

    (0) S' -> start .



state 2

    (1) start -> PROGRAM . f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ;
    (2) f_start -> .

    ID              reduce using rule 2 (f_start -> .)

    f_start                        shift and go to state 3

state 3

    (1) start -> PROGRAM f_start . ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ;

    ID              shift and go to state 4


state 4

    (1) start -> PROGRAM f_start ID . f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ;
    (3) f_prog -> .

    ;               reduce using rule 3 (f_prog -> .)

    f_prog                         shift and go to state 5

state 5

    (1) start -> PROGRAM f_start ID f_prog . ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ;

    ;               shift and go to state 6


state 6

    (1) start -> PROGRAM f_start ID f_prog ; . clases vars funciones MAIN f_main ( ) { estatutos } END f_end ;
    (6) clases -> . clases clase
    (7) clases -> . empty
    (132) empty -> .

    TYPE            reduce using rule 132 (empty -> .)
    DEF             reduce using rule 132 (empty -> .)
    MAIN            reduce using rule 132 (empty -> .)
    FUNC            reduce using rule 132 (empty -> .)

    clases                         shift and go to state 7
    empty                          shift and go to state 8

state 7

    (1) start -> PROGRAM f_start ID f_prog ; clases . vars funciones MAIN f_main ( ) { estatutos } END f_end ;
    (6) clases -> clases . clase
    (22) vars -> . vars DEF tipo dimension : lista_id ;
    (23) vars -> . vars DEF ID f_varsobj : lista_id_obj ;
    (24) vars -> . empty
    (8) clase -> . TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass
    (9) clase -> . TYPE ID f_startclass { cvars f_cvars funciones } f_endclass
    (132) empty -> .

    TYPE            shift and go to state 12
    DEF             reduce using rule 132 (empty -> .)
    MAIN            reduce using rule 132 (empty -> .)
    FUNC            reduce using rule 132 (empty -> .)

    vars                           shift and go to state 9
    clase                          shift and go to state 10
    empty                          shift and go to state 11

state 8

    (7) clases -> empty .

    TYPE            reduce using rule 7 (clases -> empty .)
    DEF             reduce using rule 7 (clases -> empty .)
    MAIN            reduce using rule 7 (clases -> empty .)
    FUNC            reduce using rule 7 (clases -> empty .)


state 9

    (1) start -> PROGRAM f_start ID f_prog ; clases vars . funciones MAIN f_main ( ) { estatutos } END f_end ;
    (22) vars -> vars . DEF tipo dimension : lista_id ;
    (23) vars -> vars . DEF ID f_varsobj : lista_id_obj ;
    (14) funciones -> . funciones funcion
    (15) funciones -> . empty
    (132) empty -> .

    DEF             shift and go to state 14
    MAIN            reduce using rule 132 (empty -> .)
    FUNC            reduce using rule 132 (empty -> .)

    funciones                      shift and go to state 13
    empty                          shift and go to state 15

state 10

    (6) clases -> clases clase .

    TYPE            reduce using rule 6 (clases -> clases clase .)
    DEF             reduce using rule 6 (clases -> clases clase .)
    MAIN            reduce using rule 6 (clases -> clases clase .)
    FUNC            reduce using rule 6 (clases -> clases clase .)


state 11

    (24) vars -> empty .

    DEF             reduce using rule 24 (vars -> empty .)
    MAIN            reduce using rule 24 (vars -> empty .)
    FUNC            reduce using rule 24 (vars -> empty .)
    }               reduce using rule 24 (vars -> empty .)
    CALL            reduce using rule 24 (vars -> empty .)
    WHILE           reduce using rule 24 (vars -> empty .)
    FOR             reduce using rule 24 (vars -> empty .)
    IF              reduce using rule 24 (vars -> empty .)
    ID              reduce using rule 24 (vars -> empty .)


state 12

    (8) clase -> TYPE . ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass
    (9) clase -> TYPE . ID f_startclass { cvars f_cvars funciones } f_endclass

    ID              shift and go to state 16


state 13

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones . MAIN f_main ( ) { estatutos } END f_end ;
    (14) funciones -> funciones . funcion
    (16) funcion -> . FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc
    (17) funcion -> . FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc

    MAIN            shift and go to state 17
    FUNC            shift and go to state 19

    funcion                        shift and go to state 18

state 14

    (22) vars -> vars DEF . tipo dimension : lista_id ;
    (23) vars -> vars DEF . ID f_varsobj : lista_id_obj ;
    (41) tipo -> . NUMBER
    (42) tipo -> . STRING

    ID              shift and go to state 21
    NUMBER          shift and go to state 22
    STRING          shift and go to state 23

    tipo                           shift and go to state 20

state 15

    (15) funciones -> empty .

    MAIN            reduce using rule 15 (funciones -> empty .)
    FUNC            reduce using rule 15 (funciones -> empty .)
    }               reduce using rule 15 (funciones -> empty .)


state 16

    (8) clase -> TYPE ID . f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass
    (9) clase -> TYPE ID . f_startclass { cvars f_cvars funciones } f_endclass
    (10) f_startclass -> .

    :               reduce using rule 10 (f_startclass -> .)
    {               reduce using rule 10 (f_startclass -> .)

    f_startclass                   shift and go to state 24

state 17

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN . f_main ( ) { estatutos } END f_end ;
    (4) f_main -> .

    (               reduce using rule 4 (f_main -> .)

    f_main                         shift and go to state 25

state 18

    (14) funciones -> funciones funcion .

    MAIN            reduce using rule 14 (funciones -> funciones funcion .)
    FUNC            reduce using rule 14 (funciones -> funciones funcion .)
    }               reduce using rule 14 (funciones -> funciones funcion .)


state 19

    (16) funcion -> FUNC . ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc
    (17) funcion -> FUNC . ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc

    ID              shift and go to state 26


state 20

    (22) vars -> vars DEF tipo . dimension : lista_id ;
    (34) dimension -> . [ NUM f_dim1 ] f_onedim
    (35) dimension -> . [ NUM f_dim1 ] [ NUM f_dim2 ] f_twodim
    (36) dimension -> . empty
    (132) empty -> .

    [               shift and go to state 28
    :               reduce using rule 132 (empty -> .)

    dimension                      shift and go to state 27
    empty                          shift and go to state 29

state 21

    (23) vars -> vars DEF ID . f_varsobj : lista_id_obj ;
    (25) f_varsobj -> .

    :               reduce using rule 25 (f_varsobj -> .)

    f_varsobj                      shift and go to state 30

state 22

    (41) tipo -> NUMBER .

    [               reduce using rule 41 (tipo -> NUMBER .)
    :               reduce using rule 41 (tipo -> NUMBER .)
    ID              reduce using rule 41 (tipo -> NUMBER .)
    {               reduce using rule 41 (tipo -> NUMBER .)


state 23

    (42) tipo -> STRING .

    [               reduce using rule 42 (tipo -> STRING .)
    :               reduce using rule 42 (tipo -> STRING .)
    ID              reduce using rule 42 (tipo -> STRING .)
    {               reduce using rule 42 (tipo -> STRING .)


state 24

    (8) clase -> TYPE ID f_startclass . : ID f_clasepadre { cvars f_cvars funciones } f_endclass
    (9) clase -> TYPE ID f_startclass . { cvars f_cvars funciones } f_endclass

    :               shift and go to state 31
    {               shift and go to state 32


state 25

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main . ( ) { estatutos } END f_end ;

    (               shift and go to state 33


state 26

    (16) funcion -> FUNC ID . f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc
    (17) funcion -> FUNC ID . f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc
    (18) f_startfunc -> .

    (               reduce using rule 18 (f_startfunc -> .)

    f_startfunc                    shift and go to state 34

state 27

    (22) vars -> vars DEF tipo dimension . : lista_id ;

    :               shift and go to state 35


state 28

    (34) dimension -> [ . NUM f_dim1 ] f_onedim
    (35) dimension -> [ . NUM f_dim1 ] [ NUM f_dim2 ] f_twodim

    NUM             shift and go to state 36


state 29

    (36) dimension -> empty .

    :               reduce using rule 36 (dimension -> empty .)


state 30

    (23) vars -> vars DEF ID f_varsobj . : lista_id_obj ;

    :               shift and go to state 37


state 31

    (8) clase -> TYPE ID f_startclass : . ID f_clasepadre { cvars f_cvars funciones } f_endclass

    ID              shift and go to state 38


state 32

    (9) clase -> TYPE ID f_startclass { . cvars f_cvars funciones } f_endclass
    (26) cvars -> . cvars DEF tipo dimension : lista_id ;
    (27) cvars -> . empty
    (132) empty -> .

    DEF             reduce using rule 132 (empty -> .)
    }               reduce using rule 132 (empty -> .)
    FUNC            reduce using rule 132 (empty -> .)

    cvars                          shift and go to state 39
    empty                          shift and go to state 40

state 33

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( . ) { estatutos } END f_end ;

    )               shift and go to state 41


state 34

    (16) funcion -> FUNC ID f_startfunc . ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc
    (17) funcion -> FUNC ID f_startfunc . ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc

    (               shift and go to state 42


state 35

    (22) vars -> vars DEF tipo dimension : . lista_id ;
    (28) lista_id -> . ID f_vars
    (29) lista_id -> . lista_id , ID f_vars

    ID              shift and go to state 44

    lista_id                       shift and go to state 43

state 36

    (34) dimension -> [ NUM . f_dim1 ] f_onedim
    (35) dimension -> [ NUM . f_dim1 ] [ NUM f_dim2 ] f_twodim
    (37) f_dim1 -> .

    ]               reduce using rule 37 (f_dim1 -> .)

    f_dim1                         shift and go to state 45

state 37

    (23) vars -> vars DEF ID f_varsobj : . lista_id_obj ;
    (31) lista_id_obj -> . ID f_vars_obj
    (32) lista_id_obj -> . lista_id_obj , ID f_vars_obj

    ID              shift and go to state 46

    lista_id_obj                   shift and go to state 47

state 38

    (8) clase -> TYPE ID f_startclass : ID . f_clasepadre { cvars f_cvars funciones } f_endclass
    (11) f_clasepadre -> .

    {               reduce using rule 11 (f_clasepadre -> .)

    f_clasepadre                   shift and go to state 48

state 39

    (9) clase -> TYPE ID f_startclass { cvars . f_cvars funciones } f_endclass
    (26) cvars -> cvars . DEF tipo dimension : lista_id ;
    (12) f_cvars -> .

    DEF             shift and go to state 50
    }               reduce using rule 12 (f_cvars -> .)
    FUNC            reduce using rule 12 (f_cvars -> .)

    f_cvars                        shift and go to state 49

state 40

    (27) cvars -> empty .

    DEF             reduce using rule 27 (cvars -> empty .)
    }               reduce using rule 27 (cvars -> empty .)
    FUNC            reduce using rule 27 (cvars -> empty .)


state 41

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) . { estatutos } END f_end ;

    {               shift and go to state 51


state 42

    (16) funcion -> FUNC ID f_startfunc ( . params ) : tipo f_tipofunc { vars estatutos } f_endfunc
    (17) funcion -> FUNC ID f_startfunc ( . params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc
    (43) params -> . pparams
    (44) params -> . empty
    (45) pparams -> . tipo ID f_param
    (46) pparams -> . pparams , tipo ID f_param
    (132) empty -> .
    (41) tipo -> . NUMBER
    (42) tipo -> . STRING

    )               reduce using rule 132 (empty -> .)
    NUMBER          shift and go to state 22
    STRING          shift and go to state 23

    params                         shift and go to state 52
    tipo                           shift and go to state 53
    pparams                        shift and go to state 54
    empty                          shift and go to state 55

state 43

    (22) vars -> vars DEF tipo dimension : lista_id . ;
    (29) lista_id -> lista_id . , ID f_vars

    ;               shift and go to state 56
    ,               shift and go to state 57


state 44

    (28) lista_id -> ID . f_vars
    (30) f_vars -> .

    ;               reduce using rule 30 (f_vars -> .)
    ,               reduce using rule 30 (f_vars -> .)

    f_vars                         shift and go to state 58

state 45

    (34) dimension -> [ NUM f_dim1 . ] f_onedim
    (35) dimension -> [ NUM f_dim1 . ] [ NUM f_dim2 ] f_twodim

    ]               shift and go to state 59


state 46

    (31) lista_id_obj -> ID . f_vars_obj
    (33) f_vars_obj -> .

    ;               reduce using rule 33 (f_vars_obj -> .)
    ,               reduce using rule 33 (f_vars_obj -> .)

    f_vars_obj                     shift and go to state 60

state 47

    (23) vars -> vars DEF ID f_varsobj : lista_id_obj . ;
    (32) lista_id_obj -> lista_id_obj . , ID f_vars_obj

    ;               shift and go to state 61
    ,               shift and go to state 62


state 48

    (8) clase -> TYPE ID f_startclass : ID f_clasepadre . { cvars f_cvars funciones } f_endclass

    {               shift and go to state 63


state 49

    (9) clase -> TYPE ID f_startclass { cvars f_cvars . funciones } f_endclass
    (14) funciones -> . funciones funcion
    (15) funciones -> . empty
    (132) empty -> .

    }               reduce using rule 132 (empty -> .)
    FUNC            reduce using rule 132 (empty -> .)

    funciones                      shift and go to state 64
    empty                          shift and go to state 15

state 50

    (26) cvars -> cvars DEF . tipo dimension : lista_id ;
    (41) tipo -> . NUMBER
    (42) tipo -> . STRING

    NUMBER          shift and go to state 22
    STRING          shift and go to state 23

    tipo                           shift and go to state 65

state 51

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { . estatutos } END f_end ;
    (48) estatutos -> . estatutos estatuto
    (49) estatutos -> . empty
    (132) empty -> .

    }               reduce using rule 132 (empty -> .)
    CALL            reduce using rule 132 (empty -> .)
    WHILE           reduce using rule 132 (empty -> .)
    FOR             reduce using rule 132 (empty -> .)
    IF              reduce using rule 132 (empty -> .)
    ID              reduce using rule 132 (empty -> .)

    estatutos                      shift and go to state 66
    empty                          shift and go to state 67

state 52

    (16) funcion -> FUNC ID f_startfunc ( params . ) : tipo f_tipofunc { vars estatutos } f_endfunc
    (17) funcion -> FUNC ID f_startfunc ( params . ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc

    )               shift and go to state 68


state 53

    (45) pparams -> tipo . ID f_param

    ID              shift and go to state 69


state 54

    (43) params -> pparams .
    (46) pparams -> pparams . , tipo ID f_param

    )               reduce using rule 43 (params -> pparams .)
    ,               shift and go to state 70


state 55

    (44) params -> empty .

    )               reduce using rule 44 (params -> empty .)


state 56

    (22) vars -> vars DEF tipo dimension : lista_id ; .

    DEF             reduce using rule 22 (vars -> vars DEF tipo dimension : lista_id ; .)
    MAIN            reduce using rule 22 (vars -> vars DEF tipo dimension : lista_id ; .)
    FUNC            reduce using rule 22 (vars -> vars DEF tipo dimension : lista_id ; .)
    }               reduce using rule 22 (vars -> vars DEF tipo dimension : lista_id ; .)
    CALL            reduce using rule 22 (vars -> vars DEF tipo dimension : lista_id ; .)
    WHILE           reduce using rule 22 (vars -> vars DEF tipo dimension : lista_id ; .)
    FOR             reduce using rule 22 (vars -> vars DEF tipo dimension : lista_id ; .)
    IF              reduce using rule 22 (vars -> vars DEF tipo dimension : lista_id ; .)
    ID              reduce using rule 22 (vars -> vars DEF tipo dimension : lista_id ; .)


state 57

    (29) lista_id -> lista_id , . ID f_vars

    ID              shift and go to state 71


state 58

    (28) lista_id -> ID f_vars .

    ;               reduce using rule 28 (lista_id -> ID f_vars .)
    ,               reduce using rule 28 (lista_id -> ID f_vars .)


state 59

    (34) dimension -> [ NUM f_dim1 ] . f_onedim
    (35) dimension -> [ NUM f_dim1 ] . [ NUM f_dim2 ] f_twodim
    (39) f_onedim -> .

    [               shift and go to state 72
    :               reduce using rule 39 (f_onedim -> .)

    f_onedim                       shift and go to state 73

state 60

    (31) lista_id_obj -> ID f_vars_obj .

    ;               reduce using rule 31 (lista_id_obj -> ID f_vars_obj .)
    ,               reduce using rule 31 (lista_id_obj -> ID f_vars_obj .)


state 61

    (23) vars -> vars DEF ID f_varsobj : lista_id_obj ; .

    DEF             reduce using rule 23 (vars -> vars DEF ID f_varsobj : lista_id_obj ; .)
    MAIN            reduce using rule 23 (vars -> vars DEF ID f_varsobj : lista_id_obj ; .)
    FUNC            reduce using rule 23 (vars -> vars DEF ID f_varsobj : lista_id_obj ; .)
    }               reduce using rule 23 (vars -> vars DEF ID f_varsobj : lista_id_obj ; .)
    CALL            reduce using rule 23 (vars -> vars DEF ID f_varsobj : lista_id_obj ; .)
    WHILE           reduce using rule 23 (vars -> vars DEF ID f_varsobj : lista_id_obj ; .)
    FOR             reduce using rule 23 (vars -> vars DEF ID f_varsobj : lista_id_obj ; .)
    IF              reduce using rule 23 (vars -> vars DEF ID f_varsobj : lista_id_obj ; .)
    ID              reduce using rule 23 (vars -> vars DEF ID f_varsobj : lista_id_obj ; .)


state 62

    (32) lista_id_obj -> lista_id_obj , . ID f_vars_obj

    ID              shift and go to state 74


state 63

    (8) clase -> TYPE ID f_startclass : ID f_clasepadre { . cvars f_cvars funciones } f_endclass
    (26) cvars -> . cvars DEF tipo dimension : lista_id ;
    (27) cvars -> . empty
    (132) empty -> .

    DEF             reduce using rule 132 (empty -> .)
    }               reduce using rule 132 (empty -> .)
    FUNC            reduce using rule 132 (empty -> .)

    cvars                          shift and go to state 75
    empty                          shift and go to state 40

state 64

    (9) clase -> TYPE ID f_startclass { cvars f_cvars funciones . } f_endclass
    (14) funciones -> funciones . funcion
    (16) funcion -> . FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc
    (17) funcion -> . FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc

    }               shift and go to state 76
    FUNC            shift and go to state 19

    funcion                        shift and go to state 18

state 65

    (26) cvars -> cvars DEF tipo . dimension : lista_id ;
    (34) dimension -> . [ NUM f_dim1 ] f_onedim
    (35) dimension -> . [ NUM f_dim1 ] [ NUM f_dim2 ] f_twodim
    (36) dimension -> . empty
    (132) empty -> .

    [               shift and go to state 28
    :               reduce using rule 132 (empty -> .)

    dimension                      shift and go to state 77
    empty                          shift and go to state 29

state 66

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos . } END f_end ;
    (48) estatutos -> estatutos . estatuto
    (50) estatuto -> . asignacion
    (51) estatuto -> . while
    (52) estatuto -> . for
    (53) estatuto -> . condicion
    (54) estatuto -> . CALL call_func ;
    (71) asignacion -> . var = f_oper expresion ;
    (112) while -> . WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (116) for -> . FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (106) condicion -> . IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion
    (73) var -> . ID f_verify_type indexacion

    }               shift and go to state 79
    CALL            shift and go to state 85
    WHILE           shift and go to state 87
    FOR             shift and go to state 88
    IF              shift and go to state 89
    ID              shift and go to state 78

    estatuto                       shift and go to state 80
    asignacion                     shift and go to state 81
    while                          shift and go to state 82
    for                            shift and go to state 83
    condicion                      shift and go to state 84
    var                            shift and go to state 86

state 67

    (49) estatutos -> empty .

    }               reduce using rule 49 (estatutos -> empty .)
    CALL            reduce using rule 49 (estatutos -> empty .)
    WHILE           reduce using rule 49 (estatutos -> empty .)
    FOR             reduce using rule 49 (estatutos -> empty .)
    IF              reduce using rule 49 (estatutos -> empty .)
    ID              reduce using rule 49 (estatutos -> empty .)


state 68

    (16) funcion -> FUNC ID f_startfunc ( params ) . : tipo f_tipofunc { vars estatutos } f_endfunc
    (17) funcion -> FUNC ID f_startfunc ( params ) . : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc

    :               shift and go to state 90


state 69

    (45) pparams -> tipo ID . f_param
    (47) f_param -> .

    ,               reduce using rule 47 (f_param -> .)
    )               reduce using rule 47 (f_param -> .)

    f_param                        shift and go to state 91

state 70

    (46) pparams -> pparams , . tipo ID f_param
    (41) tipo -> . NUMBER
    (42) tipo -> . STRING

    NUMBER          shift and go to state 22
    STRING          shift and go to state 23

    tipo                           shift and go to state 92

state 71

    (29) lista_id -> lista_id , ID . f_vars
    (30) f_vars -> .

    ;               reduce using rule 30 (f_vars -> .)
    ,               reduce using rule 30 (f_vars -> .)

    f_vars                         shift and go to state 93

state 72

    (35) dimension -> [ NUM f_dim1 ] [ . NUM f_dim2 ] f_twodim

    NUM             shift and go to state 94


state 73

    (34) dimension -> [ NUM f_dim1 ] f_onedim .

    :               reduce using rule 34 (dimension -> [ NUM f_dim1 ] f_onedim .)


state 74

    (32) lista_id_obj -> lista_id_obj , ID . f_vars_obj
    (33) f_vars_obj -> .

    ;               reduce using rule 33 (f_vars_obj -> .)
    ,               reduce using rule 33 (f_vars_obj -> .)

    f_vars_obj                     shift and go to state 95

state 75

    (8) clase -> TYPE ID f_startclass : ID f_clasepadre { cvars . f_cvars funciones } f_endclass
    (26) cvars -> cvars . DEF tipo dimension : lista_id ;
    (12) f_cvars -> .

    DEF             shift and go to state 50
    }               reduce using rule 12 (f_cvars -> .)
    FUNC            reduce using rule 12 (f_cvars -> .)

    f_cvars                        shift and go to state 96

state 76

    (9) clase -> TYPE ID f_startclass { cvars f_cvars funciones } . f_endclass
    (13) f_endclass -> .

    TYPE            reduce using rule 13 (f_endclass -> .)
    DEF             reduce using rule 13 (f_endclass -> .)
    MAIN            reduce using rule 13 (f_endclass -> .)
    FUNC            reduce using rule 13 (f_endclass -> .)

    f_endclass                     shift and go to state 97

state 77

    (26) cvars -> cvars DEF tipo dimension . : lista_id ;

    :               shift and go to state 98


state 78

    (72) var -> ID . f_varobj : ID f_verify_type_composite indexacion
    (73) var -> ID . f_verify_type indexacion
    (77) f_varobj -> .
    (78) f_verify_type -> .

    :               reduce using rule 77 (f_varobj -> .)
    [               reduce using rule 78 (f_verify_type -> .)
    =               reduce using rule 78 (f_verify_type -> .)
    OPFACT          reduce using rule 78 (f_verify_type -> .)
    OPTERM          reduce using rule 78 (f_verify_type -> .)
    COMP            reduce using rule 78 (f_verify_type -> .)
    TO              reduce using rule 78 (f_verify_type -> .)
    )               reduce using rule 78 (f_verify_type -> .)
    &               reduce using rule 78 (f_verify_type -> .)
    ;               reduce using rule 78 (f_verify_type -> .)
    ]               reduce using rule 78 (f_verify_type -> .)
    ,               reduce using rule 78 (f_verify_type -> .)
    {               reduce using rule 78 (f_verify_type -> .)

    f_varobj                       shift and go to state 99
    f_verify_type                  shift and go to state 100

state 79

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } . END f_end ;

    END             shift and go to state 101


state 80

    (48) estatutos -> estatutos estatuto .

    }               reduce using rule 48 (estatutos -> estatutos estatuto .)
    CALL            reduce using rule 48 (estatutos -> estatutos estatuto .)
    WHILE           reduce using rule 48 (estatutos -> estatutos estatuto .)
    FOR             reduce using rule 48 (estatutos -> estatutos estatuto .)
    IF              reduce using rule 48 (estatutos -> estatutos estatuto .)
    ID              reduce using rule 48 (estatutos -> estatutos estatuto .)


state 81

    (50) estatuto -> asignacion .

    }               reduce using rule 50 (estatuto -> asignacion .)
    CALL            reduce using rule 50 (estatuto -> asignacion .)
    WHILE           reduce using rule 50 (estatuto -> asignacion .)
    FOR             reduce using rule 50 (estatuto -> asignacion .)
    IF              reduce using rule 50 (estatuto -> asignacion .)
    ID              reduce using rule 50 (estatuto -> asignacion .)


state 82

    (51) estatuto -> while .

    }               reduce using rule 51 (estatuto -> while .)
    CALL            reduce using rule 51 (estatuto -> while .)
    WHILE           reduce using rule 51 (estatuto -> while .)
    FOR             reduce using rule 51 (estatuto -> while .)
    IF              reduce using rule 51 (estatuto -> while .)
    ID              reduce using rule 51 (estatuto -> while .)


state 83

    (52) estatuto -> for .

    }               reduce using rule 52 (estatuto -> for .)
    CALL            reduce using rule 52 (estatuto -> for .)
    WHILE           reduce using rule 52 (estatuto -> for .)
    FOR             reduce using rule 52 (estatuto -> for .)
    IF              reduce using rule 52 (estatuto -> for .)
    ID              reduce using rule 52 (estatuto -> for .)


state 84

    (53) estatuto -> condicion .

    }               reduce using rule 53 (estatuto -> condicion .)
    CALL            reduce using rule 53 (estatuto -> condicion .)
    WHILE           reduce using rule 53 (estatuto -> condicion .)
    FOR             reduce using rule 53 (estatuto -> condicion .)
    IF              reduce using rule 53 (estatuto -> condicion .)
    ID              reduce using rule 53 (estatuto -> condicion .)


state 85

    (54) estatuto -> CALL . call_func ;
    (55) call_func -> . func
    (56) call_func -> . input
    (57) call_func -> . write
    (58) call_func -> . to_num
    (59) call_func -> . to_str
    (60) call_func -> . return
    (61) func -> . ID f_verify_func ( args )
    (62) func -> . ID f_varobj : ID f_verify_func_composite ( args )
    (123) input -> . INPUT ( var )
    (124) write -> . PRINT ( write_list )
    (120) to_num -> . TO_NUMBER ( STR )
    (121) to_num -> . TO_NUMBER ( var )
    (122) to_str -> . TO_STRING ( expresion )
    (131) return -> . RET ( expresion )

    ID              shift and go to state 109
    INPUT           shift and go to state 110
    PRINT           shift and go to state 111
    TO_NUMBER       shift and go to state 112
    TO_STRING       shift and go to state 113
    RET             shift and go to state 114

    call_func                      shift and go to state 102
    func                           shift and go to state 103
    input                          shift and go to state 104
    write                          shift and go to state 105
    to_num                         shift and go to state 106
    to_str                         shift and go to state 107
    return                         shift and go to state 108

state 86

    (71) asignacion -> var . = f_oper expresion ;

    =               shift and go to state 115


state 87

    (112) while -> WHILE . f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (113) f_while -> .

    (               reduce using rule 113 (f_while -> .)

    f_while                        shift and go to state 116

state 88

    (116) for -> FOR . expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (85) expresion -> . exp
    (86) expresion -> . expresion COMP f_oper exp f_expres
    (87) expresion -> . STR f_string_expr
    (90) exp -> . term
    (91) exp -> . exp OPTERM f_oper term f_exp
    (93) term -> . fact
    (94) term -> . term OPFACT f_oper fact f_term
    (97) fact -> . ( lparen expresion ) rparen
    (98) fact -> . var
    (99) fact -> . NUM f_fact
    (100) fact -> . OPTERM NUM
    (101) fact -> . CALL call_func f_return_val
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion
    (73) var -> . ID f_verify_type indexacion

    STR             shift and go to state 119
    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    expresion                      shift and go to state 117
    exp                            shift and go to state 118
    term                           shift and go to state 120
    fact                           shift and go to state 122
    var                            shift and go to state 124

state 89

    (106) condicion -> IF . ( expresion ) f_if THEN { estatutos } condicionp f_endif

    (               shift and go to state 127


state 90

    (16) funcion -> FUNC ID f_startfunc ( params ) : . tipo f_tipofunc { vars estatutos } f_endfunc
    (17) funcion -> FUNC ID f_startfunc ( params ) : . NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc
    (41) tipo -> . NUMBER
    (42) tipo -> . STRING

    NOTHING         shift and go to state 129
    NUMBER          shift and go to state 22
    STRING          shift and go to state 23

    tipo                           shift and go to state 128

state 91

    (45) pparams -> tipo ID f_param .

    ,               reduce using rule 45 (pparams -> tipo ID f_param .)
    )               reduce using rule 45 (pparams -> tipo ID f_param .)


state 92

    (46) pparams -> pparams , tipo . ID f_param

    ID              shift and go to state 130


state 93

    (29) lista_id -> lista_id , ID f_vars .

    ;               reduce using rule 29 (lista_id -> lista_id , ID f_vars .)
    ,               reduce using rule 29 (lista_id -> lista_id , ID f_vars .)


state 94

    (35) dimension -> [ NUM f_dim1 ] [ NUM . f_dim2 ] f_twodim
    (38) f_dim2 -> .

    ]               reduce using rule 38 (f_dim2 -> .)

    f_dim2                         shift and go to state 131

state 95

    (32) lista_id_obj -> lista_id_obj , ID f_vars_obj .

    ;               reduce using rule 32 (lista_id_obj -> lista_id_obj , ID f_vars_obj .)
    ,               reduce using rule 32 (lista_id_obj -> lista_id_obj , ID f_vars_obj .)


state 96

    (8) clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars . funciones } f_endclass
    (14) funciones -> . funciones funcion
    (15) funciones -> . empty
    (132) empty -> .

    }               reduce using rule 132 (empty -> .)
    FUNC            reduce using rule 132 (empty -> .)

    funciones                      shift and go to state 132
    empty                          shift and go to state 15

state 97

    (9) clase -> TYPE ID f_startclass { cvars f_cvars funciones } f_endclass .

    TYPE            reduce using rule 9 (clase -> TYPE ID f_startclass { cvars f_cvars funciones } f_endclass .)
    DEF             reduce using rule 9 (clase -> TYPE ID f_startclass { cvars f_cvars funciones } f_endclass .)
    MAIN            reduce using rule 9 (clase -> TYPE ID f_startclass { cvars f_cvars funciones } f_endclass .)
    FUNC            reduce using rule 9 (clase -> TYPE ID f_startclass { cvars f_cvars funciones } f_endclass .)


state 98

    (26) cvars -> cvars DEF tipo dimension : . lista_id ;
    (28) lista_id -> . ID f_vars
    (29) lista_id -> . lista_id , ID f_vars

    ID              shift and go to state 44

    lista_id                       shift and go to state 133

state 99

    (72) var -> ID f_varobj . : ID f_verify_type_composite indexacion

    :               shift and go to state 134


state 100

    (73) var -> ID f_verify_type . indexacion
    (74) indexacion -> . f_start_array [ expresion f_index ] f_end_array
    (75) indexacion -> . f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array
    (76) indexacion -> . f_no_index empty
    (81) f_start_array -> .
    (80) f_no_index -> .

    [               reduce using rule 81 (f_start_array -> .)
    =               reduce using rule 80 (f_no_index -> .)
    OPFACT          reduce using rule 80 (f_no_index -> .)
    OPTERM          reduce using rule 80 (f_no_index -> .)
    COMP            reduce using rule 80 (f_no_index -> .)
    TO              reduce using rule 80 (f_no_index -> .)
    )               reduce using rule 80 (f_no_index -> .)
    &               reduce using rule 80 (f_no_index -> .)
    ;               reduce using rule 80 (f_no_index -> .)
    ]               reduce using rule 80 (f_no_index -> .)
    ,               reduce using rule 80 (f_no_index -> .)
    {               reduce using rule 80 (f_no_index -> .)

    indexacion                     shift and go to state 135
    f_start_array                  shift and go to state 136
    f_no_index                     shift and go to state 137

state 101

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END . f_end ;
    (5) f_end -> .

    ;               reduce using rule 5 (f_end -> .)

    f_end                          shift and go to state 138

state 102

    (54) estatuto -> CALL call_func . ;

    ;               shift and go to state 139


state 103

    (55) call_func -> func .

    ;               reduce using rule 55 (call_func -> func .)
    OPFACT          reduce using rule 55 (call_func -> func .)
    OPTERM          reduce using rule 55 (call_func -> func .)
    COMP            reduce using rule 55 (call_func -> func .)
    TO              reduce using rule 55 (call_func -> func .)
    )               reduce using rule 55 (call_func -> func .)
    ]               reduce using rule 55 (call_func -> func .)
    ,               reduce using rule 55 (call_func -> func .)
    {               reduce using rule 55 (call_func -> func .)


state 104

    (56) call_func -> input .

    ;               reduce using rule 56 (call_func -> input .)
    OPFACT          reduce using rule 56 (call_func -> input .)
    OPTERM          reduce using rule 56 (call_func -> input .)
    COMP            reduce using rule 56 (call_func -> input .)
    TO              reduce using rule 56 (call_func -> input .)
    )               reduce using rule 56 (call_func -> input .)
    ]               reduce using rule 56 (call_func -> input .)
    ,               reduce using rule 56 (call_func -> input .)
    {               reduce using rule 56 (call_func -> input .)


state 105

    (57) call_func -> write .

    ;               reduce using rule 57 (call_func -> write .)
    OPFACT          reduce using rule 57 (call_func -> write .)
    OPTERM          reduce using rule 57 (call_func -> write .)
    COMP            reduce using rule 57 (call_func -> write .)
    TO              reduce using rule 57 (call_func -> write .)
    )               reduce using rule 57 (call_func -> write .)
    ]               reduce using rule 57 (call_func -> write .)
    ,               reduce using rule 57 (call_func -> write .)
    {               reduce using rule 57 (call_func -> write .)


state 106

    (58) call_func -> to_num .

    ;               reduce using rule 58 (call_func -> to_num .)
    OPFACT          reduce using rule 58 (call_func -> to_num .)
    OPTERM          reduce using rule 58 (call_func -> to_num .)
    COMP            reduce using rule 58 (call_func -> to_num .)
    TO              reduce using rule 58 (call_func -> to_num .)
    )               reduce using rule 58 (call_func -> to_num .)
    ]               reduce using rule 58 (call_func -> to_num .)
    ,               reduce using rule 58 (call_func -> to_num .)
    {               reduce using rule 58 (call_func -> to_num .)


state 107

    (59) call_func -> to_str .

    ;               reduce using rule 59 (call_func -> to_str .)
    OPFACT          reduce using rule 59 (call_func -> to_str .)
    OPTERM          reduce using rule 59 (call_func -> to_str .)
    COMP            reduce using rule 59 (call_func -> to_str .)
    TO              reduce using rule 59 (call_func -> to_str .)
    )               reduce using rule 59 (call_func -> to_str .)
    ]               reduce using rule 59 (call_func -> to_str .)
    ,               reduce using rule 59 (call_func -> to_str .)
    {               reduce using rule 59 (call_func -> to_str .)


state 108

    (60) call_func -> return .

    ;               reduce using rule 60 (call_func -> return .)
    OPFACT          reduce using rule 60 (call_func -> return .)
    OPTERM          reduce using rule 60 (call_func -> return .)
    COMP            reduce using rule 60 (call_func -> return .)
    TO              reduce using rule 60 (call_func -> return .)
    )               reduce using rule 60 (call_func -> return .)
    ]               reduce using rule 60 (call_func -> return .)
    ,               reduce using rule 60 (call_func -> return .)
    {               reduce using rule 60 (call_func -> return .)


state 109

    (61) func -> ID . f_verify_func ( args )
    (62) func -> ID . f_varobj : ID f_verify_func_composite ( args )
    (63) f_verify_func -> .
    (77) f_varobj -> .

    (               reduce using rule 63 (f_verify_func -> .)
    :               reduce using rule 77 (f_varobj -> .)

    f_verify_func                  shift and go to state 140
    f_varobj                       shift and go to state 141

state 110

    (123) input -> INPUT . ( var )

    (               shift and go to state 142


state 111

    (124) write -> PRINT . ( write_list )

    (               shift and go to state 143


state 112

    (120) to_num -> TO_NUMBER . ( STR )
    (121) to_num -> TO_NUMBER . ( var )

    (               shift and go to state 144


state 113

    (122) to_str -> TO_STRING . ( expresion )

    (               shift and go to state 145


state 114

    (131) return -> RET . ( expresion )

    (               shift and go to state 146


state 115

    (71) asignacion -> var = . f_oper expresion ;
    (96) f_oper -> .

    STR             reduce using rule 96 (f_oper -> .)
    (               reduce using rule 96 (f_oper -> .)
    NUM             reduce using rule 96 (f_oper -> .)
    OPTERM          reduce using rule 96 (f_oper -> .)
    CALL            reduce using rule 96 (f_oper -> .)
    ID              reduce using rule 96 (f_oper -> .)

    f_oper                         shift and go to state 147

state 116

    (112) while -> WHILE f_while . ( expresion f_exprwhile ) DO { estatutos } f_endwhile

    (               shift and go to state 148


state 117

    (116) for -> FOR expresion . f_for_start TO expresion f_for_to { estatutos } f_for_end
    (86) expresion -> expresion . COMP f_oper exp f_expres
    (117) f_for_start -> .

    COMP            shift and go to state 150
    TO              reduce using rule 117 (f_for_start -> .)

    f_for_start                    shift and go to state 149

state 118

    (85) expresion -> exp .
    (91) exp -> exp . OPTERM f_oper term f_exp

    COMP            reduce using rule 85 (expresion -> exp .)
    TO              reduce using rule 85 (expresion -> exp .)
    )               reduce using rule 85 (expresion -> exp .)
    ;               reduce using rule 85 (expresion -> exp .)
    ]               reduce using rule 85 (expresion -> exp .)
    ,               reduce using rule 85 (expresion -> exp .)
    {               reduce using rule 85 (expresion -> exp .)
    OPTERM          shift and go to state 151


state 119

    (87) expresion -> STR . f_string_expr
    (88) f_string_expr -> .

    COMP            reduce using rule 88 (f_string_expr -> .)
    TO              reduce using rule 88 (f_string_expr -> .)
    )               reduce using rule 88 (f_string_expr -> .)
    ;               reduce using rule 88 (f_string_expr -> .)
    ]               reduce using rule 88 (f_string_expr -> .)
    ,               reduce using rule 88 (f_string_expr -> .)
    {               reduce using rule 88 (f_string_expr -> .)

    f_string_expr                  shift and go to state 152

state 120

    (90) exp -> term .
    (94) term -> term . OPFACT f_oper fact f_term

    OPTERM          reduce using rule 90 (exp -> term .)
    COMP            reduce using rule 90 (exp -> term .)
    TO              reduce using rule 90 (exp -> term .)
    )               reduce using rule 90 (exp -> term .)
    ;               reduce using rule 90 (exp -> term .)
    ]               reduce using rule 90 (exp -> term .)
    ,               reduce using rule 90 (exp -> term .)
    {               reduce using rule 90 (exp -> term .)
    OPFACT          shift and go to state 153


state 121

    (100) fact -> OPTERM . NUM

    NUM             shift and go to state 154


state 122

    (93) term -> fact .

    OPFACT          reduce using rule 93 (term -> fact .)
    OPTERM          reduce using rule 93 (term -> fact .)
    COMP            reduce using rule 93 (term -> fact .)
    TO              reduce using rule 93 (term -> fact .)
    )               reduce using rule 93 (term -> fact .)
    ;               reduce using rule 93 (term -> fact .)
    ]               reduce using rule 93 (term -> fact .)
    ,               reduce using rule 93 (term -> fact .)
    {               reduce using rule 93 (term -> fact .)


state 123

    (97) fact -> ( . lparen expresion ) rparen
    (103) lparen -> .

    STR             reduce using rule 103 (lparen -> .)
    (               reduce using rule 103 (lparen -> .)
    NUM             reduce using rule 103 (lparen -> .)
    OPTERM          reduce using rule 103 (lparen -> .)
    CALL            reduce using rule 103 (lparen -> .)
    ID              reduce using rule 103 (lparen -> .)

    lparen                         shift and go to state 155

state 124

    (98) fact -> var .

    OPFACT          reduce using rule 98 (fact -> var .)
    OPTERM          reduce using rule 98 (fact -> var .)
    COMP            reduce using rule 98 (fact -> var .)
    TO              reduce using rule 98 (fact -> var .)
    )               reduce using rule 98 (fact -> var .)
    ;               reduce using rule 98 (fact -> var .)
    ]               reduce using rule 98 (fact -> var .)
    ,               reduce using rule 98 (fact -> var .)
    {               reduce using rule 98 (fact -> var .)


state 125

    (99) fact -> NUM . f_fact
    (105) f_fact -> .

    OPFACT          reduce using rule 105 (f_fact -> .)
    OPTERM          reduce using rule 105 (f_fact -> .)
    COMP            reduce using rule 105 (f_fact -> .)
    TO              reduce using rule 105 (f_fact -> .)
    )               reduce using rule 105 (f_fact -> .)
    ;               reduce using rule 105 (f_fact -> .)
    ]               reduce using rule 105 (f_fact -> .)
    ,               reduce using rule 105 (f_fact -> .)
    {               reduce using rule 105 (f_fact -> .)

    f_fact                         shift and go to state 156

state 126

    (101) fact -> CALL . call_func f_return_val
    (55) call_func -> . func
    (56) call_func -> . input
    (57) call_func -> . write
    (58) call_func -> . to_num
    (59) call_func -> . to_str
    (60) call_func -> . return
    (61) func -> . ID f_verify_func ( args )
    (62) func -> . ID f_varobj : ID f_verify_func_composite ( args )
    (123) input -> . INPUT ( var )
    (124) write -> . PRINT ( write_list )
    (120) to_num -> . TO_NUMBER ( STR )
    (121) to_num -> . TO_NUMBER ( var )
    (122) to_str -> . TO_STRING ( expresion )
    (131) return -> . RET ( expresion )

    ID              shift and go to state 109
    INPUT           shift and go to state 110
    PRINT           shift and go to state 111
    TO_NUMBER       shift and go to state 112
    TO_STRING       shift and go to state 113
    RET             shift and go to state 114

    call_func                      shift and go to state 157
    func                           shift and go to state 103
    input                          shift and go to state 104
    write                          shift and go to state 105
    to_num                         shift and go to state 106
    to_str                         shift and go to state 107
    return                         shift and go to state 108

state 127

    (106) condicion -> IF ( . expresion ) f_if THEN { estatutos } condicionp f_endif
    (85) expresion -> . exp
    (86) expresion -> . expresion COMP f_oper exp f_expres
    (87) expresion -> . STR f_string_expr
    (90) exp -> . term
    (91) exp -> . exp OPTERM f_oper term f_exp
    (93) term -> . fact
    (94) term -> . term OPFACT f_oper fact f_term
    (97) fact -> . ( lparen expresion ) rparen
    (98) fact -> . var
    (99) fact -> . NUM f_fact
    (100) fact -> . OPTERM NUM
    (101) fact -> . CALL call_func f_return_val
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion
    (73) var -> . ID f_verify_type indexacion

    STR             shift and go to state 119
    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    expresion                      shift and go to state 158
    exp                            shift and go to state 118
    term                           shift and go to state 120
    fact                           shift and go to state 122
    var                            shift and go to state 124

state 128

    (16) funcion -> FUNC ID f_startfunc ( params ) : tipo . f_tipofunc { vars estatutos } f_endfunc
    (20) f_tipofunc -> .

    {               reduce using rule 20 (f_tipofunc -> .)

    f_tipofunc                     shift and go to state 159

state 129

    (17) funcion -> FUNC ID f_startfunc ( params ) : NOTHING . f_nothing f_tipofunc { vars estatutos } f_endfunc
    (19) f_nothing -> .

    {               reduce using rule 19 (f_nothing -> .)

    f_nothing                      shift and go to state 160

state 130

    (46) pparams -> pparams , tipo ID . f_param
    (47) f_param -> .

    ,               reduce using rule 47 (f_param -> .)
    )               reduce using rule 47 (f_param -> .)

    f_param                        shift and go to state 161

state 131

    (35) dimension -> [ NUM f_dim1 ] [ NUM f_dim2 . ] f_twodim

    ]               shift and go to state 162


state 132

    (8) clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones . } f_endclass
    (14) funciones -> funciones . funcion
    (16) funcion -> . FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc
    (17) funcion -> . FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc

    }               shift and go to state 163
    FUNC            shift and go to state 19

    funcion                        shift and go to state 18

state 133

    (26) cvars -> cvars DEF tipo dimension : lista_id . ;
    (29) lista_id -> lista_id . , ID f_vars

    ;               shift and go to state 164
    ,               shift and go to state 57


state 134

    (72) var -> ID f_varobj : . ID f_verify_type_composite indexacion

    ID              shift and go to state 165


state 135

    (73) var -> ID f_verify_type indexacion .

    =               reduce using rule 73 (var -> ID f_verify_type indexacion .)
    OPFACT          reduce using rule 73 (var -> ID f_verify_type indexacion .)
    OPTERM          reduce using rule 73 (var -> ID f_verify_type indexacion .)
    COMP            reduce using rule 73 (var -> ID f_verify_type indexacion .)
    TO              reduce using rule 73 (var -> ID f_verify_type indexacion .)
    )               reduce using rule 73 (var -> ID f_verify_type indexacion .)
    &               reduce using rule 73 (var -> ID f_verify_type indexacion .)
    ;               reduce using rule 73 (var -> ID f_verify_type indexacion .)
    ]               reduce using rule 73 (var -> ID f_verify_type indexacion .)
    ,               reduce using rule 73 (var -> ID f_verify_type indexacion .)
    {               reduce using rule 73 (var -> ID f_verify_type indexacion .)


state 136

    (74) indexacion -> f_start_array . [ expresion f_index ] f_end_array
    (75) indexacion -> f_start_array . [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array

    [               shift and go to state 166


state 137

    (76) indexacion -> f_no_index . empty
    (132) empty -> .

    =               reduce using rule 132 (empty -> .)
    OPFACT          reduce using rule 132 (empty -> .)
    OPTERM          reduce using rule 132 (empty -> .)
    COMP            reduce using rule 132 (empty -> .)
    TO              reduce using rule 132 (empty -> .)
    )               reduce using rule 132 (empty -> .)
    &               reduce using rule 132 (empty -> .)
    ;               reduce using rule 132 (empty -> .)
    ]               reduce using rule 132 (empty -> .)
    ,               reduce using rule 132 (empty -> .)
    {               reduce using rule 132 (empty -> .)

    empty                          shift and go to state 167

state 138

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end . ;

    ;               shift and go to state 168


state 139

    (54) estatuto -> CALL call_func ; .

    }               reduce using rule 54 (estatuto -> CALL call_func ; .)
    CALL            reduce using rule 54 (estatuto -> CALL call_func ; .)
    WHILE           reduce using rule 54 (estatuto -> CALL call_func ; .)
    FOR             reduce using rule 54 (estatuto -> CALL call_func ; .)
    IF              reduce using rule 54 (estatuto -> CALL call_func ; .)
    ID              reduce using rule 54 (estatuto -> CALL call_func ; .)


state 140

    (61) func -> ID f_verify_func . ( args )

    (               shift and go to state 169


state 141

    (62) func -> ID f_varobj . : ID f_verify_func_composite ( args )

    :               shift and go to state 170


state 142

    (123) input -> INPUT ( . var )
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion
    (73) var -> . ID f_verify_type indexacion

    ID              shift and go to state 78

    var                            shift and go to state 171

state 143

    (124) write -> PRINT ( . write_list )
    (125) write_list -> . write_list & write_listp
    (126) write_list -> . write_listp
    (127) write_listp -> . STR f_string
    (128) write_listp -> . var
    (129) write_listp -> . CALL to_str
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion
    (73) var -> . ID f_verify_type indexacion

    STR             shift and go to state 174
    CALL            shift and go to state 176
    ID              shift and go to state 78

    write_list                     shift and go to state 172
    write_listp                    shift and go to state 173
    var                            shift and go to state 175

state 144

    (120) to_num -> TO_NUMBER ( . STR )
    (121) to_num -> TO_NUMBER ( . var )
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion
    (73) var -> . ID f_verify_type indexacion

    STR             shift and go to state 177
    ID              shift and go to state 78

    var                            shift and go to state 178

state 145

    (122) to_str -> TO_STRING ( . expresion )
    (85) expresion -> . exp
    (86) expresion -> . expresion COMP f_oper exp f_expres
    (87) expresion -> . STR f_string_expr
    (90) exp -> . term
    (91) exp -> . exp OPTERM f_oper term f_exp
    (93) term -> . fact
    (94) term -> . term OPFACT f_oper fact f_term
    (97) fact -> . ( lparen expresion ) rparen
    (98) fact -> . var
    (99) fact -> . NUM f_fact
    (100) fact -> . OPTERM NUM
    (101) fact -> . CALL call_func f_return_val
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion
    (73) var -> . ID f_verify_type indexacion

    STR             shift and go to state 119
    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    expresion                      shift and go to state 179
    exp                            shift and go to state 118
    term                           shift and go to state 120
    fact                           shift and go to state 122
    var                            shift and go to state 124

state 146

    (131) return -> RET ( . expresion )
    (85) expresion -> . exp
    (86) expresion -> . expresion COMP f_oper exp f_expres
    (87) expresion -> . STR f_string_expr
    (90) exp -> . term
    (91) exp -> . exp OPTERM f_oper term f_exp
    (93) term -> . fact
    (94) term -> . term OPFACT f_oper fact f_term
    (97) fact -> . ( lparen expresion ) rparen
    (98) fact -> . var
    (99) fact -> . NUM f_fact
    (100) fact -> . OPTERM NUM
    (101) fact -> . CALL call_func f_return_val
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion
    (73) var -> . ID f_verify_type indexacion

    STR             shift and go to state 119
    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    expresion                      shift and go to state 180
    exp                            shift and go to state 118
    term                           shift and go to state 120
    fact                           shift and go to state 122
    var                            shift and go to state 124

state 147

    (71) asignacion -> var = f_oper . expresion ;
    (85) expresion -> . exp
    (86) expresion -> . expresion COMP f_oper exp f_expres
    (87) expresion -> . STR f_string_expr
    (90) exp -> . term
    (91) exp -> . exp OPTERM f_oper term f_exp
    (93) term -> . fact
    (94) term -> . term OPFACT f_oper fact f_term
    (97) fact -> . ( lparen expresion ) rparen
    (98) fact -> . var
    (99) fact -> . NUM f_fact
    (100) fact -> . OPTERM NUM
    (101) fact -> . CALL call_func f_return_val
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion
    (73) var -> . ID f_verify_type indexacion

    STR             shift and go to state 119
    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    var                            shift and go to state 124
    expresion                      shift and go to state 181
    exp                            shift and go to state 118
    term                           shift and go to state 120
    fact                           shift and go to state 122

state 148

    (112) while -> WHILE f_while ( . expresion f_exprwhile ) DO { estatutos } f_endwhile
    (85) expresion -> . exp
    (86) expresion -> . expresion COMP f_oper exp f_expres
    (87) expresion -> . STR f_string_expr
    (90) exp -> . term
    (91) exp -> . exp OPTERM f_oper term f_exp
    (93) term -> . fact
    (94) term -> . term OPFACT f_oper fact f_term
    (97) fact -> . ( lparen expresion ) rparen
    (98) fact -> . var
    (99) fact -> . NUM f_fact
    (100) fact -> . OPTERM NUM
    (101) fact -> . CALL call_func f_return_val
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion
    (73) var -> . ID f_verify_type indexacion

    STR             shift and go to state 119
    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    expresion                      shift and go to state 182
    exp                            shift and go to state 118
    term                           shift and go to state 120
    fact                           shift and go to state 122
    var                            shift and go to state 124

state 149

    (116) for -> FOR expresion f_for_start . TO expresion f_for_to { estatutos } f_for_end

    TO              shift and go to state 183


state 150

    (86) expresion -> expresion COMP . f_oper exp f_expres
    (96) f_oper -> .

    (               reduce using rule 96 (f_oper -> .)
    NUM             reduce using rule 96 (f_oper -> .)
    OPTERM          reduce using rule 96 (f_oper -> .)
    CALL            reduce using rule 96 (f_oper -> .)
    ID              reduce using rule 96 (f_oper -> .)

    f_oper                         shift and go to state 184

state 151

    (91) exp -> exp OPTERM . f_oper term f_exp
    (96) f_oper -> .

    (               reduce using rule 96 (f_oper -> .)
    NUM             reduce using rule 96 (f_oper -> .)
    OPTERM          reduce using rule 96 (f_oper -> .)
    CALL            reduce using rule 96 (f_oper -> .)
    ID              reduce using rule 96 (f_oper -> .)

    f_oper                         shift and go to state 185

state 152

    (87) expresion -> STR f_string_expr .

    COMP            reduce using rule 87 (expresion -> STR f_string_expr .)
    TO              reduce using rule 87 (expresion -> STR f_string_expr .)
    )               reduce using rule 87 (expresion -> STR f_string_expr .)
    ;               reduce using rule 87 (expresion -> STR f_string_expr .)
    ]               reduce using rule 87 (expresion -> STR f_string_expr .)
    ,               reduce using rule 87 (expresion -> STR f_string_expr .)
    {               reduce using rule 87 (expresion -> STR f_string_expr .)


state 153

    (94) term -> term OPFACT . f_oper fact f_term
    (96) f_oper -> .

    (               reduce using rule 96 (f_oper -> .)
    NUM             reduce using rule 96 (f_oper -> .)
    OPTERM          reduce using rule 96 (f_oper -> .)
    CALL            reduce using rule 96 (f_oper -> .)
    ID              reduce using rule 96 (f_oper -> .)

    f_oper                         shift and go to state 186

state 154

    (100) fact -> OPTERM NUM .

    OPFACT          reduce using rule 100 (fact -> OPTERM NUM .)
    OPTERM          reduce using rule 100 (fact -> OPTERM NUM .)
    COMP            reduce using rule 100 (fact -> OPTERM NUM .)
    TO              reduce using rule 100 (fact -> OPTERM NUM .)
    )               reduce using rule 100 (fact -> OPTERM NUM .)
    ;               reduce using rule 100 (fact -> OPTERM NUM .)
    ]               reduce using rule 100 (fact -> OPTERM NUM .)
    ,               reduce using rule 100 (fact -> OPTERM NUM .)
    {               reduce using rule 100 (fact -> OPTERM NUM .)


state 155

    (97) fact -> ( lparen . expresion ) rparen
    (85) expresion -> . exp
    (86) expresion -> . expresion COMP f_oper exp f_expres
    (87) expresion -> . STR f_string_expr
    (90) exp -> . term
    (91) exp -> . exp OPTERM f_oper term f_exp
    (93) term -> . fact
    (94) term -> . term OPFACT f_oper fact f_term
    (97) fact -> . ( lparen expresion ) rparen
    (98) fact -> . var
    (99) fact -> . NUM f_fact
    (100) fact -> . OPTERM NUM
    (101) fact -> . CALL call_func f_return_val
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion
    (73) var -> . ID f_verify_type indexacion

    STR             shift and go to state 119
    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    expresion                      shift and go to state 187
    exp                            shift and go to state 118
    term                           shift and go to state 120
    fact                           shift and go to state 122
    var                            shift and go to state 124

state 156

    (99) fact -> NUM f_fact .

    OPFACT          reduce using rule 99 (fact -> NUM f_fact .)
    OPTERM          reduce using rule 99 (fact -> NUM f_fact .)
    COMP            reduce using rule 99 (fact -> NUM f_fact .)
    TO              reduce using rule 99 (fact -> NUM f_fact .)
    )               reduce using rule 99 (fact -> NUM f_fact .)
    ;               reduce using rule 99 (fact -> NUM f_fact .)
    ]               reduce using rule 99 (fact -> NUM f_fact .)
    ,               reduce using rule 99 (fact -> NUM f_fact .)
    {               reduce using rule 99 (fact -> NUM f_fact .)


state 157

    (101) fact -> CALL call_func . f_return_val
    (102) f_return_val -> .

    OPFACT          reduce using rule 102 (f_return_val -> .)
    OPTERM          reduce using rule 102 (f_return_val -> .)
    COMP            reduce using rule 102 (f_return_val -> .)
    TO              reduce using rule 102 (f_return_val -> .)
    )               reduce using rule 102 (f_return_val -> .)
    ;               reduce using rule 102 (f_return_val -> .)
    ]               reduce using rule 102 (f_return_val -> .)
    ,               reduce using rule 102 (f_return_val -> .)
    {               reduce using rule 102 (f_return_val -> .)

    f_return_val                   shift and go to state 188

state 158

    (106) condicion -> IF ( expresion . ) f_if THEN { estatutos } condicionp f_endif
    (86) expresion -> expresion . COMP f_oper exp f_expres

    )               shift and go to state 189
    COMP            shift and go to state 150


state 159

    (16) funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc . { vars estatutos } f_endfunc

    {               shift and go to state 190


state 160

    (17) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing . f_tipofunc { vars estatutos } f_endfunc
    (20) f_tipofunc -> .

    {               reduce using rule 20 (f_tipofunc -> .)

    f_tipofunc                     shift and go to state 191

state 161

    (46) pparams -> pparams , tipo ID f_param .

    ,               reduce using rule 46 (pparams -> pparams , tipo ID f_param .)
    )               reduce using rule 46 (pparams -> pparams , tipo ID f_param .)


state 162

    (35) dimension -> [ NUM f_dim1 ] [ NUM f_dim2 ] . f_twodim
    (40) f_twodim -> .

    :               reduce using rule 40 (f_twodim -> .)

    f_twodim                       shift and go to state 192

state 163

    (8) clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } . f_endclass
    (13) f_endclass -> .

    TYPE            reduce using rule 13 (f_endclass -> .)
    DEF             reduce using rule 13 (f_endclass -> .)
    MAIN            reduce using rule 13 (f_endclass -> .)
    FUNC            reduce using rule 13 (f_endclass -> .)

    f_endclass                     shift and go to state 193

state 164

    (26) cvars -> cvars DEF tipo dimension : lista_id ; .

    DEF             reduce using rule 26 (cvars -> cvars DEF tipo dimension : lista_id ; .)
    }               reduce using rule 26 (cvars -> cvars DEF tipo dimension : lista_id ; .)
    FUNC            reduce using rule 26 (cvars -> cvars DEF tipo dimension : lista_id ; .)


state 165

    (72) var -> ID f_varobj : ID . f_verify_type_composite indexacion
    (79) f_verify_type_composite -> .

    [               reduce using rule 79 (f_verify_type_composite -> .)
    =               reduce using rule 79 (f_verify_type_composite -> .)
    OPFACT          reduce using rule 79 (f_verify_type_composite -> .)
    OPTERM          reduce using rule 79 (f_verify_type_composite -> .)
    COMP            reduce using rule 79 (f_verify_type_composite -> .)
    TO              reduce using rule 79 (f_verify_type_composite -> .)
    )               reduce using rule 79 (f_verify_type_composite -> .)
    &               reduce using rule 79 (f_verify_type_composite -> .)
    ;               reduce using rule 79 (f_verify_type_composite -> .)
    ]               reduce using rule 79 (f_verify_type_composite -> .)
    ,               reduce using rule 79 (f_verify_type_composite -> .)
    {               reduce using rule 79 (f_verify_type_composite -> .)

    f_verify_type_composite        shift and go to state 194

state 166

    (74) indexacion -> f_start_array [ . expresion f_index ] f_end_array
    (75) indexacion -> f_start_array [ . expresion f_index ] [ f_next_index expresion f_index ] f_end_array
    (85) expresion -> . exp
    (86) expresion -> . expresion COMP f_oper exp f_expres
    (87) expresion -> . STR f_string_expr
    (90) exp -> . term
    (91) exp -> . exp OPTERM f_oper term f_exp
    (93) term -> . fact
    (94) term -> . term OPFACT f_oper fact f_term
    (97) fact -> . ( lparen expresion ) rparen
    (98) fact -> . var
    (99) fact -> . NUM f_fact
    (100) fact -> . OPTERM NUM
    (101) fact -> . CALL call_func f_return_val
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion
    (73) var -> . ID f_verify_type indexacion

    STR             shift and go to state 119
    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    expresion                      shift and go to state 195
    exp                            shift and go to state 118
    term                           shift and go to state 120
    fact                           shift and go to state 122
    var                            shift and go to state 124

state 167

    (76) indexacion -> f_no_index empty .

    =               reduce using rule 76 (indexacion -> f_no_index empty .)
    OPFACT          reduce using rule 76 (indexacion -> f_no_index empty .)
    OPTERM          reduce using rule 76 (indexacion -> f_no_index empty .)
    COMP            reduce using rule 76 (indexacion -> f_no_index empty .)
    TO              reduce using rule 76 (indexacion -> f_no_index empty .)
    )               reduce using rule 76 (indexacion -> f_no_index empty .)
    &               reduce using rule 76 (indexacion -> f_no_index empty .)
    ;               reduce using rule 76 (indexacion -> f_no_index empty .)
    ]               reduce using rule 76 (indexacion -> f_no_index empty .)
    ,               reduce using rule 76 (indexacion -> f_no_index empty .)
    {               reduce using rule 76 (indexacion -> f_no_index empty .)


state 168

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ; .

    $end            reduce using rule 1 (start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ; .)


state 169

    (61) func -> ID f_verify_func ( . args )
    (65) args -> . args_list f_end_args
    (66) args -> . f_end_args
    (67) args_list -> . expresion f_arg
    (68) args_list -> . args_list , expresion f_arg
    (70) f_end_args -> .
    (85) expresion -> . exp
    (86) expresion -> . expresion COMP f_oper exp f_expres
    (87) expresion -> . STR f_string_expr
    (90) exp -> . term
    (91) exp -> . exp OPTERM f_oper term f_exp
    (93) term -> . fact
    (94) term -> . term OPFACT f_oper fact f_term
    (97) fact -> . ( lparen expresion ) rparen
    (98) fact -> . var
    (99) fact -> . NUM f_fact
    (100) fact -> . OPTERM NUM
    (101) fact -> . CALL call_func f_return_val
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion
    (73) var -> . ID f_verify_type indexacion

    )               reduce using rule 70 (f_end_args -> .)
    STR             shift and go to state 119
    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    args                           shift and go to state 196
    args_list                      shift and go to state 197
    f_end_args                     shift and go to state 198
    expresion                      shift and go to state 199
    exp                            shift and go to state 118
    term                           shift and go to state 120
    fact                           shift and go to state 122
    var                            shift and go to state 124

state 170

    (62) func -> ID f_varobj : . ID f_verify_func_composite ( args )

    ID              shift and go to state 200


state 171

    (123) input -> INPUT ( var . )

    )               shift and go to state 201


state 172

    (124) write -> PRINT ( write_list . )
    (125) write_list -> write_list . & write_listp

    )               shift and go to state 202
    &               shift and go to state 203


state 173

    (126) write_list -> write_listp .

    )               reduce using rule 126 (write_list -> write_listp .)
    &               reduce using rule 126 (write_list -> write_listp .)


state 174

    (127) write_listp -> STR . f_string
    (130) f_string -> .

    )               reduce using rule 130 (f_string -> .)
    &               reduce using rule 130 (f_string -> .)

    f_string                       shift and go to state 204

state 175

    (128) write_listp -> var .

    )               reduce using rule 128 (write_listp -> var .)
    &               reduce using rule 128 (write_listp -> var .)


state 176

    (129) write_listp -> CALL . to_str
    (122) to_str -> . TO_STRING ( expresion )

    TO_STRING       shift and go to state 113

    to_str                         shift and go to state 205

state 177

    (120) to_num -> TO_NUMBER ( STR . )

    )               shift and go to state 206


state 178

    (121) to_num -> TO_NUMBER ( var . )

    )               shift and go to state 207


state 179

    (122) to_str -> TO_STRING ( expresion . )
    (86) expresion -> expresion . COMP f_oper exp f_expres

    )               shift and go to state 208
    COMP            shift and go to state 150


state 180

    (131) return -> RET ( expresion . )
    (86) expresion -> expresion . COMP f_oper exp f_expres

    )               shift and go to state 209
    COMP            shift and go to state 150


state 181

    (71) asignacion -> var = f_oper expresion . ;
    (86) expresion -> expresion . COMP f_oper exp f_expres

    ;               shift and go to state 210
    COMP            shift and go to state 150


state 182

    (112) while -> WHILE f_while ( expresion . f_exprwhile ) DO { estatutos } f_endwhile
    (86) expresion -> expresion . COMP f_oper exp f_expres
    (114) f_exprwhile -> .

    COMP            shift and go to state 150
    )               reduce using rule 114 (f_exprwhile -> .)

    f_exprwhile                    shift and go to state 211

state 183

    (116) for -> FOR expresion f_for_start TO . expresion f_for_to { estatutos } f_for_end
    (85) expresion -> . exp
    (86) expresion -> . expresion COMP f_oper exp f_expres
    (87) expresion -> . STR f_string_expr
    (90) exp -> . term
    (91) exp -> . exp OPTERM f_oper term f_exp
    (93) term -> . fact
    (94) term -> . term OPFACT f_oper fact f_term
    (97) fact -> . ( lparen expresion ) rparen
    (98) fact -> . var
    (99) fact -> . NUM f_fact
    (100) fact -> . OPTERM NUM
    (101) fact -> . CALL call_func f_return_val
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion
    (73) var -> . ID f_verify_type indexacion

    STR             shift and go to state 119
    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    expresion                      shift and go to state 212
    exp                            shift and go to state 118
    term                           shift and go to state 120
    fact                           shift and go to state 122
    var                            shift and go to state 124

state 184

    (86) expresion -> expresion COMP f_oper . exp f_expres
    (90) exp -> . term
    (91) exp -> . exp OPTERM f_oper term f_exp
    (93) term -> . fact
    (94) term -> . term OPFACT f_oper fact f_term
    (97) fact -> . ( lparen expresion ) rparen
    (98) fact -> . var
    (99) fact -> . NUM f_fact
    (100) fact -> . OPTERM NUM
    (101) fact -> . CALL call_func f_return_val
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion
    (73) var -> . ID f_verify_type indexacion

    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    exp                            shift and go to state 213
    term                           shift and go to state 120
    fact                           shift and go to state 122
    var                            shift and go to state 124

state 185

    (91) exp -> exp OPTERM f_oper . term f_exp
    (93) term -> . fact
    (94) term -> . term OPFACT f_oper fact f_term
    (97) fact -> . ( lparen expresion ) rparen
    (98) fact -> . var
    (99) fact -> . NUM f_fact
    (100) fact -> . OPTERM NUM
    (101) fact -> . CALL call_func f_return_val
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion
    (73) var -> . ID f_verify_type indexacion

    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    term                           shift and go to state 214
    fact                           shift and go to state 122
    var                            shift and go to state 124

state 186

    (94) term -> term OPFACT f_oper . fact f_term
    (97) fact -> . ( lparen expresion ) rparen
    (98) fact -> . var
    (99) fact -> . NUM f_fact
    (100) fact -> . OPTERM NUM
    (101) fact -> . CALL call_func f_return_val
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion
    (73) var -> . ID f_verify_type indexacion

    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    fact                           shift and go to state 215
    var                            shift and go to state 124

state 187

    (97) fact -> ( lparen expresion . ) rparen
    (86) expresion -> expresion . COMP f_oper exp f_expres

    )               shift and go to state 216
    COMP            shift and go to state 150


state 188

    (101) fact -> CALL call_func f_return_val .

    OPFACT          reduce using rule 101 (fact -> CALL call_func f_return_val .)
    OPTERM          reduce using rule 101 (fact -> CALL call_func f_return_val .)
    COMP            reduce using rule 101 (fact -> CALL call_func f_return_val .)
    TO              reduce using rule 101 (fact -> CALL call_func f_return_val .)
    )               reduce using rule 101 (fact -> CALL call_func f_return_val .)
    ;               reduce using rule 101 (fact -> CALL call_func f_return_val .)
    ]               reduce using rule 101 (fact -> CALL call_func f_return_val .)
    ,               reduce using rule 101 (fact -> CALL call_func f_return_val .)
    {               reduce using rule 101 (fact -> CALL call_func f_return_val .)


state 189

    (106) condicion -> IF ( expresion ) . f_if THEN { estatutos } condicionp f_endif
    (109) f_if -> .

    THEN            reduce using rule 109 (f_if -> .)

    f_if                           shift and go to state 217

state 190

    (16) funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { . vars estatutos } f_endfunc
    (22) vars -> . vars DEF tipo dimension : lista_id ;
    (23) vars -> . vars DEF ID f_varsobj : lista_id_obj ;
    (24) vars -> . empty
    (132) empty -> .

    DEF             reduce using rule 132 (empty -> .)
    }               reduce using rule 132 (empty -> .)
    CALL            reduce using rule 132 (empty -> .)
    WHILE           reduce using rule 132 (empty -> .)
    FOR             reduce using rule 132 (empty -> .)
    IF              reduce using rule 132 (empty -> .)
    ID              reduce using rule 132 (empty -> .)

    vars                           shift and go to state 218
    empty                          shift and go to state 11

state 191

    (17) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc . { vars estatutos } f_endfunc

    {               shift and go to state 219


state 192

    (35) dimension -> [ NUM f_dim1 ] [ NUM f_dim2 ] f_twodim .

    :               reduce using rule 35 (dimension -> [ NUM f_dim1 ] [ NUM f_dim2 ] f_twodim .)


state 193

    (8) clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass .

    TYPE            reduce using rule 8 (clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass .)
    DEF             reduce using rule 8 (clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass .)
    MAIN            reduce using rule 8 (clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass .)
    FUNC            reduce using rule 8 (clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass .)


state 194

    (72) var -> ID f_varobj : ID f_verify_type_composite . indexacion
    (74) indexacion -> . f_start_array [ expresion f_index ] f_end_array
    (75) indexacion -> . f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array
    (76) indexacion -> . f_no_index empty
    (81) f_start_array -> .
    (80) f_no_index -> .

    [               reduce using rule 81 (f_start_array -> .)
    =               reduce using rule 80 (f_no_index -> .)
    OPFACT          reduce using rule 80 (f_no_index -> .)
    OPTERM          reduce using rule 80 (f_no_index -> .)
    COMP            reduce using rule 80 (f_no_index -> .)
    TO              reduce using rule 80 (f_no_index -> .)
    )               reduce using rule 80 (f_no_index -> .)
    &               reduce using rule 80 (f_no_index -> .)
    ;               reduce using rule 80 (f_no_index -> .)
    ]               reduce using rule 80 (f_no_index -> .)
    ,               reduce using rule 80 (f_no_index -> .)
    {               reduce using rule 80 (f_no_index -> .)

    indexacion                     shift and go to state 220
    f_start_array                  shift and go to state 136
    f_no_index                     shift and go to state 137

state 195

    (74) indexacion -> f_start_array [ expresion . f_index ] f_end_array
    (75) indexacion -> f_start_array [ expresion . f_index ] [ f_next_index expresion f_index ] f_end_array
    (86) expresion -> expresion . COMP f_oper exp f_expres
    (82) f_index -> .

    COMP            shift and go to state 150
    ]               reduce using rule 82 (f_index -> .)

    f_index                        shift and go to state 221

state 196

    (61) func -> ID f_verify_func ( args . )

    )               shift and go to state 222


state 197

    (65) args -> args_list . f_end_args
    (68) args_list -> args_list . , expresion f_arg
    (70) f_end_args -> .

    ,               shift and go to state 224
    )               reduce using rule 70 (f_end_args -> .)

    f_end_args                     shift and go to state 223

state 198

    (66) args -> f_end_args .

    )               reduce using rule 66 (args -> f_end_args .)


state 199

    (67) args_list -> expresion . f_arg
    (86) expresion -> expresion . COMP f_oper exp f_expres
    (69) f_arg -> .

    COMP            shift and go to state 150
    ,               reduce using rule 69 (f_arg -> .)
    )               reduce using rule 69 (f_arg -> .)

    f_arg                          shift and go to state 225

state 200

    (62) func -> ID f_varobj : ID . f_verify_func_composite ( args )
    (64) f_verify_func_composite -> .

    (               reduce using rule 64 (f_verify_func_composite -> .)

    f_verify_func_composite        shift and go to state 226

state 201

    (123) input -> INPUT ( var ) .

    ;               reduce using rule 123 (input -> INPUT ( var ) .)
    OPFACT          reduce using rule 123 (input -> INPUT ( var ) .)
    OPTERM          reduce using rule 123 (input -> INPUT ( var ) .)
    COMP            reduce using rule 123 (input -> INPUT ( var ) .)
    TO              reduce using rule 123 (input -> INPUT ( var ) .)
    )               reduce using rule 123 (input -> INPUT ( var ) .)
    ]               reduce using rule 123 (input -> INPUT ( var ) .)
    ,               reduce using rule 123 (input -> INPUT ( var ) .)
    {               reduce using rule 123 (input -> INPUT ( var ) .)


state 202

    (124) write -> PRINT ( write_list ) .

    ;               reduce using rule 124 (write -> PRINT ( write_list ) .)
    OPFACT          reduce using rule 124 (write -> PRINT ( write_list ) .)
    OPTERM          reduce using rule 124 (write -> PRINT ( write_list ) .)
    COMP            reduce using rule 124 (write -> PRINT ( write_list ) .)
    TO              reduce using rule 124 (write -> PRINT ( write_list ) .)
    )               reduce using rule 124 (write -> PRINT ( write_list ) .)
    ]               reduce using rule 124 (write -> PRINT ( write_list ) .)
    ,               reduce using rule 124 (write -> PRINT ( write_list ) .)
    {               reduce using rule 124 (write -> PRINT ( write_list ) .)


state 203

    (125) write_list -> write_list & . write_listp
    (127) write_listp -> . STR f_string
    (128) write_listp -> . var
    (129) write_listp -> . CALL to_str
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion
    (73) var -> . ID f_verify_type indexacion

    STR             shift and go to state 174
    CALL            shift and go to state 176
    ID              shift and go to state 78

    write_listp                    shift and go to state 227
    var                            shift and go to state 175

state 204

    (127) write_listp -> STR f_string .

    )               reduce using rule 127 (write_listp -> STR f_string .)
    &               reduce using rule 127 (write_listp -> STR f_string .)


state 205

    (129) write_listp -> CALL to_str .

    )               reduce using rule 129 (write_listp -> CALL to_str .)
    &               reduce using rule 129 (write_listp -> CALL to_str .)


state 206

    (120) to_num -> TO_NUMBER ( STR ) .

    ;               reduce using rule 120 (to_num -> TO_NUMBER ( STR ) .)
    OPFACT          reduce using rule 120 (to_num -> TO_NUMBER ( STR ) .)
    OPTERM          reduce using rule 120 (to_num -> TO_NUMBER ( STR ) .)
    COMP            reduce using rule 120 (to_num -> TO_NUMBER ( STR ) .)
    TO              reduce using rule 120 (to_num -> TO_NUMBER ( STR ) .)
    )               reduce using rule 120 (to_num -> TO_NUMBER ( STR ) .)
    ]               reduce using rule 120 (to_num -> TO_NUMBER ( STR ) .)
    ,               reduce using rule 120 (to_num -> TO_NUMBER ( STR ) .)
    {               reduce using rule 120 (to_num -> TO_NUMBER ( STR ) .)


state 207

    (121) to_num -> TO_NUMBER ( var ) .

    ;               reduce using rule 121 (to_num -> TO_NUMBER ( var ) .)
    OPFACT          reduce using rule 121 (to_num -> TO_NUMBER ( var ) .)
    OPTERM          reduce using rule 121 (to_num -> TO_NUMBER ( var ) .)
    COMP            reduce using rule 121 (to_num -> TO_NUMBER ( var ) .)
    TO              reduce using rule 121 (to_num -> TO_NUMBER ( var ) .)
    )               reduce using rule 121 (to_num -> TO_NUMBER ( var ) .)
    ]               reduce using rule 121 (to_num -> TO_NUMBER ( var ) .)
    ,               reduce using rule 121 (to_num -> TO_NUMBER ( var ) .)
    {               reduce using rule 121 (to_num -> TO_NUMBER ( var ) .)


state 208

    (122) to_str -> TO_STRING ( expresion ) .

    ;               reduce using rule 122 (to_str -> TO_STRING ( expresion ) .)
    OPFACT          reduce using rule 122 (to_str -> TO_STRING ( expresion ) .)
    OPTERM          reduce using rule 122 (to_str -> TO_STRING ( expresion ) .)
    COMP            reduce using rule 122 (to_str -> TO_STRING ( expresion ) .)
    TO              reduce using rule 122 (to_str -> TO_STRING ( expresion ) .)
    )               reduce using rule 122 (to_str -> TO_STRING ( expresion ) .)
    ]               reduce using rule 122 (to_str -> TO_STRING ( expresion ) .)
    ,               reduce using rule 122 (to_str -> TO_STRING ( expresion ) .)
    {               reduce using rule 122 (to_str -> TO_STRING ( expresion ) .)
    &               reduce using rule 122 (to_str -> TO_STRING ( expresion ) .)


state 209

    (131) return -> RET ( expresion ) .

    ;               reduce using rule 131 (return -> RET ( expresion ) .)
    OPFACT          reduce using rule 131 (return -> RET ( expresion ) .)
    OPTERM          reduce using rule 131 (return -> RET ( expresion ) .)
    COMP            reduce using rule 131 (return -> RET ( expresion ) .)
    TO              reduce using rule 131 (return -> RET ( expresion ) .)
    )               reduce using rule 131 (return -> RET ( expresion ) .)
    ]               reduce using rule 131 (return -> RET ( expresion ) .)
    ,               reduce using rule 131 (return -> RET ( expresion ) .)
    {               reduce using rule 131 (return -> RET ( expresion ) .)


state 210

    (71) asignacion -> var = f_oper expresion ; .

    }               reduce using rule 71 (asignacion -> var = f_oper expresion ; .)
    CALL            reduce using rule 71 (asignacion -> var = f_oper expresion ; .)
    WHILE           reduce using rule 71 (asignacion -> var = f_oper expresion ; .)
    FOR             reduce using rule 71 (asignacion -> var = f_oper expresion ; .)
    IF              reduce using rule 71 (asignacion -> var = f_oper expresion ; .)
    ID              reduce using rule 71 (asignacion -> var = f_oper expresion ; .)


state 211

    (112) while -> WHILE f_while ( expresion f_exprwhile . ) DO { estatutos } f_endwhile

    )               shift and go to state 228


state 212

    (116) for -> FOR expresion f_for_start TO expresion . f_for_to { estatutos } f_for_end
    (86) expresion -> expresion . COMP f_oper exp f_expres
    (118) f_for_to -> .

    COMP            shift and go to state 150
    {               reduce using rule 118 (f_for_to -> .)

    f_for_to                       shift and go to state 229

state 213

    (86) expresion -> expresion COMP f_oper exp . f_expres
    (91) exp -> exp . OPTERM f_oper term f_exp
    (89) f_expres -> .

    OPTERM          shift and go to state 151
    COMP            reduce using rule 89 (f_expres -> .)
    TO              reduce using rule 89 (f_expres -> .)
    )               reduce using rule 89 (f_expres -> .)
    ;               reduce using rule 89 (f_expres -> .)
    ]               reduce using rule 89 (f_expres -> .)
    ,               reduce using rule 89 (f_expres -> .)
    {               reduce using rule 89 (f_expres -> .)

    f_expres                       shift and go to state 230

state 214

    (91) exp -> exp OPTERM f_oper term . f_exp
    (94) term -> term . OPFACT f_oper fact f_term
    (92) f_exp -> .

    OPFACT          shift and go to state 153
    OPTERM          reduce using rule 92 (f_exp -> .)
    COMP            reduce using rule 92 (f_exp -> .)
    TO              reduce using rule 92 (f_exp -> .)
    )               reduce using rule 92 (f_exp -> .)
    ;               reduce using rule 92 (f_exp -> .)
    ]               reduce using rule 92 (f_exp -> .)
    ,               reduce using rule 92 (f_exp -> .)
    {               reduce using rule 92 (f_exp -> .)

    f_exp                          shift and go to state 231

state 215

    (94) term -> term OPFACT f_oper fact . f_term
    (95) f_term -> .

    OPFACT          reduce using rule 95 (f_term -> .)
    OPTERM          reduce using rule 95 (f_term -> .)
    COMP            reduce using rule 95 (f_term -> .)
    TO              reduce using rule 95 (f_term -> .)
    )               reduce using rule 95 (f_term -> .)
    ;               reduce using rule 95 (f_term -> .)
    ]               reduce using rule 95 (f_term -> .)
    ,               reduce using rule 95 (f_term -> .)
    {               reduce using rule 95 (f_term -> .)

    f_term                         shift and go to state 232

state 216

    (97) fact -> ( lparen expresion ) . rparen
    (104) rparen -> .

    OPFACT          reduce using rule 104 (rparen -> .)
    OPTERM          reduce using rule 104 (rparen -> .)
    COMP            reduce using rule 104 (rparen -> .)
    TO              reduce using rule 104 (rparen -> .)
    )               reduce using rule 104 (rparen -> .)
    ;               reduce using rule 104 (rparen -> .)
    ]               reduce using rule 104 (rparen -> .)
    ,               reduce using rule 104 (rparen -> .)
    {               reduce using rule 104 (rparen -> .)

    rparen                         shift and go to state 233

state 217

    (106) condicion -> IF ( expresion ) f_if . THEN { estatutos } condicionp f_endif

    THEN            shift and go to state 234


state 218

    (16) funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars . estatutos } f_endfunc
    (22) vars -> vars . DEF tipo dimension : lista_id ;
    (23) vars -> vars . DEF ID f_varsobj : lista_id_obj ;
    (48) estatutos -> . estatutos estatuto
    (49) estatutos -> . empty
    (132) empty -> .

    DEF             shift and go to state 14
    }               reduce using rule 132 (empty -> .)
    CALL            reduce using rule 132 (empty -> .)
    WHILE           reduce using rule 132 (empty -> .)
    FOR             reduce using rule 132 (empty -> .)
    IF              reduce using rule 132 (empty -> .)
    ID              reduce using rule 132 (empty -> .)

    estatutos                      shift and go to state 235
    empty                          shift and go to state 67

state 219

    (17) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { . vars estatutos } f_endfunc
    (22) vars -> . vars DEF tipo dimension : lista_id ;
    (23) vars -> . vars DEF ID f_varsobj : lista_id_obj ;
    (24) vars -> . empty
    (132) empty -> .

    DEF             reduce using rule 132 (empty -> .)
    }               reduce using rule 132 (empty -> .)
    CALL            reduce using rule 132 (empty -> .)
    WHILE           reduce using rule 132 (empty -> .)
    FOR             reduce using rule 132 (empty -> .)
    IF              reduce using rule 132 (empty -> .)
    ID              reduce using rule 132 (empty -> .)

    vars                           shift and go to state 236
    empty                          shift and go to state 11

state 220

    (72) var -> ID f_varobj : ID f_verify_type_composite indexacion .

    =               reduce using rule 72 (var -> ID f_varobj : ID f_verify_type_composite indexacion .)
    OPFACT          reduce using rule 72 (var -> ID f_varobj : ID f_verify_type_composite indexacion .)
    OPTERM          reduce using rule 72 (var -> ID f_varobj : ID f_verify_type_composite indexacion .)
    COMP            reduce using rule 72 (var -> ID f_varobj : ID f_verify_type_composite indexacion .)
    TO              reduce using rule 72 (var -> ID f_varobj : ID f_verify_type_composite indexacion .)
    )               reduce using rule 72 (var -> ID f_varobj : ID f_verify_type_composite indexacion .)
    &               reduce using rule 72 (var -> ID f_varobj : ID f_verify_type_composite indexacion .)
    ;               reduce using rule 72 (var -> ID f_varobj : ID f_verify_type_composite indexacion .)
    ]               reduce using rule 72 (var -> ID f_varobj : ID f_verify_type_composite indexacion .)
    ,               reduce using rule 72 (var -> ID f_varobj : ID f_verify_type_composite indexacion .)
    {               reduce using rule 72 (var -> ID f_varobj : ID f_verify_type_composite indexacion .)


state 221

    (74) indexacion -> f_start_array [ expresion f_index . ] f_end_array
    (75) indexacion -> f_start_array [ expresion f_index . ] [ f_next_index expresion f_index ] f_end_array

    ]               shift and go to state 237


state 222

    (61) func -> ID f_verify_func ( args ) .

    ;               reduce using rule 61 (func -> ID f_verify_func ( args ) .)
    OPFACT          reduce using rule 61 (func -> ID f_verify_func ( args ) .)
    OPTERM          reduce using rule 61 (func -> ID f_verify_func ( args ) .)
    COMP            reduce using rule 61 (func -> ID f_verify_func ( args ) .)
    TO              reduce using rule 61 (func -> ID f_verify_func ( args ) .)
    )               reduce using rule 61 (func -> ID f_verify_func ( args ) .)
    ]               reduce using rule 61 (func -> ID f_verify_func ( args ) .)
    ,               reduce using rule 61 (func -> ID f_verify_func ( args ) .)
    {               reduce using rule 61 (func -> ID f_verify_func ( args ) .)


state 223

    (65) args -> args_list f_end_args .

    )               reduce using rule 65 (args -> args_list f_end_args .)


state 224

    (68) args_list -> args_list , . expresion f_arg
    (85) expresion -> . exp
    (86) expresion -> . expresion COMP f_oper exp f_expres
    (87) expresion -> . STR f_string_expr
    (90) exp -> . term
    (91) exp -> . exp OPTERM f_oper term f_exp
    (93) term -> . fact
    (94) term -> . term OPFACT f_oper fact f_term
    (97) fact -> . ( lparen expresion ) rparen
    (98) fact -> . var
    (99) fact -> . NUM f_fact
    (100) fact -> . OPTERM NUM
    (101) fact -> . CALL call_func f_return_val
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion
    (73) var -> . ID f_verify_type indexacion

    STR             shift and go to state 119
    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    expresion                      shift and go to state 238
    exp                            shift and go to state 118
    term                           shift and go to state 120
    fact                           shift and go to state 122
    var                            shift and go to state 124

state 225

    (67) args_list -> expresion f_arg .

    ,               reduce using rule 67 (args_list -> expresion f_arg .)
    )               reduce using rule 67 (args_list -> expresion f_arg .)


state 226

    (62) func -> ID f_varobj : ID f_verify_func_composite . ( args )

    (               shift and go to state 239


state 227

    (125) write_list -> write_list & write_listp .

    )               reduce using rule 125 (write_list -> write_list & write_listp .)
    &               reduce using rule 125 (write_list -> write_list & write_listp .)


state 228

    (112) while -> WHILE f_while ( expresion f_exprwhile ) . DO { estatutos } f_endwhile

    DO              shift and go to state 240


state 229

    (116) for -> FOR expresion f_for_start TO expresion f_for_to . { estatutos } f_for_end

    {               shift and go to state 241


state 230

    (86) expresion -> expresion COMP f_oper exp f_expres .

    COMP            reduce using rule 86 (expresion -> expresion COMP f_oper exp f_expres .)
    TO              reduce using rule 86 (expresion -> expresion COMP f_oper exp f_expres .)
    )               reduce using rule 86 (expresion -> expresion COMP f_oper exp f_expres .)
    ;               reduce using rule 86 (expresion -> expresion COMP f_oper exp f_expres .)
    ]               reduce using rule 86 (expresion -> expresion COMP f_oper exp f_expres .)
    ,               reduce using rule 86 (expresion -> expresion COMP f_oper exp f_expres .)
    {               reduce using rule 86 (expresion -> expresion COMP f_oper exp f_expres .)


state 231

    (91) exp -> exp OPTERM f_oper term f_exp .

    OPTERM          reduce using rule 91 (exp -> exp OPTERM f_oper term f_exp .)
    COMP            reduce using rule 91 (exp -> exp OPTERM f_oper term f_exp .)
    TO              reduce using rule 91 (exp -> exp OPTERM f_oper term f_exp .)
    )               reduce using rule 91 (exp -> exp OPTERM f_oper term f_exp .)
    ;               reduce using rule 91 (exp -> exp OPTERM f_oper term f_exp .)
    ]               reduce using rule 91 (exp -> exp OPTERM f_oper term f_exp .)
    ,               reduce using rule 91 (exp -> exp OPTERM f_oper term f_exp .)
    {               reduce using rule 91 (exp -> exp OPTERM f_oper term f_exp .)


state 232

    (94) term -> term OPFACT f_oper fact f_term .

    OPFACT          reduce using rule 94 (term -> term OPFACT f_oper fact f_term .)
    OPTERM          reduce using rule 94 (term -> term OPFACT f_oper fact f_term .)
    COMP            reduce using rule 94 (term -> term OPFACT f_oper fact f_term .)
    TO              reduce using rule 94 (term -> term OPFACT f_oper fact f_term .)
    )               reduce using rule 94 (term -> term OPFACT f_oper fact f_term .)
    ;               reduce using rule 94 (term -> term OPFACT f_oper fact f_term .)
    ]               reduce using rule 94 (term -> term OPFACT f_oper fact f_term .)
    ,               reduce using rule 94 (term -> term OPFACT f_oper fact f_term .)
    {               reduce using rule 94 (term -> term OPFACT f_oper fact f_term .)


state 233

    (97) fact -> ( lparen expresion ) rparen .

    OPFACT          reduce using rule 97 (fact -> ( lparen expresion ) rparen .)
    OPTERM          reduce using rule 97 (fact -> ( lparen expresion ) rparen .)
    COMP            reduce using rule 97 (fact -> ( lparen expresion ) rparen .)
    TO              reduce using rule 97 (fact -> ( lparen expresion ) rparen .)
    )               reduce using rule 97 (fact -> ( lparen expresion ) rparen .)
    ;               reduce using rule 97 (fact -> ( lparen expresion ) rparen .)
    ]               reduce using rule 97 (fact -> ( lparen expresion ) rparen .)
    ,               reduce using rule 97 (fact -> ( lparen expresion ) rparen .)
    {               reduce using rule 97 (fact -> ( lparen expresion ) rparen .)


state 234

    (106) condicion -> IF ( expresion ) f_if THEN . { estatutos } condicionp f_endif

    {               shift and go to state 242


state 235

    (16) funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos . } f_endfunc
    (48) estatutos -> estatutos . estatuto
    (50) estatuto -> . asignacion
    (51) estatuto -> . while
    (52) estatuto -> . for
    (53) estatuto -> . condicion
    (54) estatuto -> . CALL call_func ;
    (71) asignacion -> . var = f_oper expresion ;
    (112) while -> . WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (116) for -> . FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (106) condicion -> . IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion
    (73) var -> . ID f_verify_type indexacion

    }               shift and go to state 243
    CALL            shift and go to state 85
    WHILE           shift and go to state 87
    FOR             shift and go to state 88
    IF              shift and go to state 89
    ID              shift and go to state 78

    estatuto                       shift and go to state 80
    asignacion                     shift and go to state 81
    while                          shift and go to state 82
    for                            shift and go to state 83
    condicion                      shift and go to state 84
    var                            shift and go to state 86

state 236

    (17) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars . estatutos } f_endfunc
    (22) vars -> vars . DEF tipo dimension : lista_id ;
    (23) vars -> vars . DEF ID f_varsobj : lista_id_obj ;
    (48) estatutos -> . estatutos estatuto
    (49) estatutos -> . empty
    (132) empty -> .

    DEF             shift and go to state 14
    }               reduce using rule 132 (empty -> .)
    CALL            reduce using rule 132 (empty -> .)
    WHILE           reduce using rule 132 (empty -> .)
    FOR             reduce using rule 132 (empty -> .)
    IF              reduce using rule 132 (empty -> .)
    ID              reduce using rule 132 (empty -> .)

    estatutos                      shift and go to state 244
    empty                          shift and go to state 67

state 237

    (74) indexacion -> f_start_array [ expresion f_index ] . f_end_array
    (75) indexacion -> f_start_array [ expresion f_index ] . [ f_next_index expresion f_index ] f_end_array
    (84) f_end_array -> .

    [               shift and go to state 245
    =               reduce using rule 84 (f_end_array -> .)
    OPFACT          reduce using rule 84 (f_end_array -> .)
    OPTERM          reduce using rule 84 (f_end_array -> .)
    COMP            reduce using rule 84 (f_end_array -> .)
    TO              reduce using rule 84 (f_end_array -> .)
    )               reduce using rule 84 (f_end_array -> .)
    &               reduce using rule 84 (f_end_array -> .)
    ;               reduce using rule 84 (f_end_array -> .)
    ]               reduce using rule 84 (f_end_array -> .)
    ,               reduce using rule 84 (f_end_array -> .)
    {               reduce using rule 84 (f_end_array -> .)

    f_end_array                    shift and go to state 246

state 238

    (68) args_list -> args_list , expresion . f_arg
    (86) expresion -> expresion . COMP f_oper exp f_expres
    (69) f_arg -> .

    COMP            shift and go to state 150
    ,               reduce using rule 69 (f_arg -> .)
    )               reduce using rule 69 (f_arg -> .)

    f_arg                          shift and go to state 247

state 239

    (62) func -> ID f_varobj : ID f_verify_func_composite ( . args )
    (65) args -> . args_list f_end_args
    (66) args -> . f_end_args
    (67) args_list -> . expresion f_arg
    (68) args_list -> . args_list , expresion f_arg
    (70) f_end_args -> .
    (85) expresion -> . exp
    (86) expresion -> . expresion COMP f_oper exp f_expres
    (87) expresion -> . STR f_string_expr
    (90) exp -> . term
    (91) exp -> . exp OPTERM f_oper term f_exp
    (93) term -> . fact
    (94) term -> . term OPFACT f_oper fact f_term
    (97) fact -> . ( lparen expresion ) rparen
    (98) fact -> . var
    (99) fact -> . NUM f_fact
    (100) fact -> . OPTERM NUM
    (101) fact -> . CALL call_func f_return_val
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion
    (73) var -> . ID f_verify_type indexacion

    )               reduce using rule 70 (f_end_args -> .)
    STR             shift and go to state 119
    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    args                           shift and go to state 248
    args_list                      shift and go to state 197
    f_end_args                     shift and go to state 198
    expresion                      shift and go to state 199
    exp                            shift and go to state 118
    term                           shift and go to state 120
    fact                           shift and go to state 122
    var                            shift and go to state 124

state 240

    (112) while -> WHILE f_while ( expresion f_exprwhile ) DO . { estatutos } f_endwhile

    {               shift and go to state 249


state 241

    (116) for -> FOR expresion f_for_start TO expresion f_for_to { . estatutos } f_for_end
    (48) estatutos -> . estatutos estatuto
    (49) estatutos -> . empty
    (132) empty -> .

    }               reduce using rule 132 (empty -> .)
    CALL            reduce using rule 132 (empty -> .)
    WHILE           reduce using rule 132 (empty -> .)
    FOR             reduce using rule 132 (empty -> .)
    IF              reduce using rule 132 (empty -> .)
    ID              reduce using rule 132 (empty -> .)

    estatutos                      shift and go to state 250
    empty                          shift and go to state 67

state 242

    (106) condicion -> IF ( expresion ) f_if THEN { . estatutos } condicionp f_endif
    (48) estatutos -> . estatutos estatuto
    (49) estatutos -> . empty
    (132) empty -> .

    }               reduce using rule 132 (empty -> .)
    CALL            reduce using rule 132 (empty -> .)
    WHILE           reduce using rule 132 (empty -> .)
    FOR             reduce using rule 132 (empty -> .)
    IF              reduce using rule 132 (empty -> .)
    ID              reduce using rule 132 (empty -> .)

    estatutos                      shift and go to state 251
    empty                          shift and go to state 67

state 243

    (16) funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } . f_endfunc
    (21) f_endfunc -> .

    MAIN            reduce using rule 21 (f_endfunc -> .)
    FUNC            reduce using rule 21 (f_endfunc -> .)
    }               reduce using rule 21 (f_endfunc -> .)

    f_endfunc                      shift and go to state 252

state 244

    (17) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos . } f_endfunc
    (48) estatutos -> estatutos . estatuto
    (50) estatuto -> . asignacion
    (51) estatuto -> . while
    (52) estatuto -> . for
    (53) estatuto -> . condicion
    (54) estatuto -> . CALL call_func ;
    (71) asignacion -> . var = f_oper expresion ;
    (112) while -> . WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (116) for -> . FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (106) condicion -> . IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion
    (73) var -> . ID f_verify_type indexacion

    }               shift and go to state 253
    CALL            shift and go to state 85
    WHILE           shift and go to state 87
    FOR             shift and go to state 88
    IF              shift and go to state 89
    ID              shift and go to state 78

    estatuto                       shift and go to state 80
    asignacion                     shift and go to state 81
    while                          shift and go to state 82
    for                            shift and go to state 83
    condicion                      shift and go to state 84
    var                            shift and go to state 86

state 245

    (75) indexacion -> f_start_array [ expresion f_index ] [ . f_next_index expresion f_index ] f_end_array
    (83) f_next_index -> .

    STR             reduce using rule 83 (f_next_index -> .)
    (               reduce using rule 83 (f_next_index -> .)
    NUM             reduce using rule 83 (f_next_index -> .)
    OPTERM          reduce using rule 83 (f_next_index -> .)
    CALL            reduce using rule 83 (f_next_index -> .)
    ID              reduce using rule 83 (f_next_index -> .)

    f_next_index                   shift and go to state 254

state 246

    (74) indexacion -> f_start_array [ expresion f_index ] f_end_array .

    =               reduce using rule 74 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)
    OPFACT          reduce using rule 74 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)
    OPTERM          reduce using rule 74 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)
    COMP            reduce using rule 74 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)
    TO              reduce using rule 74 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)
    )               reduce using rule 74 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)
    &               reduce using rule 74 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)
    ;               reduce using rule 74 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)
    ]               reduce using rule 74 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)
    ,               reduce using rule 74 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)
    {               reduce using rule 74 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)


state 247

    (68) args_list -> args_list , expresion f_arg .

    ,               reduce using rule 68 (args_list -> args_list , expresion f_arg .)
    )               reduce using rule 68 (args_list -> args_list , expresion f_arg .)


state 248

    (62) func -> ID f_varobj : ID f_verify_func_composite ( args . )

    )               shift and go to state 255


state 249

    (112) while -> WHILE f_while ( expresion f_exprwhile ) DO { . estatutos } f_endwhile
    (48) estatutos -> . estatutos estatuto
    (49) estatutos -> . empty
    (132) empty -> .

    }               reduce using rule 132 (empty -> .)
    CALL            reduce using rule 132 (empty -> .)
    WHILE           reduce using rule 132 (empty -> .)
    FOR             reduce using rule 132 (empty -> .)
    IF              reduce using rule 132 (empty -> .)
    ID              reduce using rule 132 (empty -> .)

    estatutos                      shift and go to state 256
    empty                          shift and go to state 67

state 250

    (116) for -> FOR expresion f_for_start TO expresion f_for_to { estatutos . } f_for_end
    (48) estatutos -> estatutos . estatuto
    (50) estatuto -> . asignacion
    (51) estatuto -> . while
    (52) estatuto -> . for
    (53) estatuto -> . condicion
    (54) estatuto -> . CALL call_func ;
    (71) asignacion -> . var = f_oper expresion ;
    (112) while -> . WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (116) for -> . FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (106) condicion -> . IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion
    (73) var -> . ID f_verify_type indexacion

    }               shift and go to state 257
    CALL            shift and go to state 85
    WHILE           shift and go to state 87
    FOR             shift and go to state 88
    IF              shift and go to state 89
    ID              shift and go to state 78

    estatuto                       shift and go to state 80
    asignacion                     shift and go to state 81
    while                          shift and go to state 82
    for                            shift and go to state 83
    condicion                      shift and go to state 84
    var                            shift and go to state 86

state 251

    (106) condicion -> IF ( expresion ) f_if THEN { estatutos . } condicionp f_endif
    (48) estatutos -> estatutos . estatuto
    (50) estatuto -> . asignacion
    (51) estatuto -> . while
    (52) estatuto -> . for
    (53) estatuto -> . condicion
    (54) estatuto -> . CALL call_func ;
    (71) asignacion -> . var = f_oper expresion ;
    (112) while -> . WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (116) for -> . FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (106) condicion -> . IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion
    (73) var -> . ID f_verify_type indexacion

    }               shift and go to state 258
    CALL            shift and go to state 85
    WHILE           shift and go to state 87
    FOR             shift and go to state 88
    IF              shift and go to state 89
    ID              shift and go to state 78

    estatuto                       shift and go to state 80
    asignacion                     shift and go to state 81
    while                          shift and go to state 82
    for                            shift and go to state 83
    condicion                      shift and go to state 84
    var                            shift and go to state 86

state 252

    (16) funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc .

    MAIN            reduce using rule 16 (funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc .)
    FUNC            reduce using rule 16 (funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc .)
    }               reduce using rule 16 (funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc .)


state 253

    (17) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } . f_endfunc
    (21) f_endfunc -> .

    MAIN            reduce using rule 21 (f_endfunc -> .)
    FUNC            reduce using rule 21 (f_endfunc -> .)
    }               reduce using rule 21 (f_endfunc -> .)

    f_endfunc                      shift and go to state 259

state 254

    (75) indexacion -> f_start_array [ expresion f_index ] [ f_next_index . expresion f_index ] f_end_array
    (85) expresion -> . exp
    (86) expresion -> . expresion COMP f_oper exp f_expres
    (87) expresion -> . STR f_string_expr
    (90) exp -> . term
    (91) exp -> . exp OPTERM f_oper term f_exp
    (93) term -> . fact
    (94) term -> . term OPFACT f_oper fact f_term
    (97) fact -> . ( lparen expresion ) rparen
    (98) fact -> . var
    (99) fact -> . NUM f_fact
    (100) fact -> . OPTERM NUM
    (101) fact -> . CALL call_func f_return_val
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion
    (73) var -> . ID f_verify_type indexacion

    STR             shift and go to state 119
    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    expresion                      shift and go to state 260
    exp                            shift and go to state 118
    term                           shift and go to state 120
    fact                           shift and go to state 122
    var                            shift and go to state 124

state 255

    (62) func -> ID f_varobj : ID f_verify_func_composite ( args ) .

    ;               reduce using rule 62 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    OPFACT          reduce using rule 62 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    OPTERM          reduce using rule 62 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    COMP            reduce using rule 62 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    TO              reduce using rule 62 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    )               reduce using rule 62 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    ]               reduce using rule 62 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    ,               reduce using rule 62 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    {               reduce using rule 62 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)


state 256

    (112) while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos . } f_endwhile
    (48) estatutos -> estatutos . estatuto
    (50) estatuto -> . asignacion
    (51) estatuto -> . while
    (52) estatuto -> . for
    (53) estatuto -> . condicion
    (54) estatuto -> . CALL call_func ;
    (71) asignacion -> . var = f_oper expresion ;
    (112) while -> . WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (116) for -> . FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (106) condicion -> . IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion
    (73) var -> . ID f_verify_type indexacion

    }               shift and go to state 261
    CALL            shift and go to state 85
    WHILE           shift and go to state 87
    FOR             shift and go to state 88
    IF              shift and go to state 89
    ID              shift and go to state 78

    estatuto                       shift and go to state 80
    asignacion                     shift and go to state 81
    while                          shift and go to state 82
    for                            shift and go to state 83
    condicion                      shift and go to state 84
    var                            shift and go to state 86

state 257

    (116) for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } . f_for_end
    (119) f_for_end -> .

    }               reduce using rule 119 (f_for_end -> .)
    CALL            reduce using rule 119 (f_for_end -> .)
    WHILE           reduce using rule 119 (f_for_end -> .)
    FOR             reduce using rule 119 (f_for_end -> .)
    IF              reduce using rule 119 (f_for_end -> .)
    ID              reduce using rule 119 (f_for_end -> .)

    f_for_end                      shift and go to state 262

state 258

    (106) condicion -> IF ( expresion ) f_if THEN { estatutos } . condicionp f_endif
    (107) condicionp -> . ELSE f_else { estatutos }
    (108) condicionp -> . empty
    (132) empty -> .

    ELSE            shift and go to state 264
    }               reduce using rule 132 (empty -> .)
    CALL            reduce using rule 132 (empty -> .)
    WHILE           reduce using rule 132 (empty -> .)
    FOR             reduce using rule 132 (empty -> .)
    IF              reduce using rule 132 (empty -> .)
    ID              reduce using rule 132 (empty -> .)

    condicionp                     shift and go to state 263
    empty                          shift and go to state 265

state 259

    (17) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc .

    MAIN            reduce using rule 17 (funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc .)
    FUNC            reduce using rule 17 (funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc .)
    }               reduce using rule 17 (funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc .)


state 260

    (75) indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion . f_index ] f_end_array
    (86) expresion -> expresion . COMP f_oper exp f_expres
    (82) f_index -> .

    COMP            shift and go to state 150
    ]               reduce using rule 82 (f_index -> .)

    f_index                        shift and go to state 266

state 261

    (112) while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } . f_endwhile
    (115) f_endwhile -> .

    }               reduce using rule 115 (f_endwhile -> .)
    CALL            reduce using rule 115 (f_endwhile -> .)
    WHILE           reduce using rule 115 (f_endwhile -> .)
    FOR             reduce using rule 115 (f_endwhile -> .)
    IF              reduce using rule 115 (f_endwhile -> .)
    ID              reduce using rule 115 (f_endwhile -> .)

    f_endwhile                     shift and go to state 267

state 262

    (116) for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end .

    }               reduce using rule 116 (for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end .)
    CALL            reduce using rule 116 (for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end .)
    WHILE           reduce using rule 116 (for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end .)
    FOR             reduce using rule 116 (for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end .)
    IF              reduce using rule 116 (for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end .)
    ID              reduce using rule 116 (for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end .)


state 263

    (106) condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp . f_endif
    (110) f_endif -> .

    }               reduce using rule 110 (f_endif -> .)
    CALL            reduce using rule 110 (f_endif -> .)
    WHILE           reduce using rule 110 (f_endif -> .)
    FOR             reduce using rule 110 (f_endif -> .)
    IF              reduce using rule 110 (f_endif -> .)
    ID              reduce using rule 110 (f_endif -> .)

    f_endif                        shift and go to state 268

state 264

    (107) condicionp -> ELSE . f_else { estatutos }
    (111) f_else -> .

    {               reduce using rule 111 (f_else -> .)

    f_else                         shift and go to state 269

state 265

    (108) condicionp -> empty .

    }               reduce using rule 108 (condicionp -> empty .)
    CALL            reduce using rule 108 (condicionp -> empty .)
    WHILE           reduce using rule 108 (condicionp -> empty .)
    FOR             reduce using rule 108 (condicionp -> empty .)
    IF              reduce using rule 108 (condicionp -> empty .)
    ID              reduce using rule 108 (condicionp -> empty .)


state 266

    (75) indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index . ] f_end_array

    ]               shift and go to state 270


state 267

    (112) while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile .

    }               reduce using rule 112 (while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile .)
    CALL            reduce using rule 112 (while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile .)
    WHILE           reduce using rule 112 (while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile .)
    FOR             reduce using rule 112 (while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile .)
    IF              reduce using rule 112 (while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile .)
    ID              reduce using rule 112 (while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile .)


state 268

    (106) condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif .

    }               reduce using rule 106 (condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif .)
    CALL            reduce using rule 106 (condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif .)
    WHILE           reduce using rule 106 (condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif .)
    FOR             reduce using rule 106 (condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif .)
    IF              reduce using rule 106 (condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif .)
    ID              reduce using rule 106 (condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif .)


state 269

    (107) condicionp -> ELSE f_else . { estatutos }

    {               shift and go to state 271


state 270

    (75) indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] . f_end_array
    (84) f_end_array -> .

    =               reduce using rule 84 (f_end_array -> .)
    OPFACT          reduce using rule 84 (f_end_array -> .)
    OPTERM          reduce using rule 84 (f_end_array -> .)
    COMP            reduce using rule 84 (f_end_array -> .)
    TO              reduce using rule 84 (f_end_array -> .)
    )               reduce using rule 84 (f_end_array -> .)
    &               reduce using rule 84 (f_end_array -> .)
    ;               reduce using rule 84 (f_end_array -> .)
    ]               reduce using rule 84 (f_end_array -> .)
    ,               reduce using rule 84 (f_end_array -> .)
    {               reduce using rule 84 (f_end_array -> .)

    f_end_array                    shift and go to state 272

state 271

    (107) condicionp -> ELSE f_else { . estatutos }
    (48) estatutos -> . estatutos estatuto
    (49) estatutos -> . empty
    (132) empty -> .

    }               reduce using rule 132 (empty -> .)
    CALL            reduce using rule 132 (empty -> .)
    WHILE           reduce using rule 132 (empty -> .)
    FOR             reduce using rule 132 (empty -> .)
    IF              reduce using rule 132 (empty -> .)
    ID              reduce using rule 132 (empty -> .)

    estatutos                      shift and go to state 273
    empty                          shift and go to state 67

state 272

    (75) indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .

    =               reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    OPFACT          reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    OPTERM          reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    COMP            reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    TO              reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    )               reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    &               reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    ;               reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    ]               reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    ,               reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    {               reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)


state 273

    (107) condicionp -> ELSE f_else { estatutos . }
    (48) estatutos -> estatutos . estatuto
    (50) estatuto -> . asignacion
    (51) estatuto -> . while
    (52) estatuto -> . for
    (53) estatuto -> . condicion
    (54) estatuto -> . CALL call_func ;
    (71) asignacion -> . var = f_oper expresion ;
    (112) while -> . WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (116) for -> . FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (106) condicion -> . IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion
    (73) var -> . ID f_verify_type indexacion

    }               shift and go to state 274
    CALL            shift and go to state 85
    WHILE           shift and go to state 87
    FOR             shift and go to state 88
    IF              shift and go to state 89
    ID              shift and go to state 78

    estatuto                       shift and go to state 80
    asignacion                     shift and go to state 81
    while                          shift and go to state 82
    for                            shift and go to state 83
    condicion                      shift and go to state 84
    var                            shift and go to state 86

state 274

    (107) condicionp -> ELSE f_else { estatutos } .

    }               reduce using rule 107 (condicionp -> ELSE f_else { estatutos } .)
    CALL            reduce using rule 107 (condicionp -> ELSE f_else { estatutos } .)
    WHILE           reduce using rule 107 (condicionp -> ELSE f_else { estatutos } .)
    FOR             reduce using rule 107 (condicionp -> ELSE f_else { estatutos } .)
    IF              reduce using rule 107 (condicionp -> ELSE f_else { estatutos } .)
    ID              reduce using rule 107 (condicionp -> ELSE f_else { estatutos } .)

