Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ;
Rule 2     f_start -> <empty>
Rule 3     f_prog -> <empty>
Rule 4     f_main -> <empty>
Rule 5     f_end -> <empty>
Rule 6     clases -> clases clase
Rule 7     clases -> empty
Rule 8     clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass
Rule 9     clase -> TYPE ID f_startclass { cvars f_cvars funciones } f_endclass
Rule 10    f_startclass -> <empty>
Rule 11    f_clasepadre -> <empty>
Rule 12    cvars -> cvars DEF tipo dimension : lista_id ;
Rule 13    cvars -> empty
Rule 14    f_cvars -> <empty>
Rule 15    f_endclass -> <empty>
Rule 16    funciones -> funciones funcion
Rule 17    funciones -> empty
Rule 18    funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { cvars estatutos } f_endfunc
Rule 19    funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { cvars estatutos } f_endfunc
Rule 20    f_startfunc -> <empty>
Rule 21    f_nothing -> <empty>
Rule 22    f_tipofunc -> <empty>
Rule 23    f_endfunc -> <empty>
Rule 24    vars -> vars DEF tipo dimension : lista_id ;
Rule 25    vars -> vars DEF ID f_varsobj : lista_id_obj ;
Rule 26    vars -> empty
Rule 27    f_varsobj -> <empty>
Rule 28    lista_id -> ID f_vars
Rule 29    lista_id -> lista_id , ID f_vars
Rule 30    f_vars -> <empty>
Rule 31    lista_id_obj -> ID f_vars_obj
Rule 32    lista_id_obj -> lista_id_obj , ID f_vars_obj
Rule 33    f_vars_obj -> <empty>
Rule 34    dimension -> [ NUM f_dim1 ] f_enddim
Rule 35    dimension -> [ NUM f_dim1 ] [ NUM f_dim2 ] f_enddim
Rule 36    dimension -> empty
Rule 37    f_dim1 -> <empty>
Rule 38    f_dim2 -> <empty>
Rule 39    f_enddim -> <empty>
Rule 40    tipo -> NUMBER
Rule 41    tipo -> STRING
Rule 42    params -> pparams
Rule 43    params -> empty
Rule 44    pparams -> tipo ID f_param
Rule 45    pparams -> pparams , tipo ID f_param
Rule 46    f_param -> <empty>
Rule 47    estatutos -> estatutos estatuto
Rule 48    estatutos -> empty
Rule 49    estatuto -> asignacion
Rule 50    estatuto -> while
Rule 51    estatuto -> for
Rule 52    estatuto -> condicion
Rule 53    estatuto -> CALL call_func ;
Rule 54    call_func -> func f_gosub f_end_call f_end_check
Rule 55    call_func -> input
Rule 56    call_func -> write
Rule 57    call_func -> return
Rule 58    f_end_call -> <empty>
Rule 59    f_gosub -> <empty>
Rule 60    func -> ID f_verify_func ( args )
Rule 61    func -> ID f_varobj : ID f_verify_func_composite ( args )
Rule 62    f_verify_func -> <empty>
Rule 63    f_varobj -> <empty>
Rule 64    f_verify_func_composite -> <empty>
Rule 65    args -> args_list f_end_args
Rule 66    args -> f_end_args
Rule 67    args_list -> expresion f_arg
Rule 68    args_list -> args_list , expresion f_arg
Rule 69    f_arg -> <empty>
Rule 70    f_end_args -> <empty>
Rule 71    asignacion -> var = f_oper expresion ;
Rule 72    var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check
Rule 73    var -> ID f_verify_type indexacion f_end_check
Rule 74    f_verify_type -> <empty>
Rule 75    f_verify_type_composite -> <empty>
Rule 76    f_end_check -> <empty>
Rule 77    indexacion -> [ f_start_array expresion f_index ] f_end_array
Rule 78    indexacion -> [ f_start_array expresion f_index ] [ f_next_index expresion f_index ] f_end_array
Rule 79    indexacion -> f_no_index empty
Rule 80    f_no_index -> <empty>
Rule 81    f_start_array -> <empty>
Rule 82    f_index -> <empty>
Rule 83    f_next_index -> <empty>
Rule 84    f_end_array -> <empty>
Rule 85    expresion -> exp
Rule 86    expresion -> expresion COMP f_oper exp f_expres
Rule 87    f_expres -> <empty>
Rule 88    exp -> term
Rule 89    exp -> exp OPTERM f_oper term f_exp
Rule 90    f_exp -> <empty>
Rule 91    term -> fact
Rule 92    term -> term OPFACT f_oper fact f_term
Rule 93    f_term -> <empty>
Rule 94    f_oper -> <empty>
Rule 95    fact -> ( f_lparen expresion ) f_rparen
Rule 96    fact -> var
Rule 97    fact -> NUM f_fact
Rule 98    fact -> OPTERM NUM
Rule 99    fact -> CALL func f_gosub f_return_val f_end_call f_end_check
Rule 100   fact -> CALL to_num
Rule 101   fact -> CALL to_str
Rule 102   fact -> STR f_string
Rule 103   fact -> fact & f_oper var f_concat
Rule 104   fact -> fact & f_oper STR f_string f_concat
Rule 105   f_concat -> <empty>
Rule 106   f_lparen -> <empty>
Rule 107   f_rparen -> <empty>
Rule 108   f_fact -> <empty>
Rule 109   f_return_val -> <empty>
Rule 110   condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
Rule 111   condicionp -> ELSE f_else { estatutos }
Rule 112   condicionp -> empty
Rule 113   f_if -> <empty>
Rule 114   f_endif -> <empty>
Rule 115   f_else -> <empty>
Rule 116   while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
Rule 117   f_while -> <empty>
Rule 118   f_exprwhile -> <empty>
Rule 119   f_endwhile -> <empty>
Rule 120   for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
Rule 121   f_for_start -> <empty>
Rule 122   f_for_to -> <empty>
Rule 123   f_for_end -> <empty>
Rule 124   to_num -> TO_NUMBER ( STR f_string )
Rule 125   to_num -> TO_NUMBER ( var )
Rule 126   to_str -> TO_STRING ( expresion )
Rule 127   input -> INPUT ( var )
Rule 128   write -> PRINT ( write_list ) f_call_empty_print
Rule 129   write -> PRINT ( ) f_call_empty_print
Rule 130   f_call_empty_print -> <empty>
Rule 131   write_list -> write_list & write_listp
Rule 132   write_list -> write_listp
Rule 133   write_listp -> STR f_string
Rule 134   write_listp -> var
Rule 135   write_listp -> CALL to_str
Rule 136   f_string -> <empty>
Rule 137   return -> RET ( expresion )
Rule 138   empty -> <empty>

Terminals, with rules where they appear

&                    : 103 104 131
(                    : 1 18 19 60 61 95 110 116 124 125 126 127 128 129 137
)                    : 1 18 19 60 61 95 110 116 124 125 126 127 128 129 137
,                    : 29 32 45 68
:                    : 8 12 18 19 24 25 61 72
;                    : 1 1 12 24 25 53 71
=                    : 71
CALL                 : 53 99 100 101 135
COMP                 : 86
DEF                  : 12 24 25
DO                   : 116
ELSE                 : 111
END                  : 1
FOR                  : 120
FUNC                 : 18 19
ID                   : 1 8 8 9 18 19 25 28 29 31 32 44 45 60 61 61 72 72 73
IF                   : 110
INPUT                : 127
MAIN                 : 1
NOTHING              : 19
NUM                  : 34 35 35 97 98
NUMBER               : 40
OPFACT               : 92
OPTERM               : 89 98
PRINT                : 128 129
PROGRAM              : 1
RET                  : 137
STR                  : 102 104 124 133
STRING               : 41
THEN                 : 110
TO                   : 120
TO_NUMBER            : 124 125
TO_STRING            : 126
TYPE                 : 8 9
WHILE                : 116
[                    : 34 35 35 77 78 78
]                    : 34 35 35 77 78 78
error                : 
{                    : 1 8 9 18 19 110 111 116 120
}                    : 1 8 9 18 19 110 111 116 120

Nonterminals, with rules where they appear

args                 : 60 61
args_list            : 65 68
asignacion           : 49
call_func            : 53
clase                : 6
clases               : 1 6
condicion            : 52
condicionp           : 110
cvars                : 8 9 12 18 19
dimension            : 12 24
empty                : 7 13 17 26 36 43 48 79 112
estatuto             : 47
estatutos            : 1 18 19 47 110 111 116 120
exp                  : 85 86 89
expresion            : 67 68 71 77 78 78 86 95 110 116 120 120 126 137
f_arg                : 67 68
f_call_empty_print   : 128 129
f_clasepadre         : 8
f_concat             : 103 104
f_cvars              : 8 9
f_dim1               : 34 35
f_dim2               : 35
f_else               : 111
f_end                : 1
f_end_args           : 65 66
f_end_array          : 77 78
f_end_call           : 54 99
f_end_check          : 54 72 73 99
f_endclass           : 8 9
f_enddim             : 34 35
f_endfunc            : 18 19
f_endif              : 110
f_endwhile           : 116
f_exp                : 89
f_expres             : 86
f_exprwhile          : 116
f_fact               : 97
f_for_end            : 120
f_for_start          : 120
f_for_to             : 120
f_gosub              : 54 99
f_if                 : 110
f_index              : 77 78 78
f_lparen             : 95
f_main               : 1
f_next_index         : 78
f_no_index           : 79
f_nothing            : 19
f_oper               : 71 86 89 92 103 104
f_param              : 44 45
f_prog               : 1
f_return_val         : 99
f_rparen             : 95
f_start              : 1
f_start_array        : 77 78
f_startclass         : 8 9
f_startfunc          : 18 19
f_string             : 102 104 124 133
f_term               : 92
f_tipofunc           : 18 19
f_varobj             : 61 72
f_vars               : 28 29
f_vars_obj           : 31 32
f_varsobj            : 25
f_verify_func        : 60
f_verify_func_composite : 61
f_verify_type        : 73
f_verify_type_composite : 72
f_while              : 116
fact                 : 91 92 103 104
for                  : 51
func                 : 54 99
funcion              : 16
funciones            : 1 8 9 16
indexacion           : 72 73
input                : 55
lista_id             : 12 24 29
lista_id_obj         : 25 32
params               : 18 19
pparams              : 42 45
return               : 57
start                : 0
term                 : 88 89 92
tipo                 : 12 18 24 44 45
to_num               : 100
to_str               : 101 135
var                  : 71 96 103 125 127 134
vars                 : 1 24 25
while                : 50
write                : 56
write_list           : 128 131
write_listp          : 131 132

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ;

    PROGRAM         shift and go to state 2

    start                          shift and go to state 1

state 1

    (0) S' -> start .



state 2

    (1) start -> PROGRAM . f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ;
    (2) f_start -> .

    ID              reduce using rule 2 (f_start -> .)

    f_start                        shift and go to state 3

state 3

    (1) start -> PROGRAM f_start . ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ;

    ID              shift and go to state 4


state 4

    (1) start -> PROGRAM f_start ID . f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ;
    (3) f_prog -> .

    ;               reduce using rule 3 (f_prog -> .)

    f_prog                         shift and go to state 5

state 5

    (1) start -> PROGRAM f_start ID f_prog . ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ;

    ;               shift and go to state 6


state 6

    (1) start -> PROGRAM f_start ID f_prog ; . clases vars funciones MAIN f_main ( ) { estatutos } END f_end ;
    (6) clases -> . clases clase
    (7) clases -> . empty
    (138) empty -> .

    TYPE            reduce using rule 138 (empty -> .)
    DEF             reduce using rule 138 (empty -> .)
    MAIN            reduce using rule 138 (empty -> .)
    FUNC            reduce using rule 138 (empty -> .)

    clases                         shift and go to state 7
    empty                          shift and go to state 8

state 7

    (1) start -> PROGRAM f_start ID f_prog ; clases . vars funciones MAIN f_main ( ) { estatutos } END f_end ;
    (6) clases -> clases . clase
    (24) vars -> . vars DEF tipo dimension : lista_id ;
    (25) vars -> . vars DEF ID f_varsobj : lista_id_obj ;
    (26) vars -> . empty
    (8) clase -> . TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass
    (9) clase -> . TYPE ID f_startclass { cvars f_cvars funciones } f_endclass
    (138) empty -> .

    TYPE            shift and go to state 12
    DEF             reduce using rule 138 (empty -> .)
    MAIN            reduce using rule 138 (empty -> .)
    FUNC            reduce using rule 138 (empty -> .)

    vars                           shift and go to state 9
    clase                          shift and go to state 10
    empty                          shift and go to state 11

state 8

    (7) clases -> empty .

    TYPE            reduce using rule 7 (clases -> empty .)
    DEF             reduce using rule 7 (clases -> empty .)
    MAIN            reduce using rule 7 (clases -> empty .)
    FUNC            reduce using rule 7 (clases -> empty .)


state 9

    (1) start -> PROGRAM f_start ID f_prog ; clases vars . funciones MAIN f_main ( ) { estatutos } END f_end ;
    (24) vars -> vars . DEF tipo dimension : lista_id ;
    (25) vars -> vars . DEF ID f_varsobj : lista_id_obj ;
    (16) funciones -> . funciones funcion
    (17) funciones -> . empty
    (138) empty -> .

    DEF             shift and go to state 14
    MAIN            reduce using rule 138 (empty -> .)
    FUNC            reduce using rule 138 (empty -> .)

    funciones                      shift and go to state 13
    empty                          shift and go to state 15

state 10

    (6) clases -> clases clase .

    TYPE            reduce using rule 6 (clases -> clases clase .)
    DEF             reduce using rule 6 (clases -> clases clase .)
    MAIN            reduce using rule 6 (clases -> clases clase .)
    FUNC            reduce using rule 6 (clases -> clases clase .)


state 11

    (26) vars -> empty .

    DEF             reduce using rule 26 (vars -> empty .)
    MAIN            reduce using rule 26 (vars -> empty .)
    FUNC            reduce using rule 26 (vars -> empty .)


state 12

    (8) clase -> TYPE . ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass
    (9) clase -> TYPE . ID f_startclass { cvars f_cvars funciones } f_endclass

    ID              shift and go to state 16


state 13

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones . MAIN f_main ( ) { estatutos } END f_end ;
    (16) funciones -> funciones . funcion
    (18) funcion -> . FUNC ID f_startfunc ( params ) : tipo f_tipofunc { cvars estatutos } f_endfunc
    (19) funcion -> . FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { cvars estatutos } f_endfunc

    MAIN            shift and go to state 17
    FUNC            shift and go to state 19

    funcion                        shift and go to state 18

state 14

    (24) vars -> vars DEF . tipo dimension : lista_id ;
    (25) vars -> vars DEF . ID f_varsobj : lista_id_obj ;
    (40) tipo -> . NUMBER
    (41) tipo -> . STRING

    ID              shift and go to state 21
    NUMBER          shift and go to state 22
    STRING          shift and go to state 23

    tipo                           shift and go to state 20

state 15

    (17) funciones -> empty .

    MAIN            reduce using rule 17 (funciones -> empty .)
    FUNC            reduce using rule 17 (funciones -> empty .)
    }               reduce using rule 17 (funciones -> empty .)


state 16

    (8) clase -> TYPE ID . f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass
    (9) clase -> TYPE ID . f_startclass { cvars f_cvars funciones } f_endclass
    (10) f_startclass -> .

    :               reduce using rule 10 (f_startclass -> .)
    {               reduce using rule 10 (f_startclass -> .)

    f_startclass                   shift and go to state 24

state 17

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN . f_main ( ) { estatutos } END f_end ;
    (4) f_main -> .

    (               reduce using rule 4 (f_main -> .)

    f_main                         shift and go to state 25

state 18

    (16) funciones -> funciones funcion .

    MAIN            reduce using rule 16 (funciones -> funciones funcion .)
    FUNC            reduce using rule 16 (funciones -> funciones funcion .)
    }               reduce using rule 16 (funciones -> funciones funcion .)


state 19

    (18) funcion -> FUNC . ID f_startfunc ( params ) : tipo f_tipofunc { cvars estatutos } f_endfunc
    (19) funcion -> FUNC . ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { cvars estatutos } f_endfunc

    ID              shift and go to state 26


state 20

    (24) vars -> vars DEF tipo . dimension : lista_id ;
    (34) dimension -> . [ NUM f_dim1 ] f_enddim
    (35) dimension -> . [ NUM f_dim1 ] [ NUM f_dim2 ] f_enddim
    (36) dimension -> . empty
    (138) empty -> .

    [               shift and go to state 28
    :               reduce using rule 138 (empty -> .)

    dimension                      shift and go to state 27
    empty                          shift and go to state 29

state 21

    (25) vars -> vars DEF ID . f_varsobj : lista_id_obj ;
    (27) f_varsobj -> .

    :               reduce using rule 27 (f_varsobj -> .)

    f_varsobj                      shift and go to state 30

state 22

    (40) tipo -> NUMBER .

    [               reduce using rule 40 (tipo -> NUMBER .)
    :               reduce using rule 40 (tipo -> NUMBER .)
    ID              reduce using rule 40 (tipo -> NUMBER .)
    {               reduce using rule 40 (tipo -> NUMBER .)


state 23

    (41) tipo -> STRING .

    [               reduce using rule 41 (tipo -> STRING .)
    :               reduce using rule 41 (tipo -> STRING .)
    ID              reduce using rule 41 (tipo -> STRING .)
    {               reduce using rule 41 (tipo -> STRING .)


state 24

    (8) clase -> TYPE ID f_startclass . : ID f_clasepadre { cvars f_cvars funciones } f_endclass
    (9) clase -> TYPE ID f_startclass . { cvars f_cvars funciones } f_endclass

    :               shift and go to state 31
    {               shift and go to state 32


state 25

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main . ( ) { estatutos } END f_end ;

    (               shift and go to state 33


state 26

    (18) funcion -> FUNC ID . f_startfunc ( params ) : tipo f_tipofunc { cvars estatutos } f_endfunc
    (19) funcion -> FUNC ID . f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { cvars estatutos } f_endfunc
    (20) f_startfunc -> .

    (               reduce using rule 20 (f_startfunc -> .)

    f_startfunc                    shift and go to state 34

state 27

    (24) vars -> vars DEF tipo dimension . : lista_id ;

    :               shift and go to state 35


state 28

    (34) dimension -> [ . NUM f_dim1 ] f_enddim
    (35) dimension -> [ . NUM f_dim1 ] [ NUM f_dim2 ] f_enddim

    NUM             shift and go to state 36


state 29

    (36) dimension -> empty .

    :               reduce using rule 36 (dimension -> empty .)


state 30

    (25) vars -> vars DEF ID f_varsobj . : lista_id_obj ;

    :               shift and go to state 37


state 31

    (8) clase -> TYPE ID f_startclass : . ID f_clasepadre { cvars f_cvars funciones } f_endclass

    ID              shift and go to state 38


state 32

    (9) clase -> TYPE ID f_startclass { . cvars f_cvars funciones } f_endclass
    (12) cvars -> . cvars DEF tipo dimension : lista_id ;
    (13) cvars -> . empty
    (138) empty -> .

    DEF             reduce using rule 138 (empty -> .)
    }               reduce using rule 138 (empty -> .)
    FUNC            reduce using rule 138 (empty -> .)

    cvars                          shift and go to state 39
    empty                          shift and go to state 40

state 33

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( . ) { estatutos } END f_end ;

    )               shift and go to state 41


state 34

    (18) funcion -> FUNC ID f_startfunc . ( params ) : tipo f_tipofunc { cvars estatutos } f_endfunc
    (19) funcion -> FUNC ID f_startfunc . ( params ) : NOTHING f_nothing f_tipofunc { cvars estatutos } f_endfunc

    (               shift and go to state 42


state 35

    (24) vars -> vars DEF tipo dimension : . lista_id ;
    (28) lista_id -> . ID f_vars
    (29) lista_id -> . lista_id , ID f_vars

    ID              shift and go to state 44

    lista_id                       shift and go to state 43

state 36

    (34) dimension -> [ NUM . f_dim1 ] f_enddim
    (35) dimension -> [ NUM . f_dim1 ] [ NUM f_dim2 ] f_enddim
    (37) f_dim1 -> .

    ]               reduce using rule 37 (f_dim1 -> .)

    f_dim1                         shift and go to state 45

state 37

    (25) vars -> vars DEF ID f_varsobj : . lista_id_obj ;
    (31) lista_id_obj -> . ID f_vars_obj
    (32) lista_id_obj -> . lista_id_obj , ID f_vars_obj

    ID              shift and go to state 46

    lista_id_obj                   shift and go to state 47

state 38

    (8) clase -> TYPE ID f_startclass : ID . f_clasepadre { cvars f_cvars funciones } f_endclass
    (11) f_clasepadre -> .

    {               reduce using rule 11 (f_clasepadre -> .)

    f_clasepadre                   shift and go to state 48

state 39

    (9) clase -> TYPE ID f_startclass { cvars . f_cvars funciones } f_endclass
    (12) cvars -> cvars . DEF tipo dimension : lista_id ;
    (14) f_cvars -> .

    DEF             shift and go to state 50
    }               reduce using rule 14 (f_cvars -> .)
    FUNC            reduce using rule 14 (f_cvars -> .)

    f_cvars                        shift and go to state 49

state 40

    (13) cvars -> empty .

    DEF             reduce using rule 13 (cvars -> empty .)
    }               reduce using rule 13 (cvars -> empty .)
    FUNC            reduce using rule 13 (cvars -> empty .)
    CALL            reduce using rule 13 (cvars -> empty .)
    WHILE           reduce using rule 13 (cvars -> empty .)
    FOR             reduce using rule 13 (cvars -> empty .)
    IF              reduce using rule 13 (cvars -> empty .)
    ID              reduce using rule 13 (cvars -> empty .)


state 41

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) . { estatutos } END f_end ;

    {               shift and go to state 51


state 42

    (18) funcion -> FUNC ID f_startfunc ( . params ) : tipo f_tipofunc { cvars estatutos } f_endfunc
    (19) funcion -> FUNC ID f_startfunc ( . params ) : NOTHING f_nothing f_tipofunc { cvars estatutos } f_endfunc
    (42) params -> . pparams
    (43) params -> . empty
    (44) pparams -> . tipo ID f_param
    (45) pparams -> . pparams , tipo ID f_param
    (138) empty -> .
    (40) tipo -> . NUMBER
    (41) tipo -> . STRING

    )               reduce using rule 138 (empty -> .)
    NUMBER          shift and go to state 22
    STRING          shift and go to state 23

    params                         shift and go to state 52
    tipo                           shift and go to state 53
    pparams                        shift and go to state 54
    empty                          shift and go to state 55

state 43

    (24) vars -> vars DEF tipo dimension : lista_id . ;
    (29) lista_id -> lista_id . , ID f_vars

    ;               shift and go to state 56
    ,               shift and go to state 57


state 44

    (28) lista_id -> ID . f_vars
    (30) f_vars -> .

    ;               reduce using rule 30 (f_vars -> .)
    ,               reduce using rule 30 (f_vars -> .)

    f_vars                         shift and go to state 58

state 45

    (34) dimension -> [ NUM f_dim1 . ] f_enddim
    (35) dimension -> [ NUM f_dim1 . ] [ NUM f_dim2 ] f_enddim

    ]               shift and go to state 59


state 46

    (31) lista_id_obj -> ID . f_vars_obj
    (33) f_vars_obj -> .

    ;               reduce using rule 33 (f_vars_obj -> .)
    ,               reduce using rule 33 (f_vars_obj -> .)

    f_vars_obj                     shift and go to state 60

state 47

    (25) vars -> vars DEF ID f_varsobj : lista_id_obj . ;
    (32) lista_id_obj -> lista_id_obj . , ID f_vars_obj

    ;               shift and go to state 61
    ,               shift and go to state 62


state 48

    (8) clase -> TYPE ID f_startclass : ID f_clasepadre . { cvars f_cvars funciones } f_endclass

    {               shift and go to state 63


state 49

    (9) clase -> TYPE ID f_startclass { cvars f_cvars . funciones } f_endclass
    (16) funciones -> . funciones funcion
    (17) funciones -> . empty
    (138) empty -> .

    }               reduce using rule 138 (empty -> .)
    FUNC            reduce using rule 138 (empty -> .)

    funciones                      shift and go to state 64
    empty                          shift and go to state 15

state 50

    (12) cvars -> cvars DEF . tipo dimension : lista_id ;
    (40) tipo -> . NUMBER
    (41) tipo -> . STRING

    NUMBER          shift and go to state 22
    STRING          shift and go to state 23

    tipo                           shift and go to state 65

state 51

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { . estatutos } END f_end ;
    (47) estatutos -> . estatutos estatuto
    (48) estatutos -> . empty
    (138) empty -> .

    }               reduce using rule 138 (empty -> .)
    CALL            reduce using rule 138 (empty -> .)
    WHILE           reduce using rule 138 (empty -> .)
    FOR             reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    ID              reduce using rule 138 (empty -> .)

    estatutos                      shift and go to state 66
    empty                          shift and go to state 67

state 52

    (18) funcion -> FUNC ID f_startfunc ( params . ) : tipo f_tipofunc { cvars estatutos } f_endfunc
    (19) funcion -> FUNC ID f_startfunc ( params . ) : NOTHING f_nothing f_tipofunc { cvars estatutos } f_endfunc

    )               shift and go to state 68


state 53

    (44) pparams -> tipo . ID f_param

    ID              shift and go to state 69


state 54

    (42) params -> pparams .
    (45) pparams -> pparams . , tipo ID f_param

    )               reduce using rule 42 (params -> pparams .)
    ,               shift and go to state 70


state 55

    (43) params -> empty .

    )               reduce using rule 43 (params -> empty .)


state 56

    (24) vars -> vars DEF tipo dimension : lista_id ; .

    DEF             reduce using rule 24 (vars -> vars DEF tipo dimension : lista_id ; .)
    MAIN            reduce using rule 24 (vars -> vars DEF tipo dimension : lista_id ; .)
    FUNC            reduce using rule 24 (vars -> vars DEF tipo dimension : lista_id ; .)


state 57

    (29) lista_id -> lista_id , . ID f_vars

    ID              shift and go to state 71


state 58

    (28) lista_id -> ID f_vars .

    ;               reduce using rule 28 (lista_id -> ID f_vars .)
    ,               reduce using rule 28 (lista_id -> ID f_vars .)


state 59

    (34) dimension -> [ NUM f_dim1 ] . f_enddim
    (35) dimension -> [ NUM f_dim1 ] . [ NUM f_dim2 ] f_enddim
    (39) f_enddim -> .

    [               shift and go to state 72
    :               reduce using rule 39 (f_enddim -> .)

    f_enddim                       shift and go to state 73

state 60

    (31) lista_id_obj -> ID f_vars_obj .

    ;               reduce using rule 31 (lista_id_obj -> ID f_vars_obj .)
    ,               reduce using rule 31 (lista_id_obj -> ID f_vars_obj .)


state 61

    (25) vars -> vars DEF ID f_varsobj : lista_id_obj ; .

    DEF             reduce using rule 25 (vars -> vars DEF ID f_varsobj : lista_id_obj ; .)
    MAIN            reduce using rule 25 (vars -> vars DEF ID f_varsobj : lista_id_obj ; .)
    FUNC            reduce using rule 25 (vars -> vars DEF ID f_varsobj : lista_id_obj ; .)


state 62

    (32) lista_id_obj -> lista_id_obj , . ID f_vars_obj

    ID              shift and go to state 74


state 63

    (8) clase -> TYPE ID f_startclass : ID f_clasepadre { . cvars f_cvars funciones } f_endclass
    (12) cvars -> . cvars DEF tipo dimension : lista_id ;
    (13) cvars -> . empty
    (138) empty -> .

    DEF             reduce using rule 138 (empty -> .)
    }               reduce using rule 138 (empty -> .)
    FUNC            reduce using rule 138 (empty -> .)

    cvars                          shift and go to state 75
    empty                          shift and go to state 40

state 64

    (9) clase -> TYPE ID f_startclass { cvars f_cvars funciones . } f_endclass
    (16) funciones -> funciones . funcion
    (18) funcion -> . FUNC ID f_startfunc ( params ) : tipo f_tipofunc { cvars estatutos } f_endfunc
    (19) funcion -> . FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { cvars estatutos } f_endfunc

    }               shift and go to state 76
    FUNC            shift and go to state 19

    funcion                        shift and go to state 18

state 65

    (12) cvars -> cvars DEF tipo . dimension : lista_id ;
    (34) dimension -> . [ NUM f_dim1 ] f_enddim
    (35) dimension -> . [ NUM f_dim1 ] [ NUM f_dim2 ] f_enddim
    (36) dimension -> . empty
    (138) empty -> .

    [               shift and go to state 28
    :               reduce using rule 138 (empty -> .)

    dimension                      shift and go to state 77
    empty                          shift and go to state 29

state 66

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos . } END f_end ;
    (47) estatutos -> estatutos . estatuto
    (49) estatuto -> . asignacion
    (50) estatuto -> . while
    (51) estatuto -> . for
    (52) estatuto -> . condicion
    (53) estatuto -> . CALL call_func ;
    (71) asignacion -> . var = f_oper expresion ;
    (116) while -> . WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (120) for -> . FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (110) condicion -> . IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (73) var -> . ID f_verify_type indexacion f_end_check

    }               shift and go to state 79
    CALL            shift and go to state 85
    WHILE           shift and go to state 87
    FOR             shift and go to state 88
    IF              shift and go to state 89
    ID              shift and go to state 78

    estatuto                       shift and go to state 80
    asignacion                     shift and go to state 81
    while                          shift and go to state 82
    for                            shift and go to state 83
    condicion                      shift and go to state 84
    var                            shift and go to state 86

state 67

    (48) estatutos -> empty .

    }               reduce using rule 48 (estatutos -> empty .)
    CALL            reduce using rule 48 (estatutos -> empty .)
    WHILE           reduce using rule 48 (estatutos -> empty .)
    FOR             reduce using rule 48 (estatutos -> empty .)
    IF              reduce using rule 48 (estatutos -> empty .)
    ID              reduce using rule 48 (estatutos -> empty .)


state 68

    (18) funcion -> FUNC ID f_startfunc ( params ) . : tipo f_tipofunc { cvars estatutos } f_endfunc
    (19) funcion -> FUNC ID f_startfunc ( params ) . : NOTHING f_nothing f_tipofunc { cvars estatutos } f_endfunc

    :               shift and go to state 90


state 69

    (44) pparams -> tipo ID . f_param
    (46) f_param -> .

    ,               reduce using rule 46 (f_param -> .)
    )               reduce using rule 46 (f_param -> .)

    f_param                        shift and go to state 91

state 70

    (45) pparams -> pparams , . tipo ID f_param
    (40) tipo -> . NUMBER
    (41) tipo -> . STRING

    NUMBER          shift and go to state 22
    STRING          shift and go to state 23

    tipo                           shift and go to state 92

state 71

    (29) lista_id -> lista_id , ID . f_vars
    (30) f_vars -> .

    ;               reduce using rule 30 (f_vars -> .)
    ,               reduce using rule 30 (f_vars -> .)

    f_vars                         shift and go to state 93

state 72

    (35) dimension -> [ NUM f_dim1 ] [ . NUM f_dim2 ] f_enddim

    NUM             shift and go to state 94


state 73

    (34) dimension -> [ NUM f_dim1 ] f_enddim .

    :               reduce using rule 34 (dimension -> [ NUM f_dim1 ] f_enddim .)


state 74

    (32) lista_id_obj -> lista_id_obj , ID . f_vars_obj
    (33) f_vars_obj -> .

    ;               reduce using rule 33 (f_vars_obj -> .)
    ,               reduce using rule 33 (f_vars_obj -> .)

    f_vars_obj                     shift and go to state 95

state 75

    (8) clase -> TYPE ID f_startclass : ID f_clasepadre { cvars . f_cvars funciones } f_endclass
    (12) cvars -> cvars . DEF tipo dimension : lista_id ;
    (14) f_cvars -> .

    DEF             shift and go to state 50
    }               reduce using rule 14 (f_cvars -> .)
    FUNC            reduce using rule 14 (f_cvars -> .)

    f_cvars                        shift and go to state 96

state 76

    (9) clase -> TYPE ID f_startclass { cvars f_cvars funciones } . f_endclass
    (15) f_endclass -> .

    TYPE            reduce using rule 15 (f_endclass -> .)
    DEF             reduce using rule 15 (f_endclass -> .)
    MAIN            reduce using rule 15 (f_endclass -> .)
    FUNC            reduce using rule 15 (f_endclass -> .)

    f_endclass                     shift and go to state 97

state 77

    (12) cvars -> cvars DEF tipo dimension . : lista_id ;

    :               shift and go to state 98


state 78

    (72) var -> ID . f_varobj : ID f_verify_type_composite indexacion f_end_check
    (73) var -> ID . f_verify_type indexacion f_end_check
    (63) f_varobj -> .
    (74) f_verify_type -> .

    :               reduce using rule 63 (f_varobj -> .)
    [               reduce using rule 74 (f_verify_type -> .)
    =               reduce using rule 74 (f_verify_type -> .)
    &               reduce using rule 74 (f_verify_type -> .)
    OPFACT          reduce using rule 74 (f_verify_type -> .)
    OPTERM          reduce using rule 74 (f_verify_type -> .)
    COMP            reduce using rule 74 (f_verify_type -> .)
    TO              reduce using rule 74 (f_verify_type -> .)
    )               reduce using rule 74 (f_verify_type -> .)
    ;               reduce using rule 74 (f_verify_type -> .)
    ]               reduce using rule 74 (f_verify_type -> .)
    ,               reduce using rule 74 (f_verify_type -> .)
    {               reduce using rule 74 (f_verify_type -> .)

    f_varobj                       shift and go to state 99
    f_verify_type                  shift and go to state 100

state 79

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } . END f_end ;

    END             shift and go to state 101


state 80

    (47) estatutos -> estatutos estatuto .

    }               reduce using rule 47 (estatutos -> estatutos estatuto .)
    CALL            reduce using rule 47 (estatutos -> estatutos estatuto .)
    WHILE           reduce using rule 47 (estatutos -> estatutos estatuto .)
    FOR             reduce using rule 47 (estatutos -> estatutos estatuto .)
    IF              reduce using rule 47 (estatutos -> estatutos estatuto .)
    ID              reduce using rule 47 (estatutos -> estatutos estatuto .)


state 81

    (49) estatuto -> asignacion .

    }               reduce using rule 49 (estatuto -> asignacion .)
    CALL            reduce using rule 49 (estatuto -> asignacion .)
    WHILE           reduce using rule 49 (estatuto -> asignacion .)
    FOR             reduce using rule 49 (estatuto -> asignacion .)
    IF              reduce using rule 49 (estatuto -> asignacion .)
    ID              reduce using rule 49 (estatuto -> asignacion .)


state 82

    (50) estatuto -> while .

    }               reduce using rule 50 (estatuto -> while .)
    CALL            reduce using rule 50 (estatuto -> while .)
    WHILE           reduce using rule 50 (estatuto -> while .)
    FOR             reduce using rule 50 (estatuto -> while .)
    IF              reduce using rule 50 (estatuto -> while .)
    ID              reduce using rule 50 (estatuto -> while .)


state 83

    (51) estatuto -> for .

    }               reduce using rule 51 (estatuto -> for .)
    CALL            reduce using rule 51 (estatuto -> for .)
    WHILE           reduce using rule 51 (estatuto -> for .)
    FOR             reduce using rule 51 (estatuto -> for .)
    IF              reduce using rule 51 (estatuto -> for .)
    ID              reduce using rule 51 (estatuto -> for .)


state 84

    (52) estatuto -> condicion .

    }               reduce using rule 52 (estatuto -> condicion .)
    CALL            reduce using rule 52 (estatuto -> condicion .)
    WHILE           reduce using rule 52 (estatuto -> condicion .)
    FOR             reduce using rule 52 (estatuto -> condicion .)
    IF              reduce using rule 52 (estatuto -> condicion .)
    ID              reduce using rule 52 (estatuto -> condicion .)


state 85

    (53) estatuto -> CALL . call_func ;
    (54) call_func -> . func f_gosub f_end_call f_end_check
    (55) call_func -> . input
    (56) call_func -> . write
    (57) call_func -> . return
    (60) func -> . ID f_verify_func ( args )
    (61) func -> . ID f_varobj : ID f_verify_func_composite ( args )
    (127) input -> . INPUT ( var )
    (128) write -> . PRINT ( write_list ) f_call_empty_print
    (129) write -> . PRINT ( ) f_call_empty_print
    (137) return -> . RET ( expresion )

    ID              shift and go to state 107
    INPUT           shift and go to state 108
    PRINT           shift and go to state 109
    RET             shift and go to state 110

    call_func                      shift and go to state 102
    func                           shift and go to state 103
    input                          shift and go to state 104
    write                          shift and go to state 105
    return                         shift and go to state 106

state 86

    (71) asignacion -> var . = f_oper expresion ;

    =               shift and go to state 111


state 87

    (116) while -> WHILE . f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (117) f_while -> .

    (               reduce using rule 117 (f_while -> .)

    f_while                        shift and go to state 112

state 88

    (120) for -> FOR . expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (85) expresion -> . exp
    (86) expresion -> . expresion COMP f_oper exp f_expres
    (88) exp -> . term
    (89) exp -> . exp OPTERM f_oper term f_exp
    (91) term -> . fact
    (92) term -> . term OPFACT f_oper fact f_term
    (95) fact -> . ( f_lparen expresion ) f_rparen
    (96) fact -> . var
    (97) fact -> . NUM f_fact
    (98) fact -> . OPTERM NUM
    (99) fact -> . CALL func f_gosub f_return_val f_end_call f_end_check
    (100) fact -> . CALL to_num
    (101) fact -> . CALL to_str
    (102) fact -> . STR f_string
    (103) fact -> . fact & f_oper var f_concat
    (104) fact -> . fact & f_oper STR f_string f_concat
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (73) var -> . ID f_verify_type indexacion f_end_check

    (               shift and go to state 118
    NUM             shift and go to state 120
    OPTERM          shift and go to state 116
    CALL            shift and go to state 121
    STR             shift and go to state 122
    ID              shift and go to state 78

    expresion                      shift and go to state 113
    exp                            shift and go to state 114
    term                           shift and go to state 115
    fact                           shift and go to state 117
    var                            shift and go to state 119

state 89

    (110) condicion -> IF . ( expresion ) f_if THEN { estatutos } condicionp f_endif

    (               shift and go to state 123


state 90

    (18) funcion -> FUNC ID f_startfunc ( params ) : . tipo f_tipofunc { cvars estatutos } f_endfunc
    (19) funcion -> FUNC ID f_startfunc ( params ) : . NOTHING f_nothing f_tipofunc { cvars estatutos } f_endfunc
    (40) tipo -> . NUMBER
    (41) tipo -> . STRING

    NOTHING         shift and go to state 125
    NUMBER          shift and go to state 22
    STRING          shift and go to state 23

    tipo                           shift and go to state 124

state 91

    (44) pparams -> tipo ID f_param .

    ,               reduce using rule 44 (pparams -> tipo ID f_param .)
    )               reduce using rule 44 (pparams -> tipo ID f_param .)


state 92

    (45) pparams -> pparams , tipo . ID f_param

    ID              shift and go to state 126


state 93

    (29) lista_id -> lista_id , ID f_vars .

    ;               reduce using rule 29 (lista_id -> lista_id , ID f_vars .)
    ,               reduce using rule 29 (lista_id -> lista_id , ID f_vars .)


state 94

    (35) dimension -> [ NUM f_dim1 ] [ NUM . f_dim2 ] f_enddim
    (38) f_dim2 -> .

    ]               reduce using rule 38 (f_dim2 -> .)

    f_dim2                         shift and go to state 127

state 95

    (32) lista_id_obj -> lista_id_obj , ID f_vars_obj .

    ;               reduce using rule 32 (lista_id_obj -> lista_id_obj , ID f_vars_obj .)
    ,               reduce using rule 32 (lista_id_obj -> lista_id_obj , ID f_vars_obj .)


state 96

    (8) clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars . funciones } f_endclass
    (16) funciones -> . funciones funcion
    (17) funciones -> . empty
    (138) empty -> .

    }               reduce using rule 138 (empty -> .)
    FUNC            reduce using rule 138 (empty -> .)

    funciones                      shift and go to state 128
    empty                          shift and go to state 15

state 97

    (9) clase -> TYPE ID f_startclass { cvars f_cvars funciones } f_endclass .

    TYPE            reduce using rule 9 (clase -> TYPE ID f_startclass { cvars f_cvars funciones } f_endclass .)
    DEF             reduce using rule 9 (clase -> TYPE ID f_startclass { cvars f_cvars funciones } f_endclass .)
    MAIN            reduce using rule 9 (clase -> TYPE ID f_startclass { cvars f_cvars funciones } f_endclass .)
    FUNC            reduce using rule 9 (clase -> TYPE ID f_startclass { cvars f_cvars funciones } f_endclass .)


state 98

    (12) cvars -> cvars DEF tipo dimension : . lista_id ;
    (28) lista_id -> . ID f_vars
    (29) lista_id -> . lista_id , ID f_vars

    ID              shift and go to state 44

    lista_id                       shift and go to state 129

state 99

    (72) var -> ID f_varobj . : ID f_verify_type_composite indexacion f_end_check

    :               shift and go to state 130


state 100

    (73) var -> ID f_verify_type . indexacion f_end_check
    (77) indexacion -> . [ f_start_array expresion f_index ] f_end_array
    (78) indexacion -> . [ f_start_array expresion f_index ] [ f_next_index expresion f_index ] f_end_array
    (79) indexacion -> . f_no_index empty
    (80) f_no_index -> .

    [               shift and go to state 132
    =               reduce using rule 80 (f_no_index -> .)
    &               reduce using rule 80 (f_no_index -> .)
    OPFACT          reduce using rule 80 (f_no_index -> .)
    OPTERM          reduce using rule 80 (f_no_index -> .)
    COMP            reduce using rule 80 (f_no_index -> .)
    TO              reduce using rule 80 (f_no_index -> .)
    )               reduce using rule 80 (f_no_index -> .)
    ;               reduce using rule 80 (f_no_index -> .)
    ]               reduce using rule 80 (f_no_index -> .)
    ,               reduce using rule 80 (f_no_index -> .)
    {               reduce using rule 80 (f_no_index -> .)

    indexacion                     shift and go to state 131
    f_no_index                     shift and go to state 133

state 101

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END . f_end ;
    (5) f_end -> .

    ;               reduce using rule 5 (f_end -> .)

    f_end                          shift and go to state 134

state 102

    (53) estatuto -> CALL call_func . ;

    ;               shift and go to state 135


state 103

    (54) call_func -> func . f_gosub f_end_call f_end_check
    (59) f_gosub -> .

    ;               reduce using rule 59 (f_gosub -> .)

    f_gosub                        shift and go to state 136

state 104

    (55) call_func -> input .

    ;               reduce using rule 55 (call_func -> input .)


state 105

    (56) call_func -> write .

    ;               reduce using rule 56 (call_func -> write .)


state 106

    (57) call_func -> return .

    ;               reduce using rule 57 (call_func -> return .)


state 107

    (60) func -> ID . f_verify_func ( args )
    (61) func -> ID . f_varobj : ID f_verify_func_composite ( args )
    (62) f_verify_func -> .
    (63) f_varobj -> .

    (               reduce using rule 62 (f_verify_func -> .)
    :               reduce using rule 63 (f_varobj -> .)

    f_verify_func                  shift and go to state 137
    f_varobj                       shift and go to state 138

state 108

    (127) input -> INPUT . ( var )

    (               shift and go to state 139


state 109

    (128) write -> PRINT . ( write_list ) f_call_empty_print
    (129) write -> PRINT . ( ) f_call_empty_print

    (               shift and go to state 140


state 110

    (137) return -> RET . ( expresion )

    (               shift and go to state 141


state 111

    (71) asignacion -> var = . f_oper expresion ;
    (94) f_oper -> .

    (               reduce using rule 94 (f_oper -> .)
    NUM             reduce using rule 94 (f_oper -> .)
    OPTERM          reduce using rule 94 (f_oper -> .)
    CALL            reduce using rule 94 (f_oper -> .)
    STR             reduce using rule 94 (f_oper -> .)
    ID              reduce using rule 94 (f_oper -> .)

    f_oper                         shift and go to state 142

state 112

    (116) while -> WHILE f_while . ( expresion f_exprwhile ) DO { estatutos } f_endwhile

    (               shift and go to state 143


state 113

    (120) for -> FOR expresion . f_for_start TO expresion f_for_to { estatutos } f_for_end
    (86) expresion -> expresion . COMP f_oper exp f_expres
    (121) f_for_start -> .

    COMP            shift and go to state 145
    TO              reduce using rule 121 (f_for_start -> .)

    f_for_start                    shift and go to state 144

state 114

    (85) expresion -> exp .
    (89) exp -> exp . OPTERM f_oper term f_exp

    COMP            reduce using rule 85 (expresion -> exp .)
    TO              reduce using rule 85 (expresion -> exp .)
    )               reduce using rule 85 (expresion -> exp .)
    ;               reduce using rule 85 (expresion -> exp .)
    ]               reduce using rule 85 (expresion -> exp .)
    ,               reduce using rule 85 (expresion -> exp .)
    {               reduce using rule 85 (expresion -> exp .)
    OPTERM          shift and go to state 146


state 115

    (88) exp -> term .
    (92) term -> term . OPFACT f_oper fact f_term

    OPTERM          reduce using rule 88 (exp -> term .)
    COMP            reduce using rule 88 (exp -> term .)
    TO              reduce using rule 88 (exp -> term .)
    )               reduce using rule 88 (exp -> term .)
    ;               reduce using rule 88 (exp -> term .)
    ]               reduce using rule 88 (exp -> term .)
    ,               reduce using rule 88 (exp -> term .)
    {               reduce using rule 88 (exp -> term .)
    OPFACT          shift and go to state 147


state 116

    (98) fact -> OPTERM . NUM

    NUM             shift and go to state 148


state 117

    (91) term -> fact .
    (103) fact -> fact . & f_oper var f_concat
    (104) fact -> fact . & f_oper STR f_string f_concat

    OPFACT          reduce using rule 91 (term -> fact .)
    OPTERM          reduce using rule 91 (term -> fact .)
    COMP            reduce using rule 91 (term -> fact .)
    TO              reduce using rule 91 (term -> fact .)
    )               reduce using rule 91 (term -> fact .)
    ;               reduce using rule 91 (term -> fact .)
    ]               reduce using rule 91 (term -> fact .)
    ,               reduce using rule 91 (term -> fact .)
    {               reduce using rule 91 (term -> fact .)
    &               shift and go to state 149


state 118

    (95) fact -> ( . f_lparen expresion ) f_rparen
    (106) f_lparen -> .

    (               reduce using rule 106 (f_lparen -> .)
    NUM             reduce using rule 106 (f_lparen -> .)
    OPTERM          reduce using rule 106 (f_lparen -> .)
    CALL            reduce using rule 106 (f_lparen -> .)
    STR             reduce using rule 106 (f_lparen -> .)
    ID              reduce using rule 106 (f_lparen -> .)

    f_lparen                       shift and go to state 150

state 119

    (96) fact -> var .

    &               reduce using rule 96 (fact -> var .)
    OPFACT          reduce using rule 96 (fact -> var .)
    OPTERM          reduce using rule 96 (fact -> var .)
    COMP            reduce using rule 96 (fact -> var .)
    TO              reduce using rule 96 (fact -> var .)
    )               reduce using rule 96 (fact -> var .)
    ;               reduce using rule 96 (fact -> var .)
    ]               reduce using rule 96 (fact -> var .)
    ,               reduce using rule 96 (fact -> var .)
    {               reduce using rule 96 (fact -> var .)


state 120

    (97) fact -> NUM . f_fact
    (108) f_fact -> .

    &               reduce using rule 108 (f_fact -> .)
    OPFACT          reduce using rule 108 (f_fact -> .)
    OPTERM          reduce using rule 108 (f_fact -> .)
    COMP            reduce using rule 108 (f_fact -> .)
    TO              reduce using rule 108 (f_fact -> .)
    )               reduce using rule 108 (f_fact -> .)
    ;               reduce using rule 108 (f_fact -> .)
    ]               reduce using rule 108 (f_fact -> .)
    ,               reduce using rule 108 (f_fact -> .)
    {               reduce using rule 108 (f_fact -> .)

    f_fact                         shift and go to state 151

state 121

    (99) fact -> CALL . func f_gosub f_return_val f_end_call f_end_check
    (100) fact -> CALL . to_num
    (101) fact -> CALL . to_str
    (60) func -> . ID f_verify_func ( args )
    (61) func -> . ID f_varobj : ID f_verify_func_composite ( args )
    (124) to_num -> . TO_NUMBER ( STR f_string )
    (125) to_num -> . TO_NUMBER ( var )
    (126) to_str -> . TO_STRING ( expresion )

    ID              shift and go to state 107
    TO_NUMBER       shift and go to state 155
    TO_STRING       shift and go to state 156

    func                           shift and go to state 152
    to_num                         shift and go to state 153
    to_str                         shift and go to state 154

state 122

    (102) fact -> STR . f_string
    (136) f_string -> .

    &               reduce using rule 136 (f_string -> .)
    OPFACT          reduce using rule 136 (f_string -> .)
    OPTERM          reduce using rule 136 (f_string -> .)
    COMP            reduce using rule 136 (f_string -> .)
    TO              reduce using rule 136 (f_string -> .)
    )               reduce using rule 136 (f_string -> .)
    ;               reduce using rule 136 (f_string -> .)
    ]               reduce using rule 136 (f_string -> .)
    ,               reduce using rule 136 (f_string -> .)
    {               reduce using rule 136 (f_string -> .)

    f_string                       shift and go to state 157

state 123

    (110) condicion -> IF ( . expresion ) f_if THEN { estatutos } condicionp f_endif
    (85) expresion -> . exp
    (86) expresion -> . expresion COMP f_oper exp f_expres
    (88) exp -> . term
    (89) exp -> . exp OPTERM f_oper term f_exp
    (91) term -> . fact
    (92) term -> . term OPFACT f_oper fact f_term
    (95) fact -> . ( f_lparen expresion ) f_rparen
    (96) fact -> . var
    (97) fact -> . NUM f_fact
    (98) fact -> . OPTERM NUM
    (99) fact -> . CALL func f_gosub f_return_val f_end_call f_end_check
    (100) fact -> . CALL to_num
    (101) fact -> . CALL to_str
    (102) fact -> . STR f_string
    (103) fact -> . fact & f_oper var f_concat
    (104) fact -> . fact & f_oper STR f_string f_concat
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (73) var -> . ID f_verify_type indexacion f_end_check

    (               shift and go to state 118
    NUM             shift and go to state 120
    OPTERM          shift and go to state 116
    CALL            shift and go to state 121
    STR             shift and go to state 122
    ID              shift and go to state 78

    expresion                      shift and go to state 158
    exp                            shift and go to state 114
    term                           shift and go to state 115
    fact                           shift and go to state 117
    var                            shift and go to state 119

state 124

    (18) funcion -> FUNC ID f_startfunc ( params ) : tipo . f_tipofunc { cvars estatutos } f_endfunc
    (22) f_tipofunc -> .

    {               reduce using rule 22 (f_tipofunc -> .)

    f_tipofunc                     shift and go to state 159

state 125

    (19) funcion -> FUNC ID f_startfunc ( params ) : NOTHING . f_nothing f_tipofunc { cvars estatutos } f_endfunc
    (21) f_nothing -> .

    {               reduce using rule 21 (f_nothing -> .)

    f_nothing                      shift and go to state 160

state 126

    (45) pparams -> pparams , tipo ID . f_param
    (46) f_param -> .

    ,               reduce using rule 46 (f_param -> .)
    )               reduce using rule 46 (f_param -> .)

    f_param                        shift and go to state 161

state 127

    (35) dimension -> [ NUM f_dim1 ] [ NUM f_dim2 . ] f_enddim

    ]               shift and go to state 162


state 128

    (8) clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones . } f_endclass
    (16) funciones -> funciones . funcion
    (18) funcion -> . FUNC ID f_startfunc ( params ) : tipo f_tipofunc { cvars estatutos } f_endfunc
    (19) funcion -> . FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { cvars estatutos } f_endfunc

    }               shift and go to state 163
    FUNC            shift and go to state 19

    funcion                        shift and go to state 18

state 129

    (12) cvars -> cvars DEF tipo dimension : lista_id . ;
    (29) lista_id -> lista_id . , ID f_vars

    ;               shift and go to state 164
    ,               shift and go to state 57


state 130

    (72) var -> ID f_varobj : . ID f_verify_type_composite indexacion f_end_check

    ID              shift and go to state 165


state 131

    (73) var -> ID f_verify_type indexacion . f_end_check
    (76) f_end_check -> .

    =               reduce using rule 76 (f_end_check -> .)
    &               reduce using rule 76 (f_end_check -> .)
    OPFACT          reduce using rule 76 (f_end_check -> .)
    OPTERM          reduce using rule 76 (f_end_check -> .)
    COMP            reduce using rule 76 (f_end_check -> .)
    TO              reduce using rule 76 (f_end_check -> .)
    )               reduce using rule 76 (f_end_check -> .)
    ;               reduce using rule 76 (f_end_check -> .)
    ]               reduce using rule 76 (f_end_check -> .)
    ,               reduce using rule 76 (f_end_check -> .)
    {               reduce using rule 76 (f_end_check -> .)

    f_end_check                    shift and go to state 166

state 132

    (77) indexacion -> [ . f_start_array expresion f_index ] f_end_array
    (78) indexacion -> [ . f_start_array expresion f_index ] [ f_next_index expresion f_index ] f_end_array
    (81) f_start_array -> .

    (               reduce using rule 81 (f_start_array -> .)
    NUM             reduce using rule 81 (f_start_array -> .)
    OPTERM          reduce using rule 81 (f_start_array -> .)
    CALL            reduce using rule 81 (f_start_array -> .)
    STR             reduce using rule 81 (f_start_array -> .)
    ID              reduce using rule 81 (f_start_array -> .)

    f_start_array                  shift and go to state 167

state 133

    (79) indexacion -> f_no_index . empty
    (138) empty -> .

    =               reduce using rule 138 (empty -> .)
    &               reduce using rule 138 (empty -> .)
    OPFACT          reduce using rule 138 (empty -> .)
    OPTERM          reduce using rule 138 (empty -> .)
    COMP            reduce using rule 138 (empty -> .)
    TO              reduce using rule 138 (empty -> .)
    )               reduce using rule 138 (empty -> .)
    ;               reduce using rule 138 (empty -> .)
    ]               reduce using rule 138 (empty -> .)
    ,               reduce using rule 138 (empty -> .)
    {               reduce using rule 138 (empty -> .)

    empty                          shift and go to state 168

state 134

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end . ;

    ;               shift and go to state 169


state 135

    (53) estatuto -> CALL call_func ; .

    }               reduce using rule 53 (estatuto -> CALL call_func ; .)
    CALL            reduce using rule 53 (estatuto -> CALL call_func ; .)
    WHILE           reduce using rule 53 (estatuto -> CALL call_func ; .)
    FOR             reduce using rule 53 (estatuto -> CALL call_func ; .)
    IF              reduce using rule 53 (estatuto -> CALL call_func ; .)
    ID              reduce using rule 53 (estatuto -> CALL call_func ; .)


state 136

    (54) call_func -> func f_gosub . f_end_call f_end_check
    (58) f_end_call -> .

    ;               reduce using rule 58 (f_end_call -> .)

    f_end_call                     shift and go to state 170

state 137

    (60) func -> ID f_verify_func . ( args )

    (               shift and go to state 171


state 138

    (61) func -> ID f_varobj . : ID f_verify_func_composite ( args )

    :               shift and go to state 172


state 139

    (127) input -> INPUT ( . var )
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (73) var -> . ID f_verify_type indexacion f_end_check

    ID              shift and go to state 78

    var                            shift and go to state 173

state 140

    (128) write -> PRINT ( . write_list ) f_call_empty_print
    (129) write -> PRINT ( . ) f_call_empty_print
    (131) write_list -> . write_list & write_listp
    (132) write_list -> . write_listp
    (133) write_listp -> . STR f_string
    (134) write_listp -> . var
    (135) write_listp -> . CALL to_str
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (73) var -> . ID f_verify_type indexacion f_end_check

    )               shift and go to state 175
    STR             shift and go to state 177
    CALL            shift and go to state 179
    ID              shift and go to state 78

    write_list                     shift and go to state 174
    write_listp                    shift and go to state 176
    var                            shift and go to state 178

state 141

    (137) return -> RET ( . expresion )
    (85) expresion -> . exp
    (86) expresion -> . expresion COMP f_oper exp f_expres
    (88) exp -> . term
    (89) exp -> . exp OPTERM f_oper term f_exp
    (91) term -> . fact
    (92) term -> . term OPFACT f_oper fact f_term
    (95) fact -> . ( f_lparen expresion ) f_rparen
    (96) fact -> . var
    (97) fact -> . NUM f_fact
    (98) fact -> . OPTERM NUM
    (99) fact -> . CALL func f_gosub f_return_val f_end_call f_end_check
    (100) fact -> . CALL to_num
    (101) fact -> . CALL to_str
    (102) fact -> . STR f_string
    (103) fact -> . fact & f_oper var f_concat
    (104) fact -> . fact & f_oper STR f_string f_concat
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (73) var -> . ID f_verify_type indexacion f_end_check

    (               shift and go to state 118
    NUM             shift and go to state 120
    OPTERM          shift and go to state 116
    CALL            shift and go to state 121
    STR             shift and go to state 122
    ID              shift and go to state 78

    expresion                      shift and go to state 180
    exp                            shift and go to state 114
    term                           shift and go to state 115
    fact                           shift and go to state 117
    var                            shift and go to state 119

state 142

    (71) asignacion -> var = f_oper . expresion ;
    (85) expresion -> . exp
    (86) expresion -> . expresion COMP f_oper exp f_expres
    (88) exp -> . term
    (89) exp -> . exp OPTERM f_oper term f_exp
    (91) term -> . fact
    (92) term -> . term OPFACT f_oper fact f_term
    (95) fact -> . ( f_lparen expresion ) f_rparen
    (96) fact -> . var
    (97) fact -> . NUM f_fact
    (98) fact -> . OPTERM NUM
    (99) fact -> . CALL func f_gosub f_return_val f_end_call f_end_check
    (100) fact -> . CALL to_num
    (101) fact -> . CALL to_str
    (102) fact -> . STR f_string
    (103) fact -> . fact & f_oper var f_concat
    (104) fact -> . fact & f_oper STR f_string f_concat
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (73) var -> . ID f_verify_type indexacion f_end_check

    (               shift and go to state 118
    NUM             shift and go to state 120
    OPTERM          shift and go to state 116
    CALL            shift and go to state 121
    STR             shift and go to state 122
    ID              shift and go to state 78

    var                            shift and go to state 119
    expresion                      shift and go to state 181
    exp                            shift and go to state 114
    term                           shift and go to state 115
    fact                           shift and go to state 117

state 143

    (116) while -> WHILE f_while ( . expresion f_exprwhile ) DO { estatutos } f_endwhile
    (85) expresion -> . exp
    (86) expresion -> . expresion COMP f_oper exp f_expres
    (88) exp -> . term
    (89) exp -> . exp OPTERM f_oper term f_exp
    (91) term -> . fact
    (92) term -> . term OPFACT f_oper fact f_term
    (95) fact -> . ( f_lparen expresion ) f_rparen
    (96) fact -> . var
    (97) fact -> . NUM f_fact
    (98) fact -> . OPTERM NUM
    (99) fact -> . CALL func f_gosub f_return_val f_end_call f_end_check
    (100) fact -> . CALL to_num
    (101) fact -> . CALL to_str
    (102) fact -> . STR f_string
    (103) fact -> . fact & f_oper var f_concat
    (104) fact -> . fact & f_oper STR f_string f_concat
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (73) var -> . ID f_verify_type indexacion f_end_check

    (               shift and go to state 118
    NUM             shift and go to state 120
    OPTERM          shift and go to state 116
    CALL            shift and go to state 121
    STR             shift and go to state 122
    ID              shift and go to state 78

    expresion                      shift and go to state 182
    exp                            shift and go to state 114
    term                           shift and go to state 115
    fact                           shift and go to state 117
    var                            shift and go to state 119

state 144

    (120) for -> FOR expresion f_for_start . TO expresion f_for_to { estatutos } f_for_end

    TO              shift and go to state 183


state 145

    (86) expresion -> expresion COMP . f_oper exp f_expres
    (94) f_oper -> .

    (               reduce using rule 94 (f_oper -> .)
    NUM             reduce using rule 94 (f_oper -> .)
    OPTERM          reduce using rule 94 (f_oper -> .)
    CALL            reduce using rule 94 (f_oper -> .)
    STR             reduce using rule 94 (f_oper -> .)
    ID              reduce using rule 94 (f_oper -> .)

    f_oper                         shift and go to state 184

state 146

    (89) exp -> exp OPTERM . f_oper term f_exp
    (94) f_oper -> .

    (               reduce using rule 94 (f_oper -> .)
    NUM             reduce using rule 94 (f_oper -> .)
    OPTERM          reduce using rule 94 (f_oper -> .)
    CALL            reduce using rule 94 (f_oper -> .)
    STR             reduce using rule 94 (f_oper -> .)
    ID              reduce using rule 94 (f_oper -> .)

    f_oper                         shift and go to state 185

state 147

    (92) term -> term OPFACT . f_oper fact f_term
    (94) f_oper -> .

    (               reduce using rule 94 (f_oper -> .)
    NUM             reduce using rule 94 (f_oper -> .)
    OPTERM          reduce using rule 94 (f_oper -> .)
    CALL            reduce using rule 94 (f_oper -> .)
    STR             reduce using rule 94 (f_oper -> .)
    ID              reduce using rule 94 (f_oper -> .)

    f_oper                         shift and go to state 186

state 148

    (98) fact -> OPTERM NUM .

    &               reduce using rule 98 (fact -> OPTERM NUM .)
    OPFACT          reduce using rule 98 (fact -> OPTERM NUM .)
    OPTERM          reduce using rule 98 (fact -> OPTERM NUM .)
    COMP            reduce using rule 98 (fact -> OPTERM NUM .)
    TO              reduce using rule 98 (fact -> OPTERM NUM .)
    )               reduce using rule 98 (fact -> OPTERM NUM .)
    ;               reduce using rule 98 (fact -> OPTERM NUM .)
    ]               reduce using rule 98 (fact -> OPTERM NUM .)
    ,               reduce using rule 98 (fact -> OPTERM NUM .)
    {               reduce using rule 98 (fact -> OPTERM NUM .)


state 149

    (103) fact -> fact & . f_oper var f_concat
    (104) fact -> fact & . f_oper STR f_string f_concat
    (94) f_oper -> .

    STR             reduce using rule 94 (f_oper -> .)
    ID              reduce using rule 94 (f_oper -> .)

    f_oper                         shift and go to state 187

state 150

    (95) fact -> ( f_lparen . expresion ) f_rparen
    (85) expresion -> . exp
    (86) expresion -> . expresion COMP f_oper exp f_expres
    (88) exp -> . term
    (89) exp -> . exp OPTERM f_oper term f_exp
    (91) term -> . fact
    (92) term -> . term OPFACT f_oper fact f_term
    (95) fact -> . ( f_lparen expresion ) f_rparen
    (96) fact -> . var
    (97) fact -> . NUM f_fact
    (98) fact -> . OPTERM NUM
    (99) fact -> . CALL func f_gosub f_return_val f_end_call f_end_check
    (100) fact -> . CALL to_num
    (101) fact -> . CALL to_str
    (102) fact -> . STR f_string
    (103) fact -> . fact & f_oper var f_concat
    (104) fact -> . fact & f_oper STR f_string f_concat
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (73) var -> . ID f_verify_type indexacion f_end_check

    (               shift and go to state 118
    NUM             shift and go to state 120
    OPTERM          shift and go to state 116
    CALL            shift and go to state 121
    STR             shift and go to state 122
    ID              shift and go to state 78

    expresion                      shift and go to state 188
    exp                            shift and go to state 114
    term                           shift and go to state 115
    fact                           shift and go to state 117
    var                            shift and go to state 119

state 151

    (97) fact -> NUM f_fact .

    &               reduce using rule 97 (fact -> NUM f_fact .)
    OPFACT          reduce using rule 97 (fact -> NUM f_fact .)
    OPTERM          reduce using rule 97 (fact -> NUM f_fact .)
    COMP            reduce using rule 97 (fact -> NUM f_fact .)
    TO              reduce using rule 97 (fact -> NUM f_fact .)
    )               reduce using rule 97 (fact -> NUM f_fact .)
    ;               reduce using rule 97 (fact -> NUM f_fact .)
    ]               reduce using rule 97 (fact -> NUM f_fact .)
    ,               reduce using rule 97 (fact -> NUM f_fact .)
    {               reduce using rule 97 (fact -> NUM f_fact .)


state 152

    (99) fact -> CALL func . f_gosub f_return_val f_end_call f_end_check
    (59) f_gosub -> .

    &               reduce using rule 59 (f_gosub -> .)
    OPFACT          reduce using rule 59 (f_gosub -> .)
    OPTERM          reduce using rule 59 (f_gosub -> .)
    COMP            reduce using rule 59 (f_gosub -> .)
    TO              reduce using rule 59 (f_gosub -> .)
    )               reduce using rule 59 (f_gosub -> .)
    ;               reduce using rule 59 (f_gosub -> .)
    ]               reduce using rule 59 (f_gosub -> .)
    ,               reduce using rule 59 (f_gosub -> .)
    {               reduce using rule 59 (f_gosub -> .)

    f_gosub                        shift and go to state 189

state 153

    (100) fact -> CALL to_num .

    &               reduce using rule 100 (fact -> CALL to_num .)
    OPFACT          reduce using rule 100 (fact -> CALL to_num .)
    OPTERM          reduce using rule 100 (fact -> CALL to_num .)
    COMP            reduce using rule 100 (fact -> CALL to_num .)
    TO              reduce using rule 100 (fact -> CALL to_num .)
    )               reduce using rule 100 (fact -> CALL to_num .)
    ;               reduce using rule 100 (fact -> CALL to_num .)
    ]               reduce using rule 100 (fact -> CALL to_num .)
    ,               reduce using rule 100 (fact -> CALL to_num .)
    {               reduce using rule 100 (fact -> CALL to_num .)


state 154

    (101) fact -> CALL to_str .

    &               reduce using rule 101 (fact -> CALL to_str .)
    OPFACT          reduce using rule 101 (fact -> CALL to_str .)
    OPTERM          reduce using rule 101 (fact -> CALL to_str .)
    COMP            reduce using rule 101 (fact -> CALL to_str .)
    TO              reduce using rule 101 (fact -> CALL to_str .)
    )               reduce using rule 101 (fact -> CALL to_str .)
    ;               reduce using rule 101 (fact -> CALL to_str .)
    ]               reduce using rule 101 (fact -> CALL to_str .)
    ,               reduce using rule 101 (fact -> CALL to_str .)
    {               reduce using rule 101 (fact -> CALL to_str .)


state 155

    (124) to_num -> TO_NUMBER . ( STR f_string )
    (125) to_num -> TO_NUMBER . ( var )

    (               shift and go to state 190


state 156

    (126) to_str -> TO_STRING . ( expresion )

    (               shift and go to state 191


state 157

    (102) fact -> STR f_string .

    &               reduce using rule 102 (fact -> STR f_string .)
    OPFACT          reduce using rule 102 (fact -> STR f_string .)
    OPTERM          reduce using rule 102 (fact -> STR f_string .)
    COMP            reduce using rule 102 (fact -> STR f_string .)
    TO              reduce using rule 102 (fact -> STR f_string .)
    )               reduce using rule 102 (fact -> STR f_string .)
    ;               reduce using rule 102 (fact -> STR f_string .)
    ]               reduce using rule 102 (fact -> STR f_string .)
    ,               reduce using rule 102 (fact -> STR f_string .)
    {               reduce using rule 102 (fact -> STR f_string .)


state 158

    (110) condicion -> IF ( expresion . ) f_if THEN { estatutos } condicionp f_endif
    (86) expresion -> expresion . COMP f_oper exp f_expres

    )               shift and go to state 192
    COMP            shift and go to state 145


state 159

    (18) funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc . { cvars estatutos } f_endfunc

    {               shift and go to state 193


state 160

    (19) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing . f_tipofunc { cvars estatutos } f_endfunc
    (22) f_tipofunc -> .

    {               reduce using rule 22 (f_tipofunc -> .)

    f_tipofunc                     shift and go to state 194

state 161

    (45) pparams -> pparams , tipo ID f_param .

    ,               reduce using rule 45 (pparams -> pparams , tipo ID f_param .)
    )               reduce using rule 45 (pparams -> pparams , tipo ID f_param .)


state 162

    (35) dimension -> [ NUM f_dim1 ] [ NUM f_dim2 ] . f_enddim
    (39) f_enddim -> .

    :               reduce using rule 39 (f_enddim -> .)

    f_enddim                       shift and go to state 195

state 163

    (8) clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } . f_endclass
    (15) f_endclass -> .

    TYPE            reduce using rule 15 (f_endclass -> .)
    DEF             reduce using rule 15 (f_endclass -> .)
    MAIN            reduce using rule 15 (f_endclass -> .)
    FUNC            reduce using rule 15 (f_endclass -> .)

    f_endclass                     shift and go to state 196

state 164

    (12) cvars -> cvars DEF tipo dimension : lista_id ; .

    DEF             reduce using rule 12 (cvars -> cvars DEF tipo dimension : lista_id ; .)
    }               reduce using rule 12 (cvars -> cvars DEF tipo dimension : lista_id ; .)
    FUNC            reduce using rule 12 (cvars -> cvars DEF tipo dimension : lista_id ; .)
    CALL            reduce using rule 12 (cvars -> cvars DEF tipo dimension : lista_id ; .)
    WHILE           reduce using rule 12 (cvars -> cvars DEF tipo dimension : lista_id ; .)
    FOR             reduce using rule 12 (cvars -> cvars DEF tipo dimension : lista_id ; .)
    IF              reduce using rule 12 (cvars -> cvars DEF tipo dimension : lista_id ; .)
    ID              reduce using rule 12 (cvars -> cvars DEF tipo dimension : lista_id ; .)


state 165

    (72) var -> ID f_varobj : ID . f_verify_type_composite indexacion f_end_check
    (75) f_verify_type_composite -> .

    [               reduce using rule 75 (f_verify_type_composite -> .)
    =               reduce using rule 75 (f_verify_type_composite -> .)
    &               reduce using rule 75 (f_verify_type_composite -> .)
    OPFACT          reduce using rule 75 (f_verify_type_composite -> .)
    OPTERM          reduce using rule 75 (f_verify_type_composite -> .)
    COMP            reduce using rule 75 (f_verify_type_composite -> .)
    TO              reduce using rule 75 (f_verify_type_composite -> .)
    )               reduce using rule 75 (f_verify_type_composite -> .)
    ;               reduce using rule 75 (f_verify_type_composite -> .)
    ]               reduce using rule 75 (f_verify_type_composite -> .)
    ,               reduce using rule 75 (f_verify_type_composite -> .)
    {               reduce using rule 75 (f_verify_type_composite -> .)

    f_verify_type_composite        shift and go to state 197

state 166

    (73) var -> ID f_verify_type indexacion f_end_check .

    =               reduce using rule 73 (var -> ID f_verify_type indexacion f_end_check .)
    &               reduce using rule 73 (var -> ID f_verify_type indexacion f_end_check .)
    OPFACT          reduce using rule 73 (var -> ID f_verify_type indexacion f_end_check .)
    OPTERM          reduce using rule 73 (var -> ID f_verify_type indexacion f_end_check .)
    COMP            reduce using rule 73 (var -> ID f_verify_type indexacion f_end_check .)
    TO              reduce using rule 73 (var -> ID f_verify_type indexacion f_end_check .)
    )               reduce using rule 73 (var -> ID f_verify_type indexacion f_end_check .)
    ;               reduce using rule 73 (var -> ID f_verify_type indexacion f_end_check .)
    ]               reduce using rule 73 (var -> ID f_verify_type indexacion f_end_check .)
    ,               reduce using rule 73 (var -> ID f_verify_type indexacion f_end_check .)
    {               reduce using rule 73 (var -> ID f_verify_type indexacion f_end_check .)


state 167

    (77) indexacion -> [ f_start_array . expresion f_index ] f_end_array
    (78) indexacion -> [ f_start_array . expresion f_index ] [ f_next_index expresion f_index ] f_end_array
    (85) expresion -> . exp
    (86) expresion -> . expresion COMP f_oper exp f_expres
    (88) exp -> . term
    (89) exp -> . exp OPTERM f_oper term f_exp
    (91) term -> . fact
    (92) term -> . term OPFACT f_oper fact f_term
    (95) fact -> . ( f_lparen expresion ) f_rparen
    (96) fact -> . var
    (97) fact -> . NUM f_fact
    (98) fact -> . OPTERM NUM
    (99) fact -> . CALL func f_gosub f_return_val f_end_call f_end_check
    (100) fact -> . CALL to_num
    (101) fact -> . CALL to_str
    (102) fact -> . STR f_string
    (103) fact -> . fact & f_oper var f_concat
    (104) fact -> . fact & f_oper STR f_string f_concat
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (73) var -> . ID f_verify_type indexacion f_end_check

    (               shift and go to state 118
    NUM             shift and go to state 120
    OPTERM          shift and go to state 116
    CALL            shift and go to state 121
    STR             shift and go to state 122
    ID              shift and go to state 78

    expresion                      shift and go to state 198
    exp                            shift and go to state 114
    term                           shift and go to state 115
    fact                           shift and go to state 117
    var                            shift and go to state 119

state 168

    (79) indexacion -> f_no_index empty .

    =               reduce using rule 79 (indexacion -> f_no_index empty .)
    &               reduce using rule 79 (indexacion -> f_no_index empty .)
    OPFACT          reduce using rule 79 (indexacion -> f_no_index empty .)
    OPTERM          reduce using rule 79 (indexacion -> f_no_index empty .)
    COMP            reduce using rule 79 (indexacion -> f_no_index empty .)
    TO              reduce using rule 79 (indexacion -> f_no_index empty .)
    )               reduce using rule 79 (indexacion -> f_no_index empty .)
    ;               reduce using rule 79 (indexacion -> f_no_index empty .)
    ]               reduce using rule 79 (indexacion -> f_no_index empty .)
    ,               reduce using rule 79 (indexacion -> f_no_index empty .)
    {               reduce using rule 79 (indexacion -> f_no_index empty .)


state 169

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ; .

    $end            reduce using rule 1 (start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ; .)


state 170

    (54) call_func -> func f_gosub f_end_call . f_end_check
    (76) f_end_check -> .

    ;               reduce using rule 76 (f_end_check -> .)

    f_end_check                    shift and go to state 199

state 171

    (60) func -> ID f_verify_func ( . args )
    (65) args -> . args_list f_end_args
    (66) args -> . f_end_args
    (67) args_list -> . expresion f_arg
    (68) args_list -> . args_list , expresion f_arg
    (70) f_end_args -> .
    (85) expresion -> . exp
    (86) expresion -> . expresion COMP f_oper exp f_expres
    (88) exp -> . term
    (89) exp -> . exp OPTERM f_oper term f_exp
    (91) term -> . fact
    (92) term -> . term OPFACT f_oper fact f_term
    (95) fact -> . ( f_lparen expresion ) f_rparen
    (96) fact -> . var
    (97) fact -> . NUM f_fact
    (98) fact -> . OPTERM NUM
    (99) fact -> . CALL func f_gosub f_return_val f_end_call f_end_check
    (100) fact -> . CALL to_num
    (101) fact -> . CALL to_str
    (102) fact -> . STR f_string
    (103) fact -> . fact & f_oper var f_concat
    (104) fact -> . fact & f_oper STR f_string f_concat
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (73) var -> . ID f_verify_type indexacion f_end_check

    )               reduce using rule 70 (f_end_args -> .)
    (               shift and go to state 118
    NUM             shift and go to state 120
    OPTERM          shift and go to state 116
    CALL            shift and go to state 121
    STR             shift and go to state 122
    ID              shift and go to state 78

    args                           shift and go to state 200
    args_list                      shift and go to state 201
    f_end_args                     shift and go to state 202
    expresion                      shift and go to state 203
    exp                            shift and go to state 114
    term                           shift and go to state 115
    fact                           shift and go to state 117
    var                            shift and go to state 119

state 172

    (61) func -> ID f_varobj : . ID f_verify_func_composite ( args )

    ID              shift and go to state 204


state 173

    (127) input -> INPUT ( var . )

    )               shift and go to state 205


state 174

    (128) write -> PRINT ( write_list . ) f_call_empty_print
    (131) write_list -> write_list . & write_listp

    )               shift and go to state 206
    &               shift and go to state 207


state 175

    (129) write -> PRINT ( ) . f_call_empty_print
    (130) f_call_empty_print -> .

    ;               reduce using rule 130 (f_call_empty_print -> .)

    f_call_empty_print             shift and go to state 208

state 176

    (132) write_list -> write_listp .

    )               reduce using rule 132 (write_list -> write_listp .)
    &               reduce using rule 132 (write_list -> write_listp .)


state 177

    (133) write_listp -> STR . f_string
    (136) f_string -> .

    )               reduce using rule 136 (f_string -> .)
    &               reduce using rule 136 (f_string -> .)

    f_string                       shift and go to state 209

state 178

    (134) write_listp -> var .

    )               reduce using rule 134 (write_listp -> var .)
    &               reduce using rule 134 (write_listp -> var .)


state 179

    (135) write_listp -> CALL . to_str
    (126) to_str -> . TO_STRING ( expresion )

    TO_STRING       shift and go to state 156

    to_str                         shift and go to state 210

state 180

    (137) return -> RET ( expresion . )
    (86) expresion -> expresion . COMP f_oper exp f_expres

    )               shift and go to state 211
    COMP            shift and go to state 145


state 181

    (71) asignacion -> var = f_oper expresion . ;
    (86) expresion -> expresion . COMP f_oper exp f_expres

    ;               shift and go to state 212
    COMP            shift and go to state 145


state 182

    (116) while -> WHILE f_while ( expresion . f_exprwhile ) DO { estatutos } f_endwhile
    (86) expresion -> expresion . COMP f_oper exp f_expres
    (118) f_exprwhile -> .

    COMP            shift and go to state 145
    )               reduce using rule 118 (f_exprwhile -> .)

    f_exprwhile                    shift and go to state 213

state 183

    (120) for -> FOR expresion f_for_start TO . expresion f_for_to { estatutos } f_for_end
    (85) expresion -> . exp
    (86) expresion -> . expresion COMP f_oper exp f_expres
    (88) exp -> . term
    (89) exp -> . exp OPTERM f_oper term f_exp
    (91) term -> . fact
    (92) term -> . term OPFACT f_oper fact f_term
    (95) fact -> . ( f_lparen expresion ) f_rparen
    (96) fact -> . var
    (97) fact -> . NUM f_fact
    (98) fact -> . OPTERM NUM
    (99) fact -> . CALL func f_gosub f_return_val f_end_call f_end_check
    (100) fact -> . CALL to_num
    (101) fact -> . CALL to_str
    (102) fact -> . STR f_string
    (103) fact -> . fact & f_oper var f_concat
    (104) fact -> . fact & f_oper STR f_string f_concat
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (73) var -> . ID f_verify_type indexacion f_end_check

    (               shift and go to state 118
    NUM             shift and go to state 120
    OPTERM          shift and go to state 116
    CALL            shift and go to state 121
    STR             shift and go to state 122
    ID              shift and go to state 78

    expresion                      shift and go to state 214
    exp                            shift and go to state 114
    term                           shift and go to state 115
    fact                           shift and go to state 117
    var                            shift and go to state 119

state 184

    (86) expresion -> expresion COMP f_oper . exp f_expres
    (88) exp -> . term
    (89) exp -> . exp OPTERM f_oper term f_exp
    (91) term -> . fact
    (92) term -> . term OPFACT f_oper fact f_term
    (95) fact -> . ( f_lparen expresion ) f_rparen
    (96) fact -> . var
    (97) fact -> . NUM f_fact
    (98) fact -> . OPTERM NUM
    (99) fact -> . CALL func f_gosub f_return_val f_end_call f_end_check
    (100) fact -> . CALL to_num
    (101) fact -> . CALL to_str
    (102) fact -> . STR f_string
    (103) fact -> . fact & f_oper var f_concat
    (104) fact -> . fact & f_oper STR f_string f_concat
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (73) var -> . ID f_verify_type indexacion f_end_check

    (               shift and go to state 118
    NUM             shift and go to state 120
    OPTERM          shift and go to state 116
    CALL            shift and go to state 121
    STR             shift and go to state 122
    ID              shift and go to state 78

    exp                            shift and go to state 215
    term                           shift and go to state 115
    fact                           shift and go to state 117
    var                            shift and go to state 119

state 185

    (89) exp -> exp OPTERM f_oper . term f_exp
    (91) term -> . fact
    (92) term -> . term OPFACT f_oper fact f_term
    (95) fact -> . ( f_lparen expresion ) f_rparen
    (96) fact -> . var
    (97) fact -> . NUM f_fact
    (98) fact -> . OPTERM NUM
    (99) fact -> . CALL func f_gosub f_return_val f_end_call f_end_check
    (100) fact -> . CALL to_num
    (101) fact -> . CALL to_str
    (102) fact -> . STR f_string
    (103) fact -> . fact & f_oper var f_concat
    (104) fact -> . fact & f_oper STR f_string f_concat
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (73) var -> . ID f_verify_type indexacion f_end_check

    (               shift and go to state 118
    NUM             shift and go to state 120
    OPTERM          shift and go to state 116
    CALL            shift and go to state 121
    STR             shift and go to state 122
    ID              shift and go to state 78

    term                           shift and go to state 216
    fact                           shift and go to state 117
    var                            shift and go to state 119

state 186

    (92) term -> term OPFACT f_oper . fact f_term
    (95) fact -> . ( f_lparen expresion ) f_rparen
    (96) fact -> . var
    (97) fact -> . NUM f_fact
    (98) fact -> . OPTERM NUM
    (99) fact -> . CALL func f_gosub f_return_val f_end_call f_end_check
    (100) fact -> . CALL to_num
    (101) fact -> . CALL to_str
    (102) fact -> . STR f_string
    (103) fact -> . fact & f_oper var f_concat
    (104) fact -> . fact & f_oper STR f_string f_concat
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (73) var -> . ID f_verify_type indexacion f_end_check

    (               shift and go to state 118
    NUM             shift and go to state 120
    OPTERM          shift and go to state 116
    CALL            shift and go to state 121
    STR             shift and go to state 122
    ID              shift and go to state 78

    fact                           shift and go to state 217
    var                            shift and go to state 119

state 187

    (103) fact -> fact & f_oper . var f_concat
    (104) fact -> fact & f_oper . STR f_string f_concat
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (73) var -> . ID f_verify_type indexacion f_end_check

    STR             shift and go to state 219
    ID              shift and go to state 78

    var                            shift and go to state 218

state 188

    (95) fact -> ( f_lparen expresion . ) f_rparen
    (86) expresion -> expresion . COMP f_oper exp f_expres

    )               shift and go to state 220
    COMP            shift and go to state 145


state 189

    (99) fact -> CALL func f_gosub . f_return_val f_end_call f_end_check
    (109) f_return_val -> .

    &               reduce using rule 109 (f_return_val -> .)
    OPFACT          reduce using rule 109 (f_return_val -> .)
    OPTERM          reduce using rule 109 (f_return_val -> .)
    COMP            reduce using rule 109 (f_return_val -> .)
    TO              reduce using rule 109 (f_return_val -> .)
    )               reduce using rule 109 (f_return_val -> .)
    ;               reduce using rule 109 (f_return_val -> .)
    ]               reduce using rule 109 (f_return_val -> .)
    ,               reduce using rule 109 (f_return_val -> .)
    {               reduce using rule 109 (f_return_val -> .)

    f_return_val                   shift and go to state 221

state 190

    (124) to_num -> TO_NUMBER ( . STR f_string )
    (125) to_num -> TO_NUMBER ( . var )
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (73) var -> . ID f_verify_type indexacion f_end_check

    STR             shift and go to state 222
    ID              shift and go to state 78

    var                            shift and go to state 223

state 191

    (126) to_str -> TO_STRING ( . expresion )
    (85) expresion -> . exp
    (86) expresion -> . expresion COMP f_oper exp f_expres
    (88) exp -> . term
    (89) exp -> . exp OPTERM f_oper term f_exp
    (91) term -> . fact
    (92) term -> . term OPFACT f_oper fact f_term
    (95) fact -> . ( f_lparen expresion ) f_rparen
    (96) fact -> . var
    (97) fact -> . NUM f_fact
    (98) fact -> . OPTERM NUM
    (99) fact -> . CALL func f_gosub f_return_val f_end_call f_end_check
    (100) fact -> . CALL to_num
    (101) fact -> . CALL to_str
    (102) fact -> . STR f_string
    (103) fact -> . fact & f_oper var f_concat
    (104) fact -> . fact & f_oper STR f_string f_concat
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (73) var -> . ID f_verify_type indexacion f_end_check

    (               shift and go to state 118
    NUM             shift and go to state 120
    OPTERM          shift and go to state 116
    CALL            shift and go to state 121
    STR             shift and go to state 122
    ID              shift and go to state 78

    expresion                      shift and go to state 224
    exp                            shift and go to state 114
    term                           shift and go to state 115
    fact                           shift and go to state 117
    var                            shift and go to state 119

state 192

    (110) condicion -> IF ( expresion ) . f_if THEN { estatutos } condicionp f_endif
    (113) f_if -> .

    THEN            reduce using rule 113 (f_if -> .)

    f_if                           shift and go to state 225

state 193

    (18) funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { . cvars estatutos } f_endfunc
    (12) cvars -> . cvars DEF tipo dimension : lista_id ;
    (13) cvars -> . empty
    (138) empty -> .

    DEF             reduce using rule 138 (empty -> .)
    }               reduce using rule 138 (empty -> .)
    CALL            reduce using rule 138 (empty -> .)
    WHILE           reduce using rule 138 (empty -> .)
    FOR             reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    ID              reduce using rule 138 (empty -> .)

    cvars                          shift and go to state 226
    empty                          shift and go to state 40

state 194

    (19) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc . { cvars estatutos } f_endfunc

    {               shift and go to state 227


state 195

    (35) dimension -> [ NUM f_dim1 ] [ NUM f_dim2 ] f_enddim .

    :               reduce using rule 35 (dimension -> [ NUM f_dim1 ] [ NUM f_dim2 ] f_enddim .)


state 196

    (8) clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass .

    TYPE            reduce using rule 8 (clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass .)
    DEF             reduce using rule 8 (clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass .)
    MAIN            reduce using rule 8 (clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass .)
    FUNC            reduce using rule 8 (clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass .)


state 197

    (72) var -> ID f_varobj : ID f_verify_type_composite . indexacion f_end_check
    (77) indexacion -> . [ f_start_array expresion f_index ] f_end_array
    (78) indexacion -> . [ f_start_array expresion f_index ] [ f_next_index expresion f_index ] f_end_array
    (79) indexacion -> . f_no_index empty
    (80) f_no_index -> .

    [               shift and go to state 132
    =               reduce using rule 80 (f_no_index -> .)
    &               reduce using rule 80 (f_no_index -> .)
    OPFACT          reduce using rule 80 (f_no_index -> .)
    OPTERM          reduce using rule 80 (f_no_index -> .)
    COMP            reduce using rule 80 (f_no_index -> .)
    TO              reduce using rule 80 (f_no_index -> .)
    )               reduce using rule 80 (f_no_index -> .)
    ;               reduce using rule 80 (f_no_index -> .)
    ]               reduce using rule 80 (f_no_index -> .)
    ,               reduce using rule 80 (f_no_index -> .)
    {               reduce using rule 80 (f_no_index -> .)

    indexacion                     shift and go to state 228
    f_no_index                     shift and go to state 133

state 198

    (77) indexacion -> [ f_start_array expresion . f_index ] f_end_array
    (78) indexacion -> [ f_start_array expresion . f_index ] [ f_next_index expresion f_index ] f_end_array
    (86) expresion -> expresion . COMP f_oper exp f_expres
    (82) f_index -> .

    COMP            shift and go to state 145
    ]               reduce using rule 82 (f_index -> .)

    f_index                        shift and go to state 229

state 199

    (54) call_func -> func f_gosub f_end_call f_end_check .

    ;               reduce using rule 54 (call_func -> func f_gosub f_end_call f_end_check .)


state 200

    (60) func -> ID f_verify_func ( args . )

    )               shift and go to state 230


state 201

    (65) args -> args_list . f_end_args
    (68) args_list -> args_list . , expresion f_arg
    (70) f_end_args -> .

    ,               shift and go to state 232
    )               reduce using rule 70 (f_end_args -> .)

    f_end_args                     shift and go to state 231

state 202

    (66) args -> f_end_args .

    )               reduce using rule 66 (args -> f_end_args .)


state 203

    (67) args_list -> expresion . f_arg
    (86) expresion -> expresion . COMP f_oper exp f_expres
    (69) f_arg -> .

    COMP            shift and go to state 145
    ,               reduce using rule 69 (f_arg -> .)
    )               reduce using rule 69 (f_arg -> .)

    f_arg                          shift and go to state 233

state 204

    (61) func -> ID f_varobj : ID . f_verify_func_composite ( args )
    (64) f_verify_func_composite -> .

    (               reduce using rule 64 (f_verify_func_composite -> .)

    f_verify_func_composite        shift and go to state 234

state 205

    (127) input -> INPUT ( var ) .

    ;               reduce using rule 127 (input -> INPUT ( var ) .)


state 206

    (128) write -> PRINT ( write_list ) . f_call_empty_print
    (130) f_call_empty_print -> .

    ;               reduce using rule 130 (f_call_empty_print -> .)

    f_call_empty_print             shift and go to state 235

state 207

    (131) write_list -> write_list & . write_listp
    (133) write_listp -> . STR f_string
    (134) write_listp -> . var
    (135) write_listp -> . CALL to_str
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (73) var -> . ID f_verify_type indexacion f_end_check

    STR             shift and go to state 177
    CALL            shift and go to state 179
    ID              shift and go to state 78

    write_listp                    shift and go to state 236
    var                            shift and go to state 178

state 208

    (129) write -> PRINT ( ) f_call_empty_print .

    ;               reduce using rule 129 (write -> PRINT ( ) f_call_empty_print .)


state 209

    (133) write_listp -> STR f_string .

    )               reduce using rule 133 (write_listp -> STR f_string .)
    &               reduce using rule 133 (write_listp -> STR f_string .)


state 210

    (135) write_listp -> CALL to_str .

    )               reduce using rule 135 (write_listp -> CALL to_str .)
    &               reduce using rule 135 (write_listp -> CALL to_str .)


state 211

    (137) return -> RET ( expresion ) .

    ;               reduce using rule 137 (return -> RET ( expresion ) .)


state 212

    (71) asignacion -> var = f_oper expresion ; .

    }               reduce using rule 71 (asignacion -> var = f_oper expresion ; .)
    CALL            reduce using rule 71 (asignacion -> var = f_oper expresion ; .)
    WHILE           reduce using rule 71 (asignacion -> var = f_oper expresion ; .)
    FOR             reduce using rule 71 (asignacion -> var = f_oper expresion ; .)
    IF              reduce using rule 71 (asignacion -> var = f_oper expresion ; .)
    ID              reduce using rule 71 (asignacion -> var = f_oper expresion ; .)


state 213

    (116) while -> WHILE f_while ( expresion f_exprwhile . ) DO { estatutos } f_endwhile

    )               shift and go to state 237


state 214

    (120) for -> FOR expresion f_for_start TO expresion . f_for_to { estatutos } f_for_end
    (86) expresion -> expresion . COMP f_oper exp f_expres
    (122) f_for_to -> .

    COMP            shift and go to state 145
    {               reduce using rule 122 (f_for_to -> .)

    f_for_to                       shift and go to state 238

state 215

    (86) expresion -> expresion COMP f_oper exp . f_expres
    (89) exp -> exp . OPTERM f_oper term f_exp
    (87) f_expres -> .

    OPTERM          shift and go to state 146
    COMP            reduce using rule 87 (f_expres -> .)
    TO              reduce using rule 87 (f_expres -> .)
    )               reduce using rule 87 (f_expres -> .)
    ;               reduce using rule 87 (f_expres -> .)
    ]               reduce using rule 87 (f_expres -> .)
    ,               reduce using rule 87 (f_expres -> .)
    {               reduce using rule 87 (f_expres -> .)

    f_expres                       shift and go to state 239

state 216

    (89) exp -> exp OPTERM f_oper term . f_exp
    (92) term -> term . OPFACT f_oper fact f_term
    (90) f_exp -> .

    OPFACT          shift and go to state 147
    OPTERM          reduce using rule 90 (f_exp -> .)
    COMP            reduce using rule 90 (f_exp -> .)
    TO              reduce using rule 90 (f_exp -> .)
    )               reduce using rule 90 (f_exp -> .)
    ;               reduce using rule 90 (f_exp -> .)
    ]               reduce using rule 90 (f_exp -> .)
    ,               reduce using rule 90 (f_exp -> .)
    {               reduce using rule 90 (f_exp -> .)

    f_exp                          shift and go to state 240

state 217

    (92) term -> term OPFACT f_oper fact . f_term
    (103) fact -> fact . & f_oper var f_concat
    (104) fact -> fact . & f_oper STR f_string f_concat
    (93) f_term -> .

    &               shift and go to state 149
    OPFACT          reduce using rule 93 (f_term -> .)
    OPTERM          reduce using rule 93 (f_term -> .)
    COMP            reduce using rule 93 (f_term -> .)
    TO              reduce using rule 93 (f_term -> .)
    )               reduce using rule 93 (f_term -> .)
    ;               reduce using rule 93 (f_term -> .)
    ]               reduce using rule 93 (f_term -> .)
    ,               reduce using rule 93 (f_term -> .)
    {               reduce using rule 93 (f_term -> .)

    f_term                         shift and go to state 241

state 218

    (103) fact -> fact & f_oper var . f_concat
    (105) f_concat -> .

    &               reduce using rule 105 (f_concat -> .)
    OPFACT          reduce using rule 105 (f_concat -> .)
    OPTERM          reduce using rule 105 (f_concat -> .)
    COMP            reduce using rule 105 (f_concat -> .)
    TO              reduce using rule 105 (f_concat -> .)
    )               reduce using rule 105 (f_concat -> .)
    ;               reduce using rule 105 (f_concat -> .)
    ]               reduce using rule 105 (f_concat -> .)
    ,               reduce using rule 105 (f_concat -> .)
    {               reduce using rule 105 (f_concat -> .)

    f_concat                       shift and go to state 242

state 219

    (104) fact -> fact & f_oper STR . f_string f_concat
    (136) f_string -> .

    &               reduce using rule 136 (f_string -> .)
    OPFACT          reduce using rule 136 (f_string -> .)
    OPTERM          reduce using rule 136 (f_string -> .)
    COMP            reduce using rule 136 (f_string -> .)
    TO              reduce using rule 136 (f_string -> .)
    )               reduce using rule 136 (f_string -> .)
    ;               reduce using rule 136 (f_string -> .)
    ]               reduce using rule 136 (f_string -> .)
    ,               reduce using rule 136 (f_string -> .)
    {               reduce using rule 136 (f_string -> .)

    f_string                       shift and go to state 243

state 220

    (95) fact -> ( f_lparen expresion ) . f_rparen
    (107) f_rparen -> .

    &               reduce using rule 107 (f_rparen -> .)
    OPFACT          reduce using rule 107 (f_rparen -> .)
    OPTERM          reduce using rule 107 (f_rparen -> .)
    COMP            reduce using rule 107 (f_rparen -> .)
    TO              reduce using rule 107 (f_rparen -> .)
    )               reduce using rule 107 (f_rparen -> .)
    ;               reduce using rule 107 (f_rparen -> .)
    ]               reduce using rule 107 (f_rparen -> .)
    ,               reduce using rule 107 (f_rparen -> .)
    {               reduce using rule 107 (f_rparen -> .)

    f_rparen                       shift and go to state 244

state 221

    (99) fact -> CALL func f_gosub f_return_val . f_end_call f_end_check
    (58) f_end_call -> .

    &               reduce using rule 58 (f_end_call -> .)
    OPFACT          reduce using rule 58 (f_end_call -> .)
    OPTERM          reduce using rule 58 (f_end_call -> .)
    COMP            reduce using rule 58 (f_end_call -> .)
    TO              reduce using rule 58 (f_end_call -> .)
    )               reduce using rule 58 (f_end_call -> .)
    ;               reduce using rule 58 (f_end_call -> .)
    ]               reduce using rule 58 (f_end_call -> .)
    ,               reduce using rule 58 (f_end_call -> .)
    {               reduce using rule 58 (f_end_call -> .)

    f_end_call                     shift and go to state 245

state 222

    (124) to_num -> TO_NUMBER ( STR . f_string )
    (136) f_string -> .

    )               reduce using rule 136 (f_string -> .)

    f_string                       shift and go to state 246

state 223

    (125) to_num -> TO_NUMBER ( var . )

    )               shift and go to state 247


state 224

    (126) to_str -> TO_STRING ( expresion . )
    (86) expresion -> expresion . COMP f_oper exp f_expres

    )               shift and go to state 248
    COMP            shift and go to state 145


state 225

    (110) condicion -> IF ( expresion ) f_if . THEN { estatutos } condicionp f_endif

    THEN            shift and go to state 249


state 226

    (18) funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { cvars . estatutos } f_endfunc
    (12) cvars -> cvars . DEF tipo dimension : lista_id ;
    (47) estatutos -> . estatutos estatuto
    (48) estatutos -> . empty
    (138) empty -> .

    DEF             shift and go to state 50
    }               reduce using rule 138 (empty -> .)
    CALL            reduce using rule 138 (empty -> .)
    WHILE           reduce using rule 138 (empty -> .)
    FOR             reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    ID              reduce using rule 138 (empty -> .)

    estatutos                      shift and go to state 250
    empty                          shift and go to state 67

state 227

    (19) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { . cvars estatutos } f_endfunc
    (12) cvars -> . cvars DEF tipo dimension : lista_id ;
    (13) cvars -> . empty
    (138) empty -> .

    DEF             reduce using rule 138 (empty -> .)
    }               reduce using rule 138 (empty -> .)
    CALL            reduce using rule 138 (empty -> .)
    WHILE           reduce using rule 138 (empty -> .)
    FOR             reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    ID              reduce using rule 138 (empty -> .)

    cvars                          shift and go to state 251
    empty                          shift and go to state 40

state 228

    (72) var -> ID f_varobj : ID f_verify_type_composite indexacion . f_end_check
    (76) f_end_check -> .

    =               reduce using rule 76 (f_end_check -> .)
    &               reduce using rule 76 (f_end_check -> .)
    OPFACT          reduce using rule 76 (f_end_check -> .)
    OPTERM          reduce using rule 76 (f_end_check -> .)
    COMP            reduce using rule 76 (f_end_check -> .)
    TO              reduce using rule 76 (f_end_check -> .)
    )               reduce using rule 76 (f_end_check -> .)
    ;               reduce using rule 76 (f_end_check -> .)
    ]               reduce using rule 76 (f_end_check -> .)
    ,               reduce using rule 76 (f_end_check -> .)
    {               reduce using rule 76 (f_end_check -> .)

    f_end_check                    shift and go to state 252

state 229

    (77) indexacion -> [ f_start_array expresion f_index . ] f_end_array
    (78) indexacion -> [ f_start_array expresion f_index . ] [ f_next_index expresion f_index ] f_end_array

    ]               shift and go to state 253


state 230

    (60) func -> ID f_verify_func ( args ) .

    ;               reduce using rule 60 (func -> ID f_verify_func ( args ) .)
    &               reduce using rule 60 (func -> ID f_verify_func ( args ) .)
    OPFACT          reduce using rule 60 (func -> ID f_verify_func ( args ) .)
    OPTERM          reduce using rule 60 (func -> ID f_verify_func ( args ) .)
    COMP            reduce using rule 60 (func -> ID f_verify_func ( args ) .)
    TO              reduce using rule 60 (func -> ID f_verify_func ( args ) .)
    )               reduce using rule 60 (func -> ID f_verify_func ( args ) .)
    ]               reduce using rule 60 (func -> ID f_verify_func ( args ) .)
    ,               reduce using rule 60 (func -> ID f_verify_func ( args ) .)
    {               reduce using rule 60 (func -> ID f_verify_func ( args ) .)


state 231

    (65) args -> args_list f_end_args .

    )               reduce using rule 65 (args -> args_list f_end_args .)


state 232

    (68) args_list -> args_list , . expresion f_arg
    (85) expresion -> . exp
    (86) expresion -> . expresion COMP f_oper exp f_expres
    (88) exp -> . term
    (89) exp -> . exp OPTERM f_oper term f_exp
    (91) term -> . fact
    (92) term -> . term OPFACT f_oper fact f_term
    (95) fact -> . ( f_lparen expresion ) f_rparen
    (96) fact -> . var
    (97) fact -> . NUM f_fact
    (98) fact -> . OPTERM NUM
    (99) fact -> . CALL func f_gosub f_return_val f_end_call f_end_check
    (100) fact -> . CALL to_num
    (101) fact -> . CALL to_str
    (102) fact -> . STR f_string
    (103) fact -> . fact & f_oper var f_concat
    (104) fact -> . fact & f_oper STR f_string f_concat
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (73) var -> . ID f_verify_type indexacion f_end_check

    (               shift and go to state 118
    NUM             shift and go to state 120
    OPTERM          shift and go to state 116
    CALL            shift and go to state 121
    STR             shift and go to state 122
    ID              shift and go to state 78

    expresion                      shift and go to state 254
    exp                            shift and go to state 114
    term                           shift and go to state 115
    fact                           shift and go to state 117
    var                            shift and go to state 119

state 233

    (67) args_list -> expresion f_arg .

    ,               reduce using rule 67 (args_list -> expresion f_arg .)
    )               reduce using rule 67 (args_list -> expresion f_arg .)


state 234

    (61) func -> ID f_varobj : ID f_verify_func_composite . ( args )

    (               shift and go to state 255


state 235

    (128) write -> PRINT ( write_list ) f_call_empty_print .

    ;               reduce using rule 128 (write -> PRINT ( write_list ) f_call_empty_print .)


state 236

    (131) write_list -> write_list & write_listp .

    )               reduce using rule 131 (write_list -> write_list & write_listp .)
    &               reduce using rule 131 (write_list -> write_list & write_listp .)


state 237

    (116) while -> WHILE f_while ( expresion f_exprwhile ) . DO { estatutos } f_endwhile

    DO              shift and go to state 256


state 238

    (120) for -> FOR expresion f_for_start TO expresion f_for_to . { estatutos } f_for_end

    {               shift and go to state 257


state 239

    (86) expresion -> expresion COMP f_oper exp f_expres .

    COMP            reduce using rule 86 (expresion -> expresion COMP f_oper exp f_expres .)
    TO              reduce using rule 86 (expresion -> expresion COMP f_oper exp f_expres .)
    )               reduce using rule 86 (expresion -> expresion COMP f_oper exp f_expres .)
    ;               reduce using rule 86 (expresion -> expresion COMP f_oper exp f_expres .)
    ]               reduce using rule 86 (expresion -> expresion COMP f_oper exp f_expres .)
    ,               reduce using rule 86 (expresion -> expresion COMP f_oper exp f_expres .)
    {               reduce using rule 86 (expresion -> expresion COMP f_oper exp f_expres .)


state 240

    (89) exp -> exp OPTERM f_oper term f_exp .

    OPTERM          reduce using rule 89 (exp -> exp OPTERM f_oper term f_exp .)
    COMP            reduce using rule 89 (exp -> exp OPTERM f_oper term f_exp .)
    TO              reduce using rule 89 (exp -> exp OPTERM f_oper term f_exp .)
    )               reduce using rule 89 (exp -> exp OPTERM f_oper term f_exp .)
    ;               reduce using rule 89 (exp -> exp OPTERM f_oper term f_exp .)
    ]               reduce using rule 89 (exp -> exp OPTERM f_oper term f_exp .)
    ,               reduce using rule 89 (exp -> exp OPTERM f_oper term f_exp .)
    {               reduce using rule 89 (exp -> exp OPTERM f_oper term f_exp .)


state 241

    (92) term -> term OPFACT f_oper fact f_term .

    OPFACT          reduce using rule 92 (term -> term OPFACT f_oper fact f_term .)
    OPTERM          reduce using rule 92 (term -> term OPFACT f_oper fact f_term .)
    COMP            reduce using rule 92 (term -> term OPFACT f_oper fact f_term .)
    TO              reduce using rule 92 (term -> term OPFACT f_oper fact f_term .)
    )               reduce using rule 92 (term -> term OPFACT f_oper fact f_term .)
    ;               reduce using rule 92 (term -> term OPFACT f_oper fact f_term .)
    ]               reduce using rule 92 (term -> term OPFACT f_oper fact f_term .)
    ,               reduce using rule 92 (term -> term OPFACT f_oper fact f_term .)
    {               reduce using rule 92 (term -> term OPFACT f_oper fact f_term .)


state 242

    (103) fact -> fact & f_oper var f_concat .

    &               reduce using rule 103 (fact -> fact & f_oper var f_concat .)
    OPFACT          reduce using rule 103 (fact -> fact & f_oper var f_concat .)
    OPTERM          reduce using rule 103 (fact -> fact & f_oper var f_concat .)
    COMP            reduce using rule 103 (fact -> fact & f_oper var f_concat .)
    TO              reduce using rule 103 (fact -> fact & f_oper var f_concat .)
    )               reduce using rule 103 (fact -> fact & f_oper var f_concat .)
    ;               reduce using rule 103 (fact -> fact & f_oper var f_concat .)
    ]               reduce using rule 103 (fact -> fact & f_oper var f_concat .)
    ,               reduce using rule 103 (fact -> fact & f_oper var f_concat .)
    {               reduce using rule 103 (fact -> fact & f_oper var f_concat .)


state 243

    (104) fact -> fact & f_oper STR f_string . f_concat
    (105) f_concat -> .

    &               reduce using rule 105 (f_concat -> .)
    OPFACT          reduce using rule 105 (f_concat -> .)
    OPTERM          reduce using rule 105 (f_concat -> .)
    COMP            reduce using rule 105 (f_concat -> .)
    TO              reduce using rule 105 (f_concat -> .)
    )               reduce using rule 105 (f_concat -> .)
    ;               reduce using rule 105 (f_concat -> .)
    ]               reduce using rule 105 (f_concat -> .)
    ,               reduce using rule 105 (f_concat -> .)
    {               reduce using rule 105 (f_concat -> .)

    f_concat                       shift and go to state 258

state 244

    (95) fact -> ( f_lparen expresion ) f_rparen .

    &               reduce using rule 95 (fact -> ( f_lparen expresion ) f_rparen .)
    OPFACT          reduce using rule 95 (fact -> ( f_lparen expresion ) f_rparen .)
    OPTERM          reduce using rule 95 (fact -> ( f_lparen expresion ) f_rparen .)
    COMP            reduce using rule 95 (fact -> ( f_lparen expresion ) f_rparen .)
    TO              reduce using rule 95 (fact -> ( f_lparen expresion ) f_rparen .)
    )               reduce using rule 95 (fact -> ( f_lparen expresion ) f_rparen .)
    ;               reduce using rule 95 (fact -> ( f_lparen expresion ) f_rparen .)
    ]               reduce using rule 95 (fact -> ( f_lparen expresion ) f_rparen .)
    ,               reduce using rule 95 (fact -> ( f_lparen expresion ) f_rparen .)
    {               reduce using rule 95 (fact -> ( f_lparen expresion ) f_rparen .)


state 245

    (99) fact -> CALL func f_gosub f_return_val f_end_call . f_end_check
    (76) f_end_check -> .

    &               reduce using rule 76 (f_end_check -> .)
    OPFACT          reduce using rule 76 (f_end_check -> .)
    OPTERM          reduce using rule 76 (f_end_check -> .)
    COMP            reduce using rule 76 (f_end_check -> .)
    TO              reduce using rule 76 (f_end_check -> .)
    )               reduce using rule 76 (f_end_check -> .)
    ;               reduce using rule 76 (f_end_check -> .)
    ]               reduce using rule 76 (f_end_check -> .)
    ,               reduce using rule 76 (f_end_check -> .)
    {               reduce using rule 76 (f_end_check -> .)

    f_end_check                    shift and go to state 259

state 246

    (124) to_num -> TO_NUMBER ( STR f_string . )

    )               shift and go to state 260


state 247

    (125) to_num -> TO_NUMBER ( var ) .

    &               reduce using rule 125 (to_num -> TO_NUMBER ( var ) .)
    OPFACT          reduce using rule 125 (to_num -> TO_NUMBER ( var ) .)
    OPTERM          reduce using rule 125 (to_num -> TO_NUMBER ( var ) .)
    COMP            reduce using rule 125 (to_num -> TO_NUMBER ( var ) .)
    TO              reduce using rule 125 (to_num -> TO_NUMBER ( var ) .)
    )               reduce using rule 125 (to_num -> TO_NUMBER ( var ) .)
    ;               reduce using rule 125 (to_num -> TO_NUMBER ( var ) .)
    ]               reduce using rule 125 (to_num -> TO_NUMBER ( var ) .)
    ,               reduce using rule 125 (to_num -> TO_NUMBER ( var ) .)
    {               reduce using rule 125 (to_num -> TO_NUMBER ( var ) .)


state 248

    (126) to_str -> TO_STRING ( expresion ) .

    &               reduce using rule 126 (to_str -> TO_STRING ( expresion ) .)
    OPFACT          reduce using rule 126 (to_str -> TO_STRING ( expresion ) .)
    OPTERM          reduce using rule 126 (to_str -> TO_STRING ( expresion ) .)
    COMP            reduce using rule 126 (to_str -> TO_STRING ( expresion ) .)
    TO              reduce using rule 126 (to_str -> TO_STRING ( expresion ) .)
    )               reduce using rule 126 (to_str -> TO_STRING ( expresion ) .)
    ;               reduce using rule 126 (to_str -> TO_STRING ( expresion ) .)
    ]               reduce using rule 126 (to_str -> TO_STRING ( expresion ) .)
    ,               reduce using rule 126 (to_str -> TO_STRING ( expresion ) .)
    {               reduce using rule 126 (to_str -> TO_STRING ( expresion ) .)


state 249

    (110) condicion -> IF ( expresion ) f_if THEN . { estatutos } condicionp f_endif

    {               shift and go to state 261


state 250

    (18) funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { cvars estatutos . } f_endfunc
    (47) estatutos -> estatutos . estatuto
    (49) estatuto -> . asignacion
    (50) estatuto -> . while
    (51) estatuto -> . for
    (52) estatuto -> . condicion
    (53) estatuto -> . CALL call_func ;
    (71) asignacion -> . var = f_oper expresion ;
    (116) while -> . WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (120) for -> . FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (110) condicion -> . IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (73) var -> . ID f_verify_type indexacion f_end_check

    }               shift and go to state 262
    CALL            shift and go to state 85
    WHILE           shift and go to state 87
    FOR             shift and go to state 88
    IF              shift and go to state 89
    ID              shift and go to state 78

    estatuto                       shift and go to state 80
    asignacion                     shift and go to state 81
    while                          shift and go to state 82
    for                            shift and go to state 83
    condicion                      shift and go to state 84
    var                            shift and go to state 86

state 251

    (19) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { cvars . estatutos } f_endfunc
    (12) cvars -> cvars . DEF tipo dimension : lista_id ;
    (47) estatutos -> . estatutos estatuto
    (48) estatutos -> . empty
    (138) empty -> .

    DEF             shift and go to state 50
    }               reduce using rule 138 (empty -> .)
    CALL            reduce using rule 138 (empty -> .)
    WHILE           reduce using rule 138 (empty -> .)
    FOR             reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    ID              reduce using rule 138 (empty -> .)

    estatutos                      shift and go to state 263
    empty                          shift and go to state 67

state 252

    (72) var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .

    =               reduce using rule 72 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)
    &               reduce using rule 72 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)
    OPFACT          reduce using rule 72 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)
    OPTERM          reduce using rule 72 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)
    COMP            reduce using rule 72 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)
    TO              reduce using rule 72 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)
    )               reduce using rule 72 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)
    ;               reduce using rule 72 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)
    ]               reduce using rule 72 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)
    ,               reduce using rule 72 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)
    {               reduce using rule 72 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)


state 253

    (77) indexacion -> [ f_start_array expresion f_index ] . f_end_array
    (78) indexacion -> [ f_start_array expresion f_index ] . [ f_next_index expresion f_index ] f_end_array
    (84) f_end_array -> .

    [               shift and go to state 264
    =               reduce using rule 84 (f_end_array -> .)
    &               reduce using rule 84 (f_end_array -> .)
    OPFACT          reduce using rule 84 (f_end_array -> .)
    OPTERM          reduce using rule 84 (f_end_array -> .)
    COMP            reduce using rule 84 (f_end_array -> .)
    TO              reduce using rule 84 (f_end_array -> .)
    )               reduce using rule 84 (f_end_array -> .)
    ;               reduce using rule 84 (f_end_array -> .)
    ]               reduce using rule 84 (f_end_array -> .)
    ,               reduce using rule 84 (f_end_array -> .)
    {               reduce using rule 84 (f_end_array -> .)

    f_end_array                    shift and go to state 265

state 254

    (68) args_list -> args_list , expresion . f_arg
    (86) expresion -> expresion . COMP f_oper exp f_expres
    (69) f_arg -> .

    COMP            shift and go to state 145
    ,               reduce using rule 69 (f_arg -> .)
    )               reduce using rule 69 (f_arg -> .)

    f_arg                          shift and go to state 266

state 255

    (61) func -> ID f_varobj : ID f_verify_func_composite ( . args )
    (65) args -> . args_list f_end_args
    (66) args -> . f_end_args
    (67) args_list -> . expresion f_arg
    (68) args_list -> . args_list , expresion f_arg
    (70) f_end_args -> .
    (85) expresion -> . exp
    (86) expresion -> . expresion COMP f_oper exp f_expres
    (88) exp -> . term
    (89) exp -> . exp OPTERM f_oper term f_exp
    (91) term -> . fact
    (92) term -> . term OPFACT f_oper fact f_term
    (95) fact -> . ( f_lparen expresion ) f_rparen
    (96) fact -> . var
    (97) fact -> . NUM f_fact
    (98) fact -> . OPTERM NUM
    (99) fact -> . CALL func f_gosub f_return_val f_end_call f_end_check
    (100) fact -> . CALL to_num
    (101) fact -> . CALL to_str
    (102) fact -> . STR f_string
    (103) fact -> . fact & f_oper var f_concat
    (104) fact -> . fact & f_oper STR f_string f_concat
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (73) var -> . ID f_verify_type indexacion f_end_check

    )               reduce using rule 70 (f_end_args -> .)
    (               shift and go to state 118
    NUM             shift and go to state 120
    OPTERM          shift and go to state 116
    CALL            shift and go to state 121
    STR             shift and go to state 122
    ID              shift and go to state 78

    args                           shift and go to state 267
    args_list                      shift and go to state 201
    f_end_args                     shift and go to state 202
    expresion                      shift and go to state 203
    exp                            shift and go to state 114
    term                           shift and go to state 115
    fact                           shift and go to state 117
    var                            shift and go to state 119

state 256

    (116) while -> WHILE f_while ( expresion f_exprwhile ) DO . { estatutos } f_endwhile

    {               shift and go to state 268


state 257

    (120) for -> FOR expresion f_for_start TO expresion f_for_to { . estatutos } f_for_end
    (47) estatutos -> . estatutos estatuto
    (48) estatutos -> . empty
    (138) empty -> .

    }               reduce using rule 138 (empty -> .)
    CALL            reduce using rule 138 (empty -> .)
    WHILE           reduce using rule 138 (empty -> .)
    FOR             reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    ID              reduce using rule 138 (empty -> .)

    estatutos                      shift and go to state 269
    empty                          shift and go to state 67

state 258

    (104) fact -> fact & f_oper STR f_string f_concat .

    &               reduce using rule 104 (fact -> fact & f_oper STR f_string f_concat .)
    OPFACT          reduce using rule 104 (fact -> fact & f_oper STR f_string f_concat .)
    OPTERM          reduce using rule 104 (fact -> fact & f_oper STR f_string f_concat .)
    COMP            reduce using rule 104 (fact -> fact & f_oper STR f_string f_concat .)
    TO              reduce using rule 104 (fact -> fact & f_oper STR f_string f_concat .)
    )               reduce using rule 104 (fact -> fact & f_oper STR f_string f_concat .)
    ;               reduce using rule 104 (fact -> fact & f_oper STR f_string f_concat .)
    ]               reduce using rule 104 (fact -> fact & f_oper STR f_string f_concat .)
    ,               reduce using rule 104 (fact -> fact & f_oper STR f_string f_concat .)
    {               reduce using rule 104 (fact -> fact & f_oper STR f_string f_concat .)


state 259

    (99) fact -> CALL func f_gosub f_return_val f_end_call f_end_check .

    &               reduce using rule 99 (fact -> CALL func f_gosub f_return_val f_end_call f_end_check .)
    OPFACT          reduce using rule 99 (fact -> CALL func f_gosub f_return_val f_end_call f_end_check .)
    OPTERM          reduce using rule 99 (fact -> CALL func f_gosub f_return_val f_end_call f_end_check .)
    COMP            reduce using rule 99 (fact -> CALL func f_gosub f_return_val f_end_call f_end_check .)
    TO              reduce using rule 99 (fact -> CALL func f_gosub f_return_val f_end_call f_end_check .)
    )               reduce using rule 99 (fact -> CALL func f_gosub f_return_val f_end_call f_end_check .)
    ;               reduce using rule 99 (fact -> CALL func f_gosub f_return_val f_end_call f_end_check .)
    ]               reduce using rule 99 (fact -> CALL func f_gosub f_return_val f_end_call f_end_check .)
    ,               reduce using rule 99 (fact -> CALL func f_gosub f_return_val f_end_call f_end_check .)
    {               reduce using rule 99 (fact -> CALL func f_gosub f_return_val f_end_call f_end_check .)


state 260

    (124) to_num -> TO_NUMBER ( STR f_string ) .

    &               reduce using rule 124 (to_num -> TO_NUMBER ( STR f_string ) .)
    OPFACT          reduce using rule 124 (to_num -> TO_NUMBER ( STR f_string ) .)
    OPTERM          reduce using rule 124 (to_num -> TO_NUMBER ( STR f_string ) .)
    COMP            reduce using rule 124 (to_num -> TO_NUMBER ( STR f_string ) .)
    TO              reduce using rule 124 (to_num -> TO_NUMBER ( STR f_string ) .)
    )               reduce using rule 124 (to_num -> TO_NUMBER ( STR f_string ) .)
    ;               reduce using rule 124 (to_num -> TO_NUMBER ( STR f_string ) .)
    ]               reduce using rule 124 (to_num -> TO_NUMBER ( STR f_string ) .)
    ,               reduce using rule 124 (to_num -> TO_NUMBER ( STR f_string ) .)
    {               reduce using rule 124 (to_num -> TO_NUMBER ( STR f_string ) .)


state 261

    (110) condicion -> IF ( expresion ) f_if THEN { . estatutos } condicionp f_endif
    (47) estatutos -> . estatutos estatuto
    (48) estatutos -> . empty
    (138) empty -> .

    }               reduce using rule 138 (empty -> .)
    CALL            reduce using rule 138 (empty -> .)
    WHILE           reduce using rule 138 (empty -> .)
    FOR             reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    ID              reduce using rule 138 (empty -> .)

    estatutos                      shift and go to state 270
    empty                          shift and go to state 67

state 262

    (18) funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { cvars estatutos } . f_endfunc
    (23) f_endfunc -> .

    MAIN            reduce using rule 23 (f_endfunc -> .)
    FUNC            reduce using rule 23 (f_endfunc -> .)
    }               reduce using rule 23 (f_endfunc -> .)

    f_endfunc                      shift and go to state 271

state 263

    (19) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { cvars estatutos . } f_endfunc
    (47) estatutos -> estatutos . estatuto
    (49) estatuto -> . asignacion
    (50) estatuto -> . while
    (51) estatuto -> . for
    (52) estatuto -> . condicion
    (53) estatuto -> . CALL call_func ;
    (71) asignacion -> . var = f_oper expresion ;
    (116) while -> . WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (120) for -> . FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (110) condicion -> . IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (73) var -> . ID f_verify_type indexacion f_end_check

    }               shift and go to state 272
    CALL            shift and go to state 85
    WHILE           shift and go to state 87
    FOR             shift and go to state 88
    IF              shift and go to state 89
    ID              shift and go to state 78

    estatuto                       shift and go to state 80
    asignacion                     shift and go to state 81
    while                          shift and go to state 82
    for                            shift and go to state 83
    condicion                      shift and go to state 84
    var                            shift and go to state 86

state 264

    (78) indexacion -> [ f_start_array expresion f_index ] [ . f_next_index expresion f_index ] f_end_array
    (83) f_next_index -> .

    (               reduce using rule 83 (f_next_index -> .)
    NUM             reduce using rule 83 (f_next_index -> .)
    OPTERM          reduce using rule 83 (f_next_index -> .)
    CALL            reduce using rule 83 (f_next_index -> .)
    STR             reduce using rule 83 (f_next_index -> .)
    ID              reduce using rule 83 (f_next_index -> .)

    f_next_index                   shift and go to state 273

state 265

    (77) indexacion -> [ f_start_array expresion f_index ] f_end_array .

    =               reduce using rule 77 (indexacion -> [ f_start_array expresion f_index ] f_end_array .)
    &               reduce using rule 77 (indexacion -> [ f_start_array expresion f_index ] f_end_array .)
    OPFACT          reduce using rule 77 (indexacion -> [ f_start_array expresion f_index ] f_end_array .)
    OPTERM          reduce using rule 77 (indexacion -> [ f_start_array expresion f_index ] f_end_array .)
    COMP            reduce using rule 77 (indexacion -> [ f_start_array expresion f_index ] f_end_array .)
    TO              reduce using rule 77 (indexacion -> [ f_start_array expresion f_index ] f_end_array .)
    )               reduce using rule 77 (indexacion -> [ f_start_array expresion f_index ] f_end_array .)
    ;               reduce using rule 77 (indexacion -> [ f_start_array expresion f_index ] f_end_array .)
    ]               reduce using rule 77 (indexacion -> [ f_start_array expresion f_index ] f_end_array .)
    ,               reduce using rule 77 (indexacion -> [ f_start_array expresion f_index ] f_end_array .)
    {               reduce using rule 77 (indexacion -> [ f_start_array expresion f_index ] f_end_array .)


state 266

    (68) args_list -> args_list , expresion f_arg .

    ,               reduce using rule 68 (args_list -> args_list , expresion f_arg .)
    )               reduce using rule 68 (args_list -> args_list , expresion f_arg .)


state 267

    (61) func -> ID f_varobj : ID f_verify_func_composite ( args . )

    )               shift and go to state 274


state 268

    (116) while -> WHILE f_while ( expresion f_exprwhile ) DO { . estatutos } f_endwhile
    (47) estatutos -> . estatutos estatuto
    (48) estatutos -> . empty
    (138) empty -> .

    }               reduce using rule 138 (empty -> .)
    CALL            reduce using rule 138 (empty -> .)
    WHILE           reduce using rule 138 (empty -> .)
    FOR             reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    ID              reduce using rule 138 (empty -> .)

    estatutos                      shift and go to state 275
    empty                          shift and go to state 67

state 269

    (120) for -> FOR expresion f_for_start TO expresion f_for_to { estatutos . } f_for_end
    (47) estatutos -> estatutos . estatuto
    (49) estatuto -> . asignacion
    (50) estatuto -> . while
    (51) estatuto -> . for
    (52) estatuto -> . condicion
    (53) estatuto -> . CALL call_func ;
    (71) asignacion -> . var = f_oper expresion ;
    (116) while -> . WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (120) for -> . FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (110) condicion -> . IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (73) var -> . ID f_verify_type indexacion f_end_check

    }               shift and go to state 276
    CALL            shift and go to state 85
    WHILE           shift and go to state 87
    FOR             shift and go to state 88
    IF              shift and go to state 89
    ID              shift and go to state 78

    estatuto                       shift and go to state 80
    asignacion                     shift and go to state 81
    while                          shift and go to state 82
    for                            shift and go to state 83
    condicion                      shift and go to state 84
    var                            shift and go to state 86

state 270

    (110) condicion -> IF ( expresion ) f_if THEN { estatutos . } condicionp f_endif
    (47) estatutos -> estatutos . estatuto
    (49) estatuto -> . asignacion
    (50) estatuto -> . while
    (51) estatuto -> . for
    (52) estatuto -> . condicion
    (53) estatuto -> . CALL call_func ;
    (71) asignacion -> . var = f_oper expresion ;
    (116) while -> . WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (120) for -> . FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (110) condicion -> . IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (73) var -> . ID f_verify_type indexacion f_end_check

    }               shift and go to state 277
    CALL            shift and go to state 85
    WHILE           shift and go to state 87
    FOR             shift and go to state 88
    IF              shift and go to state 89
    ID              shift and go to state 78

    estatuto                       shift and go to state 80
    asignacion                     shift and go to state 81
    while                          shift and go to state 82
    for                            shift and go to state 83
    condicion                      shift and go to state 84
    var                            shift and go to state 86

state 271

    (18) funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { cvars estatutos } f_endfunc .

    MAIN            reduce using rule 18 (funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { cvars estatutos } f_endfunc .)
    FUNC            reduce using rule 18 (funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { cvars estatutos } f_endfunc .)
    }               reduce using rule 18 (funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { cvars estatutos } f_endfunc .)


state 272

    (19) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { cvars estatutos } . f_endfunc
    (23) f_endfunc -> .

    MAIN            reduce using rule 23 (f_endfunc -> .)
    FUNC            reduce using rule 23 (f_endfunc -> .)
    }               reduce using rule 23 (f_endfunc -> .)

    f_endfunc                      shift and go to state 278

state 273

    (78) indexacion -> [ f_start_array expresion f_index ] [ f_next_index . expresion f_index ] f_end_array
    (85) expresion -> . exp
    (86) expresion -> . expresion COMP f_oper exp f_expres
    (88) exp -> . term
    (89) exp -> . exp OPTERM f_oper term f_exp
    (91) term -> . fact
    (92) term -> . term OPFACT f_oper fact f_term
    (95) fact -> . ( f_lparen expresion ) f_rparen
    (96) fact -> . var
    (97) fact -> . NUM f_fact
    (98) fact -> . OPTERM NUM
    (99) fact -> . CALL func f_gosub f_return_val f_end_call f_end_check
    (100) fact -> . CALL to_num
    (101) fact -> . CALL to_str
    (102) fact -> . STR f_string
    (103) fact -> . fact & f_oper var f_concat
    (104) fact -> . fact & f_oper STR f_string f_concat
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (73) var -> . ID f_verify_type indexacion f_end_check

    (               shift and go to state 118
    NUM             shift and go to state 120
    OPTERM          shift and go to state 116
    CALL            shift and go to state 121
    STR             shift and go to state 122
    ID              shift and go to state 78

    expresion                      shift and go to state 279
    exp                            shift and go to state 114
    term                           shift and go to state 115
    fact                           shift and go to state 117
    var                            shift and go to state 119

state 274

    (61) func -> ID f_varobj : ID f_verify_func_composite ( args ) .

    ;               reduce using rule 61 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    &               reduce using rule 61 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    OPFACT          reduce using rule 61 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    OPTERM          reduce using rule 61 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    COMP            reduce using rule 61 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    TO              reduce using rule 61 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    )               reduce using rule 61 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    ]               reduce using rule 61 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    ,               reduce using rule 61 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    {               reduce using rule 61 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)


state 275

    (116) while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos . } f_endwhile
    (47) estatutos -> estatutos . estatuto
    (49) estatuto -> . asignacion
    (50) estatuto -> . while
    (51) estatuto -> . for
    (52) estatuto -> . condicion
    (53) estatuto -> . CALL call_func ;
    (71) asignacion -> . var = f_oper expresion ;
    (116) while -> . WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (120) for -> . FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (110) condicion -> . IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (73) var -> . ID f_verify_type indexacion f_end_check

    }               shift and go to state 280
    CALL            shift and go to state 85
    WHILE           shift and go to state 87
    FOR             shift and go to state 88
    IF              shift and go to state 89
    ID              shift and go to state 78

    estatuto                       shift and go to state 80
    asignacion                     shift and go to state 81
    while                          shift and go to state 82
    for                            shift and go to state 83
    condicion                      shift and go to state 84
    var                            shift and go to state 86

state 276

    (120) for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } . f_for_end
    (123) f_for_end -> .

    }               reduce using rule 123 (f_for_end -> .)
    CALL            reduce using rule 123 (f_for_end -> .)
    WHILE           reduce using rule 123 (f_for_end -> .)
    FOR             reduce using rule 123 (f_for_end -> .)
    IF              reduce using rule 123 (f_for_end -> .)
    ID              reduce using rule 123 (f_for_end -> .)

    f_for_end                      shift and go to state 281

state 277

    (110) condicion -> IF ( expresion ) f_if THEN { estatutos } . condicionp f_endif
    (111) condicionp -> . ELSE f_else { estatutos }
    (112) condicionp -> . empty
    (138) empty -> .

    ELSE            shift and go to state 283
    }               reduce using rule 138 (empty -> .)
    CALL            reduce using rule 138 (empty -> .)
    WHILE           reduce using rule 138 (empty -> .)
    FOR             reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    ID              reduce using rule 138 (empty -> .)

    condicionp                     shift and go to state 282
    empty                          shift and go to state 284

state 278

    (19) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { cvars estatutos } f_endfunc .

    MAIN            reduce using rule 19 (funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { cvars estatutos } f_endfunc .)
    FUNC            reduce using rule 19 (funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { cvars estatutos } f_endfunc .)
    }               reduce using rule 19 (funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { cvars estatutos } f_endfunc .)


state 279

    (78) indexacion -> [ f_start_array expresion f_index ] [ f_next_index expresion . f_index ] f_end_array
    (86) expresion -> expresion . COMP f_oper exp f_expres
    (82) f_index -> .

    COMP            shift and go to state 145
    ]               reduce using rule 82 (f_index -> .)

    f_index                        shift and go to state 285

state 280

    (116) while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } . f_endwhile
    (119) f_endwhile -> .

    }               reduce using rule 119 (f_endwhile -> .)
    CALL            reduce using rule 119 (f_endwhile -> .)
    WHILE           reduce using rule 119 (f_endwhile -> .)
    FOR             reduce using rule 119 (f_endwhile -> .)
    IF              reduce using rule 119 (f_endwhile -> .)
    ID              reduce using rule 119 (f_endwhile -> .)

    f_endwhile                     shift and go to state 286

state 281

    (120) for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end .

    }               reduce using rule 120 (for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end .)
    CALL            reduce using rule 120 (for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end .)
    WHILE           reduce using rule 120 (for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end .)
    FOR             reduce using rule 120 (for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end .)
    IF              reduce using rule 120 (for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end .)
    ID              reduce using rule 120 (for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end .)


state 282

    (110) condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp . f_endif
    (114) f_endif -> .

    }               reduce using rule 114 (f_endif -> .)
    CALL            reduce using rule 114 (f_endif -> .)
    WHILE           reduce using rule 114 (f_endif -> .)
    FOR             reduce using rule 114 (f_endif -> .)
    IF              reduce using rule 114 (f_endif -> .)
    ID              reduce using rule 114 (f_endif -> .)

    f_endif                        shift and go to state 287

state 283

    (111) condicionp -> ELSE . f_else { estatutos }
    (115) f_else -> .

    {               reduce using rule 115 (f_else -> .)

    f_else                         shift and go to state 288

state 284

    (112) condicionp -> empty .

    }               reduce using rule 112 (condicionp -> empty .)
    CALL            reduce using rule 112 (condicionp -> empty .)
    WHILE           reduce using rule 112 (condicionp -> empty .)
    FOR             reduce using rule 112 (condicionp -> empty .)
    IF              reduce using rule 112 (condicionp -> empty .)
    ID              reduce using rule 112 (condicionp -> empty .)


state 285

    (78) indexacion -> [ f_start_array expresion f_index ] [ f_next_index expresion f_index . ] f_end_array

    ]               shift and go to state 289


state 286

    (116) while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile .

    }               reduce using rule 116 (while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile .)
    CALL            reduce using rule 116 (while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile .)
    WHILE           reduce using rule 116 (while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile .)
    FOR             reduce using rule 116 (while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile .)
    IF              reduce using rule 116 (while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile .)
    ID              reduce using rule 116 (while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile .)


state 287

    (110) condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif .

    }               reduce using rule 110 (condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif .)
    CALL            reduce using rule 110 (condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif .)
    WHILE           reduce using rule 110 (condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif .)
    FOR             reduce using rule 110 (condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif .)
    IF              reduce using rule 110 (condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif .)
    ID              reduce using rule 110 (condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif .)


state 288

    (111) condicionp -> ELSE f_else . { estatutos }

    {               shift and go to state 290


state 289

    (78) indexacion -> [ f_start_array expresion f_index ] [ f_next_index expresion f_index ] . f_end_array
    (84) f_end_array -> .

    =               reduce using rule 84 (f_end_array -> .)
    &               reduce using rule 84 (f_end_array -> .)
    OPFACT          reduce using rule 84 (f_end_array -> .)
    OPTERM          reduce using rule 84 (f_end_array -> .)
    COMP            reduce using rule 84 (f_end_array -> .)
    TO              reduce using rule 84 (f_end_array -> .)
    )               reduce using rule 84 (f_end_array -> .)
    ;               reduce using rule 84 (f_end_array -> .)
    ]               reduce using rule 84 (f_end_array -> .)
    ,               reduce using rule 84 (f_end_array -> .)
    {               reduce using rule 84 (f_end_array -> .)

    f_end_array                    shift and go to state 291

state 290

    (111) condicionp -> ELSE f_else { . estatutos }
    (47) estatutos -> . estatutos estatuto
    (48) estatutos -> . empty
    (138) empty -> .

    }               reduce using rule 138 (empty -> .)
    CALL            reduce using rule 138 (empty -> .)
    WHILE           reduce using rule 138 (empty -> .)
    FOR             reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    ID              reduce using rule 138 (empty -> .)

    estatutos                      shift and go to state 292
    empty                          shift and go to state 67

state 291

    (78) indexacion -> [ f_start_array expresion f_index ] [ f_next_index expresion f_index ] f_end_array .

    =               reduce using rule 78 (indexacion -> [ f_start_array expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    &               reduce using rule 78 (indexacion -> [ f_start_array expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    OPFACT          reduce using rule 78 (indexacion -> [ f_start_array expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    OPTERM          reduce using rule 78 (indexacion -> [ f_start_array expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    COMP            reduce using rule 78 (indexacion -> [ f_start_array expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    TO              reduce using rule 78 (indexacion -> [ f_start_array expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    )               reduce using rule 78 (indexacion -> [ f_start_array expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    ;               reduce using rule 78 (indexacion -> [ f_start_array expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    ]               reduce using rule 78 (indexacion -> [ f_start_array expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    ,               reduce using rule 78 (indexacion -> [ f_start_array expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    {               reduce using rule 78 (indexacion -> [ f_start_array expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)


state 292

    (111) condicionp -> ELSE f_else { estatutos . }
    (47) estatutos -> estatutos . estatuto
    (49) estatuto -> . asignacion
    (50) estatuto -> . while
    (51) estatuto -> . for
    (52) estatuto -> . condicion
    (53) estatuto -> . CALL call_func ;
    (71) asignacion -> . var = f_oper expresion ;
    (116) while -> . WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (120) for -> . FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (110) condicion -> . IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
    (72) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (73) var -> . ID f_verify_type indexacion f_end_check

    }               shift and go to state 293
    CALL            shift and go to state 85
    WHILE           shift and go to state 87
    FOR             shift and go to state 88
    IF              shift and go to state 89
    ID              shift and go to state 78

    estatuto                       shift and go to state 80
    asignacion                     shift and go to state 81
    while                          shift and go to state 82
    for                            shift and go to state 83
    condicion                      shift and go to state 84
    var                            shift and go to state 86

state 293

    (111) condicionp -> ELSE f_else { estatutos } .

    }               reduce using rule 111 (condicionp -> ELSE f_else { estatutos } .)
    CALL            reduce using rule 111 (condicionp -> ELSE f_else { estatutos } .)
    WHILE           reduce using rule 111 (condicionp -> ELSE f_else { estatutos } .)
    FOR             reduce using rule 111 (condicionp -> ELSE f_else { estatutos } .)
    IF              reduce using rule 111 (condicionp -> ELSE f_else { estatutos } .)
    ID              reduce using rule 111 (condicionp -> ELSE f_else { estatutos } .)

