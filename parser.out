Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN ( ) { estatutos } END f_end ;
Rule 2     f_start -> <empty>
Rule 3     f_prog -> <empty>
Rule 4     f_end -> <empty>
Rule 5     clases -> clases clase
Rule 6     clases -> empty
Rule 7     clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass
Rule 8     clase -> TYPE ID f_startclass { cvars f_cvars funciones } f_endclass
Rule 9     f_startclass -> <empty>
Rule 10    f_clasepadre -> <empty>
Rule 11    f_cvars -> <empty>
Rule 12    f_endclass -> <empty>
Rule 13    funciones -> funciones funcion
Rule 14    funciones -> empty
Rule 15    funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc
Rule 16    funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc
Rule 17    f_startfunc -> <empty>
Rule 18    f_nothing -> <empty>
Rule 19    f_tipofunc -> <empty>
Rule 20    f_endfunc -> <empty>
Rule 21    vars -> vars DEF tipo dimension : lista_id ;
Rule 22    vars -> vars DEF ID f_varsobj : lista_id ;
Rule 23    vars -> empty
Rule 24    f_varsobj -> <empty>
Rule 25    cvars -> cvars DEF tipo dimension : lista_id ;
Rule 26    cvars -> empty
Rule 27    lista_id -> ID f_vars
Rule 28    lista_id -> lista_id , ID f_vars
Rule 29    f_vars -> <empty>
Rule 30    dimension -> [ expresion f_dim1 ] f_onedim
Rule 31    dimension -> [ expresion f_dim1 ] [ expresion f_dim2 ] f_twodim
Rule 32    dimension -> empty
Rule 33    f_dim1 -> <empty>
Rule 34    f_dim2 -> <empty>
Rule 35    f_onedim -> <empty>
Rule 36    f_twodim -> <empty>
Rule 37    tipo -> NUMBER
Rule 38    tipo -> STRING
Rule 39    params -> pparams
Rule 40    params -> empty
Rule 41    pparams -> tipo ID f_param
Rule 42    pparams -> pparams , tipo ID f_param
Rule 43    f_param -> <empty>
Rule 44    estatutos -> estatutos estatuto
Rule 45    estatutos -> empty
Rule 46    estatuto -> asignacion
Rule 47    estatuto -> while
Rule 48    estatuto -> for
Rule 49    estatuto -> condicion
Rule 50    estatuto -> CALL call_func ;
Rule 51    call_func -> func
Rule 52    call_func -> input
Rule 53    call_func -> write
Rule 54    call_func -> to_num
Rule 55    call_func -> to_str
Rule 56    call_func -> return
Rule 57    func -> ID ( args )
Rule 58    func -> ID : ID ( args )
Rule 59    args -> args_list
Rule 60    args -> empty
Rule 61    args_list -> expresion
Rule 62    args_list -> args_list , expresion
Rule 63    asignacion -> var = f_oper expresion ;
Rule 64    var -> ID f_varobj : ID f_verify_type_composite dimension
Rule 65    var -> ID f_verify_type dimension
Rule 66    f_varobj -> <empty>
Rule 67    f_verify_type -> <empty>
Rule 68    f_verify_type_composite -> <empty>
Rule 69    expresion -> exp
Rule 70    expresion -> expresion COMP f_oper exp f_expres
Rule 71    f_expres -> <empty>
Rule 72    exp -> term
Rule 73    exp -> exp OPTERM f_oper term f_exp
Rule 74    f_exp -> <empty>
Rule 75    term -> fact
Rule 76    term -> term OPFACT f_oper fact f_term
Rule 77    f_term -> <empty>
Rule 78    f_oper -> <empty>
Rule 79    fact -> ( lparen expresion ) rparen
Rule 80    fact -> var
Rule 81    fact -> NUM f_fact
Rule 82    fact -> OPTERM NUM
Rule 83    fact -> CALL call_func
Rule 84    lparen -> <empty>
Rule 85    rparen -> <empty>
Rule 86    f_fact -> <empty>
Rule 87    condicion -> IF ( expresion ) THEN { estatutos } condicionp
Rule 88    condicionp -> ELSE { estatutos }
Rule 89    condicionp -> empty
Rule 90    while -> WHILE ( expresion ) DO { estatutos }
Rule 91    for -> FOR expresion TO expresion { estatutos }
Rule 92    to_num -> TO_NUMBER ( STR )
Rule 93    to_num -> TO_NUMBER ( var )
Rule 94    to_str -> TO_STRING ( expresion )
Rule 95    input -> INPUT ( var )
Rule 96    write -> PRINT ( write_list )
Rule 97    write_list -> write_list & write_listp
Rule 98    write_list -> write_listp
Rule 99    write_listp -> STR
Rule 100   write_listp -> var
Rule 101   write_listp -> CALL to_str
Rule 102   return -> RET ( expresion )
Rule 103   empty -> <empty>

Terminals, with rules where they appear

&                    : 97
(                    : 1 15 16 57 58 79 87 90 92 93 94 95 96 102
)                    : 1 15 16 57 58 79 87 90 92 93 94 95 96 102
,                    : 28 42 62
:                    : 7 15 16 21 22 25 58 64
;                    : 1 1 21 22 25 50 63
=                    : 63
CALL                 : 50 83 101
COMP                 : 70
DEF                  : 21 22 25
DO                   : 90
ELSE                 : 88
END                  : 1
FOR                  : 91
FUNC                 : 15 16
ID                   : 1 7 7 8 15 16 22 27 28 41 42 57 58 58 64 64 65
IF                   : 87
INPUT                : 95
MAIN                 : 1
NOTHING              : 16
NUM                  : 81 82
NUMBER               : 37
OPFACT               : 76
OPTERM               : 73 82
PRINT                : 96
PROGRAM              : 1
RET                  : 102
STR                  : 92 99
STRING               : 38
THEN                 : 87
TO                   : 91
TO_NUMBER            : 92 93
TO_STRING            : 94
TYPE                 : 7 8
WHILE                : 90
[                    : 30 31 31
]                    : 30 31 31
error                : 
{                    : 1 7 8 15 16 87 88 90 91
}                    : 1 7 8 15 16 87 88 90 91

Nonterminals, with rules where they appear

args                 : 57 58
args_list            : 59 62
asignacion           : 46
call_func            : 50 83
clase                : 5
clases               : 1 5
condicion            : 49
condicionp           : 87
cvars                : 7 8 25
dimension            : 21 25 64 65
empty                : 6 14 23 26 32 40 45 60 89
estatuto             : 44
estatutos            : 1 15 16 44 87 88 90 91
exp                  : 69 70 73
expresion            : 30 31 31 61 62 63 70 79 87 90 91 91 94 102
f_clasepadre         : 7
f_cvars              : 7 8
f_dim1               : 30 31
f_dim2               : 31
f_end                : 1
f_endclass           : 7 8
f_endfunc            : 15 16
f_exp                : 73
f_expres             : 70
f_fact               : 81
f_nothing            : 16
f_onedim             : 30
f_oper               : 63 70 73 76
f_param              : 41 42
f_prog               : 1
f_start              : 1
f_startclass         : 7 8
f_startfunc          : 15 16
f_term               : 76
f_tipofunc           : 15 16
f_twodim             : 31
f_varobj             : 64
f_vars               : 27 28
f_varsobj            : 22
f_verify_type        : 65
f_verify_type_composite : 64
fact                 : 75 76
for                  : 48
func                 : 51
funcion              : 13
funciones            : 1 7 8 13
input                : 52
lista_id             : 21 22 25 28
lparen               : 79
params               : 15 16
pparams              : 39 42
return               : 56
rparen               : 79
start                : 0
term                 : 72 73 76
tipo                 : 15 21 25 41 42
to_num               : 54
to_str               : 55 101
var                  : 63 80 93 95 100
vars                 : 1 15 16 21 22
while                : 47
write                : 53
write_list           : 96 97
write_listp          : 97 98

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . PROGRAM f_start ID f_prog ; clases vars funciones MAIN ( ) { estatutos } END f_end ;

    PROGRAM         shift and go to state 2

    start                          shift and go to state 1

state 1

    (0) S' -> start .



state 2

    (1) start -> PROGRAM . f_start ID f_prog ; clases vars funciones MAIN ( ) { estatutos } END f_end ;
    (2) f_start -> .

    ID              reduce using rule 2 (f_start -> .)

    f_start                        shift and go to state 3

state 3

    (1) start -> PROGRAM f_start . ID f_prog ; clases vars funciones MAIN ( ) { estatutos } END f_end ;

    ID              shift and go to state 4


state 4

    (1) start -> PROGRAM f_start ID . f_prog ; clases vars funciones MAIN ( ) { estatutos } END f_end ;
    (3) f_prog -> .

    ;               reduce using rule 3 (f_prog -> .)

    f_prog                         shift and go to state 5

state 5

    (1) start -> PROGRAM f_start ID f_prog . ; clases vars funciones MAIN ( ) { estatutos } END f_end ;

    ;               shift and go to state 6


state 6

    (1) start -> PROGRAM f_start ID f_prog ; . clases vars funciones MAIN ( ) { estatutos } END f_end ;
    (5) clases -> . clases clase
    (6) clases -> . empty
    (103) empty -> .

    TYPE            reduce using rule 103 (empty -> .)
    DEF             reduce using rule 103 (empty -> .)
    MAIN            reduce using rule 103 (empty -> .)
    FUNC            reduce using rule 103 (empty -> .)

    clases                         shift and go to state 7
    empty                          shift and go to state 8

state 7

    (1) start -> PROGRAM f_start ID f_prog ; clases . vars funciones MAIN ( ) { estatutos } END f_end ;
    (5) clases -> clases . clase
    (21) vars -> . vars DEF tipo dimension : lista_id ;
    (22) vars -> . vars DEF ID f_varsobj : lista_id ;
    (23) vars -> . empty
    (7) clase -> . TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass
    (8) clase -> . TYPE ID f_startclass { cvars f_cvars funciones } f_endclass
    (103) empty -> .

    TYPE            shift and go to state 12
    DEF             reduce using rule 103 (empty -> .)
    MAIN            reduce using rule 103 (empty -> .)
    FUNC            reduce using rule 103 (empty -> .)

    vars                           shift and go to state 9
    clase                          shift and go to state 10
    empty                          shift and go to state 11

state 8

    (6) clases -> empty .

    TYPE            reduce using rule 6 (clases -> empty .)
    DEF             reduce using rule 6 (clases -> empty .)
    MAIN            reduce using rule 6 (clases -> empty .)
    FUNC            reduce using rule 6 (clases -> empty .)


state 9

    (1) start -> PROGRAM f_start ID f_prog ; clases vars . funciones MAIN ( ) { estatutos } END f_end ;
    (21) vars -> vars . DEF tipo dimension : lista_id ;
    (22) vars -> vars . DEF ID f_varsobj : lista_id ;
    (13) funciones -> . funciones funcion
    (14) funciones -> . empty
    (103) empty -> .

    DEF             shift and go to state 14
    MAIN            reduce using rule 103 (empty -> .)
    FUNC            reduce using rule 103 (empty -> .)

    funciones                      shift and go to state 13
    empty                          shift and go to state 15

state 10

    (5) clases -> clases clase .

    TYPE            reduce using rule 5 (clases -> clases clase .)
    DEF             reduce using rule 5 (clases -> clases clase .)
    MAIN            reduce using rule 5 (clases -> clases clase .)
    FUNC            reduce using rule 5 (clases -> clases clase .)


state 11

    (23) vars -> empty .

    DEF             reduce using rule 23 (vars -> empty .)
    MAIN            reduce using rule 23 (vars -> empty .)
    FUNC            reduce using rule 23 (vars -> empty .)
    }               reduce using rule 23 (vars -> empty .)
    CALL            reduce using rule 23 (vars -> empty .)
    WHILE           reduce using rule 23 (vars -> empty .)
    FOR             reduce using rule 23 (vars -> empty .)
    IF              reduce using rule 23 (vars -> empty .)
    ID              reduce using rule 23 (vars -> empty .)


state 12

    (7) clase -> TYPE . ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass
    (8) clase -> TYPE . ID f_startclass { cvars f_cvars funciones } f_endclass

    ID              shift and go to state 16


state 13

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones . MAIN ( ) { estatutos } END f_end ;
    (13) funciones -> funciones . funcion
    (15) funcion -> . FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc
    (16) funcion -> . FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc

    MAIN            shift and go to state 17
    FUNC            shift and go to state 19

    funcion                        shift and go to state 18

state 14

    (21) vars -> vars DEF . tipo dimension : lista_id ;
    (22) vars -> vars DEF . ID f_varsobj : lista_id ;
    (37) tipo -> . NUMBER
    (38) tipo -> . STRING

    ID              shift and go to state 21
    NUMBER          shift and go to state 22
    STRING          shift and go to state 23

    tipo                           shift and go to state 20

state 15

    (14) funciones -> empty .

    MAIN            reduce using rule 14 (funciones -> empty .)
    FUNC            reduce using rule 14 (funciones -> empty .)
    }               reduce using rule 14 (funciones -> empty .)


state 16

    (7) clase -> TYPE ID . f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass
    (8) clase -> TYPE ID . f_startclass { cvars f_cvars funciones } f_endclass
    (9) f_startclass -> .

    :               reduce using rule 9 (f_startclass -> .)
    {               reduce using rule 9 (f_startclass -> .)

    f_startclass                   shift and go to state 24

state 17

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN . ( ) { estatutos } END f_end ;

    (               shift and go to state 25


state 18

    (13) funciones -> funciones funcion .

    MAIN            reduce using rule 13 (funciones -> funciones funcion .)
    FUNC            reduce using rule 13 (funciones -> funciones funcion .)
    }               reduce using rule 13 (funciones -> funciones funcion .)


state 19

    (15) funcion -> FUNC . ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc
    (16) funcion -> FUNC . ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc

    ID              shift and go to state 26


state 20

    (21) vars -> vars DEF tipo . dimension : lista_id ;
    (30) dimension -> . [ expresion f_dim1 ] f_onedim
    (31) dimension -> . [ expresion f_dim1 ] [ expresion f_dim2 ] f_twodim
    (32) dimension -> . empty
    (103) empty -> .

    [               shift and go to state 28
    :               reduce using rule 103 (empty -> .)

    dimension                      shift and go to state 27
    empty                          shift and go to state 29

state 21

    (22) vars -> vars DEF ID . f_varsobj : lista_id ;
    (24) f_varsobj -> .

    :               reduce using rule 24 (f_varsobj -> .)

    f_varsobj                      shift and go to state 30

state 22

    (37) tipo -> NUMBER .

    [               reduce using rule 37 (tipo -> NUMBER .)
    :               reduce using rule 37 (tipo -> NUMBER .)
    ID              reduce using rule 37 (tipo -> NUMBER .)
    {               reduce using rule 37 (tipo -> NUMBER .)


state 23

    (38) tipo -> STRING .

    [               reduce using rule 38 (tipo -> STRING .)
    :               reduce using rule 38 (tipo -> STRING .)
    ID              reduce using rule 38 (tipo -> STRING .)
    {               reduce using rule 38 (tipo -> STRING .)


state 24

    (7) clase -> TYPE ID f_startclass . : ID f_clasepadre { cvars f_cvars funciones } f_endclass
    (8) clase -> TYPE ID f_startclass . { cvars f_cvars funciones } f_endclass

    :               shift and go to state 31
    {               shift and go to state 32


state 25

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN ( . ) { estatutos } END f_end ;

    )               shift and go to state 33


state 26

    (15) funcion -> FUNC ID . f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc
    (16) funcion -> FUNC ID . f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc
    (17) f_startfunc -> .

    (               reduce using rule 17 (f_startfunc -> .)

    f_startfunc                    shift and go to state 34

state 27

    (21) vars -> vars DEF tipo dimension . : lista_id ;

    :               shift and go to state 35


state 28

    (30) dimension -> [ . expresion f_dim1 ] f_onedim
    (31) dimension -> [ . expresion f_dim1 ] [ expresion f_dim2 ] f_twodim
    (69) expresion -> . exp
    (70) expresion -> . expresion COMP f_oper exp f_expres
    (72) exp -> . term
    (73) exp -> . exp OPTERM f_oper term f_exp
    (75) term -> . fact
    (76) term -> . term OPFACT f_oper fact f_term
    (79) fact -> . ( lparen expresion ) rparen
    (80) fact -> . var
    (81) fact -> . NUM f_fact
    (82) fact -> . OPTERM NUM
    (83) fact -> . CALL call_func
    (64) var -> . ID f_varobj : ID f_verify_type_composite dimension
    (65) var -> . ID f_verify_type dimension

    (               shift and go to state 41
    NUM             shift and go to state 43
    OPTERM          shift and go to state 39
    CALL            shift and go to state 44
    ID              shift and go to state 45

    expresion                      shift and go to state 36
    exp                            shift and go to state 37
    term                           shift and go to state 38
    fact                           shift and go to state 40
    var                            shift and go to state 42

state 29

    (32) dimension -> empty .

    :               reduce using rule 32 (dimension -> empty .)
    OPFACT          reduce using rule 32 (dimension -> empty .)
    OPTERM          reduce using rule 32 (dimension -> empty .)
    COMP            reduce using rule 32 (dimension -> empty .)
    ]               reduce using rule 32 (dimension -> empty .)
    )               reduce using rule 32 (dimension -> empty .)
    =               reduce using rule 32 (dimension -> empty .)
    ,               reduce using rule 32 (dimension -> empty .)
    TO              reduce using rule 32 (dimension -> empty .)
    ;               reduce using rule 32 (dimension -> empty .)
    {               reduce using rule 32 (dimension -> empty .)
    &               reduce using rule 32 (dimension -> empty .)


state 30

    (22) vars -> vars DEF ID f_varsobj . : lista_id ;

    :               shift and go to state 46


state 31

    (7) clase -> TYPE ID f_startclass : . ID f_clasepadre { cvars f_cvars funciones } f_endclass

    ID              shift and go to state 47


state 32

    (8) clase -> TYPE ID f_startclass { . cvars f_cvars funciones } f_endclass
    (25) cvars -> . cvars DEF tipo dimension : lista_id ;
    (26) cvars -> . empty
    (103) empty -> .

    DEF             reduce using rule 103 (empty -> .)
    }               reduce using rule 103 (empty -> .)
    FUNC            reduce using rule 103 (empty -> .)

    cvars                          shift and go to state 48
    empty                          shift and go to state 49

state 33

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN ( ) . { estatutos } END f_end ;

    {               shift and go to state 50


state 34

    (15) funcion -> FUNC ID f_startfunc . ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc
    (16) funcion -> FUNC ID f_startfunc . ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc

    (               shift and go to state 51


state 35

    (21) vars -> vars DEF tipo dimension : . lista_id ;
    (27) lista_id -> . ID f_vars
    (28) lista_id -> . lista_id , ID f_vars

    ID              shift and go to state 53

    lista_id                       shift and go to state 52

state 36

    (30) dimension -> [ expresion . f_dim1 ] f_onedim
    (31) dimension -> [ expresion . f_dim1 ] [ expresion f_dim2 ] f_twodim
    (70) expresion -> expresion . COMP f_oper exp f_expres
    (33) f_dim1 -> .

    COMP            shift and go to state 55
    ]               reduce using rule 33 (f_dim1 -> .)

    f_dim1                         shift and go to state 54

state 37

    (69) expresion -> exp .
    (73) exp -> exp . OPTERM f_oper term f_exp

    COMP            reduce using rule 69 (expresion -> exp .)
    ]               reduce using rule 69 (expresion -> exp .)
    )               reduce using rule 69 (expresion -> exp .)
    ,               reduce using rule 69 (expresion -> exp .)
    TO              reduce using rule 69 (expresion -> exp .)
    ;               reduce using rule 69 (expresion -> exp .)
    {               reduce using rule 69 (expresion -> exp .)
    OPTERM          shift and go to state 56


state 38

    (72) exp -> term .
    (76) term -> term . OPFACT f_oper fact f_term

    OPTERM          reduce using rule 72 (exp -> term .)
    COMP            reduce using rule 72 (exp -> term .)
    ]               reduce using rule 72 (exp -> term .)
    )               reduce using rule 72 (exp -> term .)
    ,               reduce using rule 72 (exp -> term .)
    TO              reduce using rule 72 (exp -> term .)
    ;               reduce using rule 72 (exp -> term .)
    {               reduce using rule 72 (exp -> term .)
    OPFACT          shift and go to state 57


state 39

    (82) fact -> OPTERM . NUM

    NUM             shift and go to state 58


state 40

    (75) term -> fact .

    OPFACT          reduce using rule 75 (term -> fact .)
    OPTERM          reduce using rule 75 (term -> fact .)
    COMP            reduce using rule 75 (term -> fact .)
    ]               reduce using rule 75 (term -> fact .)
    )               reduce using rule 75 (term -> fact .)
    ,               reduce using rule 75 (term -> fact .)
    TO              reduce using rule 75 (term -> fact .)
    ;               reduce using rule 75 (term -> fact .)
    {               reduce using rule 75 (term -> fact .)


state 41

    (79) fact -> ( . lparen expresion ) rparen
    (84) lparen -> .

    (               reduce using rule 84 (lparen -> .)
    NUM             reduce using rule 84 (lparen -> .)
    OPTERM          reduce using rule 84 (lparen -> .)
    CALL            reduce using rule 84 (lparen -> .)
    ID              reduce using rule 84 (lparen -> .)

    lparen                         shift and go to state 59

state 42

    (80) fact -> var .

    OPFACT          reduce using rule 80 (fact -> var .)
    OPTERM          reduce using rule 80 (fact -> var .)
    COMP            reduce using rule 80 (fact -> var .)
    ]               reduce using rule 80 (fact -> var .)
    )               reduce using rule 80 (fact -> var .)
    ,               reduce using rule 80 (fact -> var .)
    TO              reduce using rule 80 (fact -> var .)
    ;               reduce using rule 80 (fact -> var .)
    {               reduce using rule 80 (fact -> var .)


state 43

    (81) fact -> NUM . f_fact
    (86) f_fact -> .

    OPFACT          reduce using rule 86 (f_fact -> .)
    OPTERM          reduce using rule 86 (f_fact -> .)
    COMP            reduce using rule 86 (f_fact -> .)
    ]               reduce using rule 86 (f_fact -> .)
    )               reduce using rule 86 (f_fact -> .)
    ,               reduce using rule 86 (f_fact -> .)
    TO              reduce using rule 86 (f_fact -> .)
    ;               reduce using rule 86 (f_fact -> .)
    {               reduce using rule 86 (f_fact -> .)

    f_fact                         shift and go to state 60

state 44

    (83) fact -> CALL . call_func
    (51) call_func -> . func
    (52) call_func -> . input
    (53) call_func -> . write
    (54) call_func -> . to_num
    (55) call_func -> . to_str
    (56) call_func -> . return
    (57) func -> . ID ( args )
    (58) func -> . ID : ID ( args )
    (95) input -> . INPUT ( var )
    (96) write -> . PRINT ( write_list )
    (92) to_num -> . TO_NUMBER ( STR )
    (93) to_num -> . TO_NUMBER ( var )
    (94) to_str -> . TO_STRING ( expresion )
    (102) return -> . RET ( expresion )

    ID              shift and go to state 68
    INPUT           shift and go to state 69
    PRINT           shift and go to state 70
    TO_NUMBER       shift and go to state 71
    TO_STRING       shift and go to state 72
    RET             shift and go to state 73

    call_func                      shift and go to state 61
    func                           shift and go to state 62
    input                          shift and go to state 63
    write                          shift and go to state 64
    to_num                         shift and go to state 65
    to_str                         shift and go to state 66
    return                         shift and go to state 67

state 45

    (64) var -> ID . f_varobj : ID f_verify_type_composite dimension
    (65) var -> ID . f_verify_type dimension
    (66) f_varobj -> .
    (67) f_verify_type -> .

    :               reduce using rule 66 (f_varobj -> .)
    [               reduce using rule 67 (f_verify_type -> .)
    OPFACT          reduce using rule 67 (f_verify_type -> .)
    OPTERM          reduce using rule 67 (f_verify_type -> .)
    COMP            reduce using rule 67 (f_verify_type -> .)
    ]               reduce using rule 67 (f_verify_type -> .)
    )               reduce using rule 67 (f_verify_type -> .)
    =               reduce using rule 67 (f_verify_type -> .)
    ,               reduce using rule 67 (f_verify_type -> .)
    TO              reduce using rule 67 (f_verify_type -> .)
    ;               reduce using rule 67 (f_verify_type -> .)
    {               reduce using rule 67 (f_verify_type -> .)
    &               reduce using rule 67 (f_verify_type -> .)

    f_varobj                       shift and go to state 74
    f_verify_type                  shift and go to state 75

state 46

    (22) vars -> vars DEF ID f_varsobj : . lista_id ;
    (27) lista_id -> . ID f_vars
    (28) lista_id -> . lista_id , ID f_vars

    ID              shift and go to state 53

    lista_id                       shift and go to state 76

state 47

    (7) clase -> TYPE ID f_startclass : ID . f_clasepadre { cvars f_cvars funciones } f_endclass
    (10) f_clasepadre -> .

    {               reduce using rule 10 (f_clasepadre -> .)

    f_clasepadre                   shift and go to state 77

state 48

    (8) clase -> TYPE ID f_startclass { cvars . f_cvars funciones } f_endclass
    (25) cvars -> cvars . DEF tipo dimension : lista_id ;
    (11) f_cvars -> .

    DEF             shift and go to state 79
    }               reduce using rule 11 (f_cvars -> .)
    FUNC            reduce using rule 11 (f_cvars -> .)

    f_cvars                        shift and go to state 78

state 49

    (26) cvars -> empty .

    DEF             reduce using rule 26 (cvars -> empty .)
    }               reduce using rule 26 (cvars -> empty .)
    FUNC            reduce using rule 26 (cvars -> empty .)


state 50

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN ( ) { . estatutos } END f_end ;
    (44) estatutos -> . estatutos estatuto
    (45) estatutos -> . empty
    (103) empty -> .

    }               reduce using rule 103 (empty -> .)
    CALL            reduce using rule 103 (empty -> .)
    WHILE           reduce using rule 103 (empty -> .)
    FOR             reduce using rule 103 (empty -> .)
    IF              reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)

    estatutos                      shift and go to state 80
    empty                          shift and go to state 81

state 51

    (15) funcion -> FUNC ID f_startfunc ( . params ) : tipo f_tipofunc { vars estatutos } f_endfunc
    (16) funcion -> FUNC ID f_startfunc ( . params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc
    (39) params -> . pparams
    (40) params -> . empty
    (41) pparams -> . tipo ID f_param
    (42) pparams -> . pparams , tipo ID f_param
    (103) empty -> .
    (37) tipo -> . NUMBER
    (38) tipo -> . STRING

    )               reduce using rule 103 (empty -> .)
    NUMBER          shift and go to state 22
    STRING          shift and go to state 23

    params                         shift and go to state 82
    tipo                           shift and go to state 83
    pparams                        shift and go to state 84
    empty                          shift and go to state 85

state 52

    (21) vars -> vars DEF tipo dimension : lista_id . ;
    (28) lista_id -> lista_id . , ID f_vars

    ;               shift and go to state 86
    ,               shift and go to state 87


state 53

    (27) lista_id -> ID . f_vars
    (29) f_vars -> .

    ;               reduce using rule 29 (f_vars -> .)
    ,               reduce using rule 29 (f_vars -> .)

    f_vars                         shift and go to state 88

state 54

    (30) dimension -> [ expresion f_dim1 . ] f_onedim
    (31) dimension -> [ expresion f_dim1 . ] [ expresion f_dim2 ] f_twodim

    ]               shift and go to state 89


state 55

    (70) expresion -> expresion COMP . f_oper exp f_expres
    (78) f_oper -> .

    (               reduce using rule 78 (f_oper -> .)
    NUM             reduce using rule 78 (f_oper -> .)
    OPTERM          reduce using rule 78 (f_oper -> .)
    CALL            reduce using rule 78 (f_oper -> .)
    ID              reduce using rule 78 (f_oper -> .)

    f_oper                         shift and go to state 90

state 56

    (73) exp -> exp OPTERM . f_oper term f_exp
    (78) f_oper -> .

    (               reduce using rule 78 (f_oper -> .)
    NUM             reduce using rule 78 (f_oper -> .)
    OPTERM          reduce using rule 78 (f_oper -> .)
    CALL            reduce using rule 78 (f_oper -> .)
    ID              reduce using rule 78 (f_oper -> .)

    f_oper                         shift and go to state 91

state 57

    (76) term -> term OPFACT . f_oper fact f_term
    (78) f_oper -> .

    (               reduce using rule 78 (f_oper -> .)
    NUM             reduce using rule 78 (f_oper -> .)
    OPTERM          reduce using rule 78 (f_oper -> .)
    CALL            reduce using rule 78 (f_oper -> .)
    ID              reduce using rule 78 (f_oper -> .)

    f_oper                         shift and go to state 92

state 58

    (82) fact -> OPTERM NUM .

    OPFACT          reduce using rule 82 (fact -> OPTERM NUM .)
    OPTERM          reduce using rule 82 (fact -> OPTERM NUM .)
    COMP            reduce using rule 82 (fact -> OPTERM NUM .)
    ]               reduce using rule 82 (fact -> OPTERM NUM .)
    )               reduce using rule 82 (fact -> OPTERM NUM .)
    ,               reduce using rule 82 (fact -> OPTERM NUM .)
    TO              reduce using rule 82 (fact -> OPTERM NUM .)
    ;               reduce using rule 82 (fact -> OPTERM NUM .)
    {               reduce using rule 82 (fact -> OPTERM NUM .)


state 59

    (79) fact -> ( lparen . expresion ) rparen
    (69) expresion -> . exp
    (70) expresion -> . expresion COMP f_oper exp f_expres
    (72) exp -> . term
    (73) exp -> . exp OPTERM f_oper term f_exp
    (75) term -> . fact
    (76) term -> . term OPFACT f_oper fact f_term
    (79) fact -> . ( lparen expresion ) rparen
    (80) fact -> . var
    (81) fact -> . NUM f_fact
    (82) fact -> . OPTERM NUM
    (83) fact -> . CALL call_func
    (64) var -> . ID f_varobj : ID f_verify_type_composite dimension
    (65) var -> . ID f_verify_type dimension

    (               shift and go to state 41
    NUM             shift and go to state 43
    OPTERM          shift and go to state 39
    CALL            shift and go to state 44
    ID              shift and go to state 45

    expresion                      shift and go to state 93
    exp                            shift and go to state 37
    term                           shift and go to state 38
    fact                           shift and go to state 40
    var                            shift and go to state 42

state 60

    (81) fact -> NUM f_fact .

    OPFACT          reduce using rule 81 (fact -> NUM f_fact .)
    OPTERM          reduce using rule 81 (fact -> NUM f_fact .)
    COMP            reduce using rule 81 (fact -> NUM f_fact .)
    ]               reduce using rule 81 (fact -> NUM f_fact .)
    )               reduce using rule 81 (fact -> NUM f_fact .)
    ,               reduce using rule 81 (fact -> NUM f_fact .)
    TO              reduce using rule 81 (fact -> NUM f_fact .)
    ;               reduce using rule 81 (fact -> NUM f_fact .)
    {               reduce using rule 81 (fact -> NUM f_fact .)


state 61

    (83) fact -> CALL call_func .

    OPFACT          reduce using rule 83 (fact -> CALL call_func .)
    OPTERM          reduce using rule 83 (fact -> CALL call_func .)
    COMP            reduce using rule 83 (fact -> CALL call_func .)
    ]               reduce using rule 83 (fact -> CALL call_func .)
    )               reduce using rule 83 (fact -> CALL call_func .)
    ,               reduce using rule 83 (fact -> CALL call_func .)
    TO              reduce using rule 83 (fact -> CALL call_func .)
    ;               reduce using rule 83 (fact -> CALL call_func .)
    {               reduce using rule 83 (fact -> CALL call_func .)


state 62

    (51) call_func -> func .

    OPFACT          reduce using rule 51 (call_func -> func .)
    OPTERM          reduce using rule 51 (call_func -> func .)
    COMP            reduce using rule 51 (call_func -> func .)
    ]               reduce using rule 51 (call_func -> func .)
    )               reduce using rule 51 (call_func -> func .)
    ,               reduce using rule 51 (call_func -> func .)
    TO              reduce using rule 51 (call_func -> func .)
    ;               reduce using rule 51 (call_func -> func .)
    {               reduce using rule 51 (call_func -> func .)


state 63

    (52) call_func -> input .

    OPFACT          reduce using rule 52 (call_func -> input .)
    OPTERM          reduce using rule 52 (call_func -> input .)
    COMP            reduce using rule 52 (call_func -> input .)
    ]               reduce using rule 52 (call_func -> input .)
    )               reduce using rule 52 (call_func -> input .)
    ,               reduce using rule 52 (call_func -> input .)
    TO              reduce using rule 52 (call_func -> input .)
    ;               reduce using rule 52 (call_func -> input .)
    {               reduce using rule 52 (call_func -> input .)


state 64

    (53) call_func -> write .

    OPFACT          reduce using rule 53 (call_func -> write .)
    OPTERM          reduce using rule 53 (call_func -> write .)
    COMP            reduce using rule 53 (call_func -> write .)
    ]               reduce using rule 53 (call_func -> write .)
    )               reduce using rule 53 (call_func -> write .)
    ,               reduce using rule 53 (call_func -> write .)
    TO              reduce using rule 53 (call_func -> write .)
    ;               reduce using rule 53 (call_func -> write .)
    {               reduce using rule 53 (call_func -> write .)


state 65

    (54) call_func -> to_num .

    OPFACT          reduce using rule 54 (call_func -> to_num .)
    OPTERM          reduce using rule 54 (call_func -> to_num .)
    COMP            reduce using rule 54 (call_func -> to_num .)
    ]               reduce using rule 54 (call_func -> to_num .)
    )               reduce using rule 54 (call_func -> to_num .)
    ,               reduce using rule 54 (call_func -> to_num .)
    TO              reduce using rule 54 (call_func -> to_num .)
    ;               reduce using rule 54 (call_func -> to_num .)
    {               reduce using rule 54 (call_func -> to_num .)


state 66

    (55) call_func -> to_str .

    OPFACT          reduce using rule 55 (call_func -> to_str .)
    OPTERM          reduce using rule 55 (call_func -> to_str .)
    COMP            reduce using rule 55 (call_func -> to_str .)
    ]               reduce using rule 55 (call_func -> to_str .)
    )               reduce using rule 55 (call_func -> to_str .)
    ,               reduce using rule 55 (call_func -> to_str .)
    TO              reduce using rule 55 (call_func -> to_str .)
    ;               reduce using rule 55 (call_func -> to_str .)
    {               reduce using rule 55 (call_func -> to_str .)


state 67

    (56) call_func -> return .

    OPFACT          reduce using rule 56 (call_func -> return .)
    OPTERM          reduce using rule 56 (call_func -> return .)
    COMP            reduce using rule 56 (call_func -> return .)
    ]               reduce using rule 56 (call_func -> return .)
    )               reduce using rule 56 (call_func -> return .)
    ,               reduce using rule 56 (call_func -> return .)
    TO              reduce using rule 56 (call_func -> return .)
    ;               reduce using rule 56 (call_func -> return .)
    {               reduce using rule 56 (call_func -> return .)


state 68

    (57) func -> ID . ( args )
    (58) func -> ID . : ID ( args )

    (               shift and go to state 94
    :               shift and go to state 95


state 69

    (95) input -> INPUT . ( var )

    (               shift and go to state 96


state 70

    (96) write -> PRINT . ( write_list )

    (               shift and go to state 97


state 71

    (92) to_num -> TO_NUMBER . ( STR )
    (93) to_num -> TO_NUMBER . ( var )

    (               shift and go to state 98


state 72

    (94) to_str -> TO_STRING . ( expresion )

    (               shift and go to state 99


state 73

    (102) return -> RET . ( expresion )

    (               shift and go to state 100


state 74

    (64) var -> ID f_varobj . : ID f_verify_type_composite dimension

    :               shift and go to state 101


state 75

    (65) var -> ID f_verify_type . dimension
    (30) dimension -> . [ expresion f_dim1 ] f_onedim
    (31) dimension -> . [ expresion f_dim1 ] [ expresion f_dim2 ] f_twodim
    (32) dimension -> . empty
    (103) empty -> .

    [               shift and go to state 28
    OPFACT          reduce using rule 103 (empty -> .)
    OPTERM          reduce using rule 103 (empty -> .)
    COMP            reduce using rule 103 (empty -> .)
    ]               reduce using rule 103 (empty -> .)
    )               reduce using rule 103 (empty -> .)
    =               reduce using rule 103 (empty -> .)
    ,               reduce using rule 103 (empty -> .)
    TO              reduce using rule 103 (empty -> .)
    ;               reduce using rule 103 (empty -> .)
    {               reduce using rule 103 (empty -> .)
    &               reduce using rule 103 (empty -> .)

    dimension                      shift and go to state 102
    empty                          shift and go to state 29

state 76

    (22) vars -> vars DEF ID f_varsobj : lista_id . ;
    (28) lista_id -> lista_id . , ID f_vars

    ;               shift and go to state 103
    ,               shift and go to state 87


state 77

    (7) clase -> TYPE ID f_startclass : ID f_clasepadre . { cvars f_cvars funciones } f_endclass

    {               shift and go to state 104


state 78

    (8) clase -> TYPE ID f_startclass { cvars f_cvars . funciones } f_endclass
    (13) funciones -> . funciones funcion
    (14) funciones -> . empty
    (103) empty -> .

    }               reduce using rule 103 (empty -> .)
    FUNC            reduce using rule 103 (empty -> .)

    funciones                      shift and go to state 105
    empty                          shift and go to state 15

state 79

    (25) cvars -> cvars DEF . tipo dimension : lista_id ;
    (37) tipo -> . NUMBER
    (38) tipo -> . STRING

    NUMBER          shift and go to state 22
    STRING          shift and go to state 23

    tipo                           shift and go to state 106

state 80

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN ( ) { estatutos . } END f_end ;
    (44) estatutos -> estatutos . estatuto
    (46) estatuto -> . asignacion
    (47) estatuto -> . while
    (48) estatuto -> . for
    (49) estatuto -> . condicion
    (50) estatuto -> . CALL call_func ;
    (63) asignacion -> . var = f_oper expresion ;
    (90) while -> . WHILE ( expresion ) DO { estatutos }
    (91) for -> . FOR expresion TO expresion { estatutos }
    (87) condicion -> . IF ( expresion ) THEN { estatutos } condicionp
    (64) var -> . ID f_varobj : ID f_verify_type_composite dimension
    (65) var -> . ID f_verify_type dimension

    }               shift and go to state 107
    CALL            shift and go to state 113
    WHILE           shift and go to state 115
    FOR             shift and go to state 116
    IF              shift and go to state 117
    ID              shift and go to state 45

    estatuto                       shift and go to state 108
    asignacion                     shift and go to state 109
    while                          shift and go to state 110
    for                            shift and go to state 111
    condicion                      shift and go to state 112
    var                            shift and go to state 114

state 81

    (45) estatutos -> empty .

    }               reduce using rule 45 (estatutos -> empty .)
    CALL            reduce using rule 45 (estatutos -> empty .)
    WHILE           reduce using rule 45 (estatutos -> empty .)
    FOR             reduce using rule 45 (estatutos -> empty .)
    IF              reduce using rule 45 (estatutos -> empty .)
    ID              reduce using rule 45 (estatutos -> empty .)


state 82

    (15) funcion -> FUNC ID f_startfunc ( params . ) : tipo f_tipofunc { vars estatutos } f_endfunc
    (16) funcion -> FUNC ID f_startfunc ( params . ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc

    )               shift and go to state 118


state 83

    (41) pparams -> tipo . ID f_param

    ID              shift and go to state 119


state 84

    (39) params -> pparams .
    (42) pparams -> pparams . , tipo ID f_param

    )               reduce using rule 39 (params -> pparams .)
    ,               shift and go to state 120


state 85

    (40) params -> empty .

    )               reduce using rule 40 (params -> empty .)


state 86

    (21) vars -> vars DEF tipo dimension : lista_id ; .

    DEF             reduce using rule 21 (vars -> vars DEF tipo dimension : lista_id ; .)
    MAIN            reduce using rule 21 (vars -> vars DEF tipo dimension : lista_id ; .)
    FUNC            reduce using rule 21 (vars -> vars DEF tipo dimension : lista_id ; .)
    }               reduce using rule 21 (vars -> vars DEF tipo dimension : lista_id ; .)
    CALL            reduce using rule 21 (vars -> vars DEF tipo dimension : lista_id ; .)
    WHILE           reduce using rule 21 (vars -> vars DEF tipo dimension : lista_id ; .)
    FOR             reduce using rule 21 (vars -> vars DEF tipo dimension : lista_id ; .)
    IF              reduce using rule 21 (vars -> vars DEF tipo dimension : lista_id ; .)
    ID              reduce using rule 21 (vars -> vars DEF tipo dimension : lista_id ; .)


state 87

    (28) lista_id -> lista_id , . ID f_vars

    ID              shift and go to state 121


state 88

    (27) lista_id -> ID f_vars .

    ;               reduce using rule 27 (lista_id -> ID f_vars .)
    ,               reduce using rule 27 (lista_id -> ID f_vars .)


state 89

    (30) dimension -> [ expresion f_dim1 ] . f_onedim
    (31) dimension -> [ expresion f_dim1 ] . [ expresion f_dim2 ] f_twodim
    (35) f_onedim -> .

    [               shift and go to state 122
    :               reduce using rule 35 (f_onedim -> .)
    OPFACT          reduce using rule 35 (f_onedim -> .)
    OPTERM          reduce using rule 35 (f_onedim -> .)
    COMP            reduce using rule 35 (f_onedim -> .)
    ]               reduce using rule 35 (f_onedim -> .)
    )               reduce using rule 35 (f_onedim -> .)
    =               reduce using rule 35 (f_onedim -> .)
    ,               reduce using rule 35 (f_onedim -> .)
    TO              reduce using rule 35 (f_onedim -> .)
    ;               reduce using rule 35 (f_onedim -> .)
    {               reduce using rule 35 (f_onedim -> .)
    &               reduce using rule 35 (f_onedim -> .)

    f_onedim                       shift and go to state 123

state 90

    (70) expresion -> expresion COMP f_oper . exp f_expres
    (72) exp -> . term
    (73) exp -> . exp OPTERM f_oper term f_exp
    (75) term -> . fact
    (76) term -> . term OPFACT f_oper fact f_term
    (79) fact -> . ( lparen expresion ) rparen
    (80) fact -> . var
    (81) fact -> . NUM f_fact
    (82) fact -> . OPTERM NUM
    (83) fact -> . CALL call_func
    (64) var -> . ID f_varobj : ID f_verify_type_composite dimension
    (65) var -> . ID f_verify_type dimension

    (               shift and go to state 41
    NUM             shift and go to state 43
    OPTERM          shift and go to state 39
    CALL            shift and go to state 44
    ID              shift and go to state 45

    exp                            shift and go to state 124
    term                           shift and go to state 38
    fact                           shift and go to state 40
    var                            shift and go to state 42

state 91

    (73) exp -> exp OPTERM f_oper . term f_exp
    (75) term -> . fact
    (76) term -> . term OPFACT f_oper fact f_term
    (79) fact -> . ( lparen expresion ) rparen
    (80) fact -> . var
    (81) fact -> . NUM f_fact
    (82) fact -> . OPTERM NUM
    (83) fact -> . CALL call_func
    (64) var -> . ID f_varobj : ID f_verify_type_composite dimension
    (65) var -> . ID f_verify_type dimension

    (               shift and go to state 41
    NUM             shift and go to state 43
    OPTERM          shift and go to state 39
    CALL            shift and go to state 44
    ID              shift and go to state 45

    term                           shift and go to state 125
    fact                           shift and go to state 40
    var                            shift and go to state 42

state 92

    (76) term -> term OPFACT f_oper . fact f_term
    (79) fact -> . ( lparen expresion ) rparen
    (80) fact -> . var
    (81) fact -> . NUM f_fact
    (82) fact -> . OPTERM NUM
    (83) fact -> . CALL call_func
    (64) var -> . ID f_varobj : ID f_verify_type_composite dimension
    (65) var -> . ID f_verify_type dimension

    (               shift and go to state 41
    NUM             shift and go to state 43
    OPTERM          shift and go to state 39
    CALL            shift and go to state 44
    ID              shift and go to state 45

    fact                           shift and go to state 126
    var                            shift and go to state 42

state 93

    (79) fact -> ( lparen expresion . ) rparen
    (70) expresion -> expresion . COMP f_oper exp f_expres

    )               shift and go to state 127
    COMP            shift and go to state 55


state 94

    (57) func -> ID ( . args )
    (59) args -> . args_list
    (60) args -> . empty
    (61) args_list -> . expresion
    (62) args_list -> . args_list , expresion
    (103) empty -> .
    (69) expresion -> . exp
    (70) expresion -> . expresion COMP f_oper exp f_expres
    (72) exp -> . term
    (73) exp -> . exp OPTERM f_oper term f_exp
    (75) term -> . fact
    (76) term -> . term OPFACT f_oper fact f_term
    (79) fact -> . ( lparen expresion ) rparen
    (80) fact -> . var
    (81) fact -> . NUM f_fact
    (82) fact -> . OPTERM NUM
    (83) fact -> . CALL call_func
    (64) var -> . ID f_varobj : ID f_verify_type_composite dimension
    (65) var -> . ID f_verify_type dimension

    )               reduce using rule 103 (empty -> .)
    (               shift and go to state 41
    NUM             shift and go to state 43
    OPTERM          shift and go to state 39
    CALL            shift and go to state 44
    ID              shift and go to state 45

    args                           shift and go to state 128
    args_list                      shift and go to state 129
    empty                          shift and go to state 130
    expresion                      shift and go to state 131
    exp                            shift and go to state 37
    term                           shift and go to state 38
    fact                           shift and go to state 40
    var                            shift and go to state 42

state 95

    (58) func -> ID : . ID ( args )

    ID              shift and go to state 132


state 96

    (95) input -> INPUT ( . var )
    (64) var -> . ID f_varobj : ID f_verify_type_composite dimension
    (65) var -> . ID f_verify_type dimension

    ID              shift and go to state 45

    var                            shift and go to state 133

state 97

    (96) write -> PRINT ( . write_list )
    (97) write_list -> . write_list & write_listp
    (98) write_list -> . write_listp
    (99) write_listp -> . STR
    (100) write_listp -> . var
    (101) write_listp -> . CALL to_str
    (64) var -> . ID f_varobj : ID f_verify_type_composite dimension
    (65) var -> . ID f_verify_type dimension

    STR             shift and go to state 136
    CALL            shift and go to state 138
    ID              shift and go to state 45

    write_list                     shift and go to state 134
    write_listp                    shift and go to state 135
    var                            shift and go to state 137

state 98

    (92) to_num -> TO_NUMBER ( . STR )
    (93) to_num -> TO_NUMBER ( . var )
    (64) var -> . ID f_varobj : ID f_verify_type_composite dimension
    (65) var -> . ID f_verify_type dimension

    STR             shift and go to state 139
    ID              shift and go to state 45

    var                            shift and go to state 140

state 99

    (94) to_str -> TO_STRING ( . expresion )
    (69) expresion -> . exp
    (70) expresion -> . expresion COMP f_oper exp f_expres
    (72) exp -> . term
    (73) exp -> . exp OPTERM f_oper term f_exp
    (75) term -> . fact
    (76) term -> . term OPFACT f_oper fact f_term
    (79) fact -> . ( lparen expresion ) rparen
    (80) fact -> . var
    (81) fact -> . NUM f_fact
    (82) fact -> . OPTERM NUM
    (83) fact -> . CALL call_func
    (64) var -> . ID f_varobj : ID f_verify_type_composite dimension
    (65) var -> . ID f_verify_type dimension

    (               shift and go to state 41
    NUM             shift and go to state 43
    OPTERM          shift and go to state 39
    CALL            shift and go to state 44
    ID              shift and go to state 45

    expresion                      shift and go to state 141
    exp                            shift and go to state 37
    term                           shift and go to state 38
    fact                           shift and go to state 40
    var                            shift and go to state 42

state 100

    (102) return -> RET ( . expresion )
    (69) expresion -> . exp
    (70) expresion -> . expresion COMP f_oper exp f_expres
    (72) exp -> . term
    (73) exp -> . exp OPTERM f_oper term f_exp
    (75) term -> . fact
    (76) term -> . term OPFACT f_oper fact f_term
    (79) fact -> . ( lparen expresion ) rparen
    (80) fact -> . var
    (81) fact -> . NUM f_fact
    (82) fact -> . OPTERM NUM
    (83) fact -> . CALL call_func
    (64) var -> . ID f_varobj : ID f_verify_type_composite dimension
    (65) var -> . ID f_verify_type dimension

    (               shift and go to state 41
    NUM             shift and go to state 43
    OPTERM          shift and go to state 39
    CALL            shift and go to state 44
    ID              shift and go to state 45

    expresion                      shift and go to state 142
    exp                            shift and go to state 37
    term                           shift and go to state 38
    fact                           shift and go to state 40
    var                            shift and go to state 42

state 101

    (64) var -> ID f_varobj : . ID f_verify_type_composite dimension

    ID              shift and go to state 143


state 102

    (65) var -> ID f_verify_type dimension .

    OPFACT          reduce using rule 65 (var -> ID f_verify_type dimension .)
    OPTERM          reduce using rule 65 (var -> ID f_verify_type dimension .)
    COMP            reduce using rule 65 (var -> ID f_verify_type dimension .)
    ]               reduce using rule 65 (var -> ID f_verify_type dimension .)
    )               reduce using rule 65 (var -> ID f_verify_type dimension .)
    =               reduce using rule 65 (var -> ID f_verify_type dimension .)
    ,               reduce using rule 65 (var -> ID f_verify_type dimension .)
    TO              reduce using rule 65 (var -> ID f_verify_type dimension .)
    ;               reduce using rule 65 (var -> ID f_verify_type dimension .)
    {               reduce using rule 65 (var -> ID f_verify_type dimension .)
    &               reduce using rule 65 (var -> ID f_verify_type dimension .)


state 103

    (22) vars -> vars DEF ID f_varsobj : lista_id ; .

    DEF             reduce using rule 22 (vars -> vars DEF ID f_varsobj : lista_id ; .)
    MAIN            reduce using rule 22 (vars -> vars DEF ID f_varsobj : lista_id ; .)
    FUNC            reduce using rule 22 (vars -> vars DEF ID f_varsobj : lista_id ; .)
    }               reduce using rule 22 (vars -> vars DEF ID f_varsobj : lista_id ; .)
    CALL            reduce using rule 22 (vars -> vars DEF ID f_varsobj : lista_id ; .)
    WHILE           reduce using rule 22 (vars -> vars DEF ID f_varsobj : lista_id ; .)
    FOR             reduce using rule 22 (vars -> vars DEF ID f_varsobj : lista_id ; .)
    IF              reduce using rule 22 (vars -> vars DEF ID f_varsobj : lista_id ; .)
    ID              reduce using rule 22 (vars -> vars DEF ID f_varsobj : lista_id ; .)


state 104

    (7) clase -> TYPE ID f_startclass : ID f_clasepadre { . cvars f_cvars funciones } f_endclass
    (25) cvars -> . cvars DEF tipo dimension : lista_id ;
    (26) cvars -> . empty
    (103) empty -> .

    DEF             reduce using rule 103 (empty -> .)
    }               reduce using rule 103 (empty -> .)
    FUNC            reduce using rule 103 (empty -> .)

    cvars                          shift and go to state 144
    empty                          shift and go to state 49

state 105

    (8) clase -> TYPE ID f_startclass { cvars f_cvars funciones . } f_endclass
    (13) funciones -> funciones . funcion
    (15) funcion -> . FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc
    (16) funcion -> . FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc

    }               shift and go to state 145
    FUNC            shift and go to state 19

    funcion                        shift and go to state 18

state 106

    (25) cvars -> cvars DEF tipo . dimension : lista_id ;
    (30) dimension -> . [ expresion f_dim1 ] f_onedim
    (31) dimension -> . [ expresion f_dim1 ] [ expresion f_dim2 ] f_twodim
    (32) dimension -> . empty
    (103) empty -> .

    [               shift and go to state 28
    :               reduce using rule 103 (empty -> .)

    dimension                      shift and go to state 146
    empty                          shift and go to state 29

state 107

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN ( ) { estatutos } . END f_end ;

    END             shift and go to state 147


state 108

    (44) estatutos -> estatutos estatuto .

    }               reduce using rule 44 (estatutos -> estatutos estatuto .)
    CALL            reduce using rule 44 (estatutos -> estatutos estatuto .)
    WHILE           reduce using rule 44 (estatutos -> estatutos estatuto .)
    FOR             reduce using rule 44 (estatutos -> estatutos estatuto .)
    IF              reduce using rule 44 (estatutos -> estatutos estatuto .)
    ID              reduce using rule 44 (estatutos -> estatutos estatuto .)


state 109

    (46) estatuto -> asignacion .

    }               reduce using rule 46 (estatuto -> asignacion .)
    CALL            reduce using rule 46 (estatuto -> asignacion .)
    WHILE           reduce using rule 46 (estatuto -> asignacion .)
    FOR             reduce using rule 46 (estatuto -> asignacion .)
    IF              reduce using rule 46 (estatuto -> asignacion .)
    ID              reduce using rule 46 (estatuto -> asignacion .)


state 110

    (47) estatuto -> while .

    }               reduce using rule 47 (estatuto -> while .)
    CALL            reduce using rule 47 (estatuto -> while .)
    WHILE           reduce using rule 47 (estatuto -> while .)
    FOR             reduce using rule 47 (estatuto -> while .)
    IF              reduce using rule 47 (estatuto -> while .)
    ID              reduce using rule 47 (estatuto -> while .)


state 111

    (48) estatuto -> for .

    }               reduce using rule 48 (estatuto -> for .)
    CALL            reduce using rule 48 (estatuto -> for .)
    WHILE           reduce using rule 48 (estatuto -> for .)
    FOR             reduce using rule 48 (estatuto -> for .)
    IF              reduce using rule 48 (estatuto -> for .)
    ID              reduce using rule 48 (estatuto -> for .)


state 112

    (49) estatuto -> condicion .

    }               reduce using rule 49 (estatuto -> condicion .)
    CALL            reduce using rule 49 (estatuto -> condicion .)
    WHILE           reduce using rule 49 (estatuto -> condicion .)
    FOR             reduce using rule 49 (estatuto -> condicion .)
    IF              reduce using rule 49 (estatuto -> condicion .)
    ID              reduce using rule 49 (estatuto -> condicion .)


state 113

    (50) estatuto -> CALL . call_func ;
    (51) call_func -> . func
    (52) call_func -> . input
    (53) call_func -> . write
    (54) call_func -> . to_num
    (55) call_func -> . to_str
    (56) call_func -> . return
    (57) func -> . ID ( args )
    (58) func -> . ID : ID ( args )
    (95) input -> . INPUT ( var )
    (96) write -> . PRINT ( write_list )
    (92) to_num -> . TO_NUMBER ( STR )
    (93) to_num -> . TO_NUMBER ( var )
    (94) to_str -> . TO_STRING ( expresion )
    (102) return -> . RET ( expresion )

    ID              shift and go to state 68
    INPUT           shift and go to state 69
    PRINT           shift and go to state 70
    TO_NUMBER       shift and go to state 71
    TO_STRING       shift and go to state 72
    RET             shift and go to state 73

    call_func                      shift and go to state 148
    func                           shift and go to state 62
    input                          shift and go to state 63
    write                          shift and go to state 64
    to_num                         shift and go to state 65
    to_str                         shift and go to state 66
    return                         shift and go to state 67

state 114

    (63) asignacion -> var . = f_oper expresion ;

    =               shift and go to state 149


state 115

    (90) while -> WHILE . ( expresion ) DO { estatutos }

    (               shift and go to state 150


state 116

    (91) for -> FOR . expresion TO expresion { estatutos }
    (69) expresion -> . exp
    (70) expresion -> . expresion COMP f_oper exp f_expres
    (72) exp -> . term
    (73) exp -> . exp OPTERM f_oper term f_exp
    (75) term -> . fact
    (76) term -> . term OPFACT f_oper fact f_term
    (79) fact -> . ( lparen expresion ) rparen
    (80) fact -> . var
    (81) fact -> . NUM f_fact
    (82) fact -> . OPTERM NUM
    (83) fact -> . CALL call_func
    (64) var -> . ID f_varobj : ID f_verify_type_composite dimension
    (65) var -> . ID f_verify_type dimension

    (               shift and go to state 41
    NUM             shift and go to state 43
    OPTERM          shift and go to state 39
    CALL            shift and go to state 44
    ID              shift and go to state 45

    expresion                      shift and go to state 151
    exp                            shift and go to state 37
    term                           shift and go to state 38
    fact                           shift and go to state 40
    var                            shift and go to state 42

state 117

    (87) condicion -> IF . ( expresion ) THEN { estatutos } condicionp

    (               shift and go to state 152


state 118

    (15) funcion -> FUNC ID f_startfunc ( params ) . : tipo f_tipofunc { vars estatutos } f_endfunc
    (16) funcion -> FUNC ID f_startfunc ( params ) . : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc

    :               shift and go to state 153


state 119

    (41) pparams -> tipo ID . f_param
    (43) f_param -> .

    ,               reduce using rule 43 (f_param -> .)
    )               reduce using rule 43 (f_param -> .)

    f_param                        shift and go to state 154

state 120

    (42) pparams -> pparams , . tipo ID f_param
    (37) tipo -> . NUMBER
    (38) tipo -> . STRING

    NUMBER          shift and go to state 22
    STRING          shift and go to state 23

    tipo                           shift and go to state 155

state 121

    (28) lista_id -> lista_id , ID . f_vars
    (29) f_vars -> .

    ;               reduce using rule 29 (f_vars -> .)
    ,               reduce using rule 29 (f_vars -> .)

    f_vars                         shift and go to state 156

state 122

    (31) dimension -> [ expresion f_dim1 ] [ . expresion f_dim2 ] f_twodim
    (69) expresion -> . exp
    (70) expresion -> . expresion COMP f_oper exp f_expres
    (72) exp -> . term
    (73) exp -> . exp OPTERM f_oper term f_exp
    (75) term -> . fact
    (76) term -> . term OPFACT f_oper fact f_term
    (79) fact -> . ( lparen expresion ) rparen
    (80) fact -> . var
    (81) fact -> . NUM f_fact
    (82) fact -> . OPTERM NUM
    (83) fact -> . CALL call_func
    (64) var -> . ID f_varobj : ID f_verify_type_composite dimension
    (65) var -> . ID f_verify_type dimension

    (               shift and go to state 41
    NUM             shift and go to state 43
    OPTERM          shift and go to state 39
    CALL            shift and go to state 44
    ID              shift and go to state 45

    expresion                      shift and go to state 157
    exp                            shift and go to state 37
    term                           shift and go to state 38
    fact                           shift and go to state 40
    var                            shift and go to state 42

state 123

    (30) dimension -> [ expresion f_dim1 ] f_onedim .

    :               reduce using rule 30 (dimension -> [ expresion f_dim1 ] f_onedim .)
    OPFACT          reduce using rule 30 (dimension -> [ expresion f_dim1 ] f_onedim .)
    OPTERM          reduce using rule 30 (dimension -> [ expresion f_dim1 ] f_onedim .)
    COMP            reduce using rule 30 (dimension -> [ expresion f_dim1 ] f_onedim .)
    ]               reduce using rule 30 (dimension -> [ expresion f_dim1 ] f_onedim .)
    )               reduce using rule 30 (dimension -> [ expresion f_dim1 ] f_onedim .)
    =               reduce using rule 30 (dimension -> [ expresion f_dim1 ] f_onedim .)
    ,               reduce using rule 30 (dimension -> [ expresion f_dim1 ] f_onedim .)
    TO              reduce using rule 30 (dimension -> [ expresion f_dim1 ] f_onedim .)
    ;               reduce using rule 30 (dimension -> [ expresion f_dim1 ] f_onedim .)
    {               reduce using rule 30 (dimension -> [ expresion f_dim1 ] f_onedim .)
    &               reduce using rule 30 (dimension -> [ expresion f_dim1 ] f_onedim .)


state 124

    (70) expresion -> expresion COMP f_oper exp . f_expres
    (73) exp -> exp . OPTERM f_oper term f_exp
    (71) f_expres -> .

    OPTERM          shift and go to state 56
    COMP            reduce using rule 71 (f_expres -> .)
    ]               reduce using rule 71 (f_expres -> .)
    )               reduce using rule 71 (f_expres -> .)
    ,               reduce using rule 71 (f_expres -> .)
    TO              reduce using rule 71 (f_expres -> .)
    ;               reduce using rule 71 (f_expres -> .)
    {               reduce using rule 71 (f_expres -> .)

    f_expres                       shift and go to state 158

state 125

    (73) exp -> exp OPTERM f_oper term . f_exp
    (76) term -> term . OPFACT f_oper fact f_term
    (74) f_exp -> .

    OPFACT          shift and go to state 57
    OPTERM          reduce using rule 74 (f_exp -> .)
    COMP            reduce using rule 74 (f_exp -> .)
    ]               reduce using rule 74 (f_exp -> .)
    )               reduce using rule 74 (f_exp -> .)
    ,               reduce using rule 74 (f_exp -> .)
    TO              reduce using rule 74 (f_exp -> .)
    ;               reduce using rule 74 (f_exp -> .)
    {               reduce using rule 74 (f_exp -> .)

    f_exp                          shift and go to state 159

state 126

    (76) term -> term OPFACT f_oper fact . f_term
    (77) f_term -> .

    OPFACT          reduce using rule 77 (f_term -> .)
    OPTERM          reduce using rule 77 (f_term -> .)
    COMP            reduce using rule 77 (f_term -> .)
    ]               reduce using rule 77 (f_term -> .)
    )               reduce using rule 77 (f_term -> .)
    ,               reduce using rule 77 (f_term -> .)
    TO              reduce using rule 77 (f_term -> .)
    ;               reduce using rule 77 (f_term -> .)
    {               reduce using rule 77 (f_term -> .)

    f_term                         shift and go to state 160

state 127

    (79) fact -> ( lparen expresion ) . rparen
    (85) rparen -> .

    OPFACT          reduce using rule 85 (rparen -> .)
    OPTERM          reduce using rule 85 (rparen -> .)
    COMP            reduce using rule 85 (rparen -> .)
    ]               reduce using rule 85 (rparen -> .)
    )               reduce using rule 85 (rparen -> .)
    ,               reduce using rule 85 (rparen -> .)
    TO              reduce using rule 85 (rparen -> .)
    ;               reduce using rule 85 (rparen -> .)
    {               reduce using rule 85 (rparen -> .)

    rparen                         shift and go to state 161

state 128

    (57) func -> ID ( args . )

    )               shift and go to state 162


state 129

    (59) args -> args_list .
    (62) args_list -> args_list . , expresion

    )               reduce using rule 59 (args -> args_list .)
    ,               shift and go to state 163


state 130

    (60) args -> empty .

    )               reduce using rule 60 (args -> empty .)


state 131

    (61) args_list -> expresion .
    (70) expresion -> expresion . COMP f_oper exp f_expres

    ,               reduce using rule 61 (args_list -> expresion .)
    )               reduce using rule 61 (args_list -> expresion .)
    COMP            shift and go to state 55


state 132

    (58) func -> ID : ID . ( args )

    (               shift and go to state 164


state 133

    (95) input -> INPUT ( var . )

    )               shift and go to state 165


state 134

    (96) write -> PRINT ( write_list . )
    (97) write_list -> write_list . & write_listp

    )               shift and go to state 166
    &               shift and go to state 167


state 135

    (98) write_list -> write_listp .

    )               reduce using rule 98 (write_list -> write_listp .)
    &               reduce using rule 98 (write_list -> write_listp .)


state 136

    (99) write_listp -> STR .

    )               reduce using rule 99 (write_listp -> STR .)
    &               reduce using rule 99 (write_listp -> STR .)


state 137

    (100) write_listp -> var .

    )               reduce using rule 100 (write_listp -> var .)
    &               reduce using rule 100 (write_listp -> var .)


state 138

    (101) write_listp -> CALL . to_str
    (94) to_str -> . TO_STRING ( expresion )

    TO_STRING       shift and go to state 72

    to_str                         shift and go to state 168

state 139

    (92) to_num -> TO_NUMBER ( STR . )

    )               shift and go to state 169


state 140

    (93) to_num -> TO_NUMBER ( var . )

    )               shift and go to state 170


state 141

    (94) to_str -> TO_STRING ( expresion . )
    (70) expresion -> expresion . COMP f_oper exp f_expres

    )               shift and go to state 171
    COMP            shift and go to state 55


state 142

    (102) return -> RET ( expresion . )
    (70) expresion -> expresion . COMP f_oper exp f_expres

    )               shift and go to state 172
    COMP            shift and go to state 55


state 143

    (64) var -> ID f_varobj : ID . f_verify_type_composite dimension
    (68) f_verify_type_composite -> .

    [               reduce using rule 68 (f_verify_type_composite -> .)
    OPFACT          reduce using rule 68 (f_verify_type_composite -> .)
    OPTERM          reduce using rule 68 (f_verify_type_composite -> .)
    COMP            reduce using rule 68 (f_verify_type_composite -> .)
    ]               reduce using rule 68 (f_verify_type_composite -> .)
    )               reduce using rule 68 (f_verify_type_composite -> .)
    =               reduce using rule 68 (f_verify_type_composite -> .)
    ,               reduce using rule 68 (f_verify_type_composite -> .)
    TO              reduce using rule 68 (f_verify_type_composite -> .)
    ;               reduce using rule 68 (f_verify_type_composite -> .)
    {               reduce using rule 68 (f_verify_type_composite -> .)
    &               reduce using rule 68 (f_verify_type_composite -> .)

    f_verify_type_composite        shift and go to state 173

state 144

    (7) clase -> TYPE ID f_startclass : ID f_clasepadre { cvars . f_cvars funciones } f_endclass
    (25) cvars -> cvars . DEF tipo dimension : lista_id ;
    (11) f_cvars -> .

    DEF             shift and go to state 79
    }               reduce using rule 11 (f_cvars -> .)
    FUNC            reduce using rule 11 (f_cvars -> .)

    f_cvars                        shift and go to state 174

state 145

    (8) clase -> TYPE ID f_startclass { cvars f_cvars funciones } . f_endclass
    (12) f_endclass -> .

    TYPE            reduce using rule 12 (f_endclass -> .)
    DEF             reduce using rule 12 (f_endclass -> .)
    MAIN            reduce using rule 12 (f_endclass -> .)
    FUNC            reduce using rule 12 (f_endclass -> .)

    f_endclass                     shift and go to state 175

state 146

    (25) cvars -> cvars DEF tipo dimension . : lista_id ;

    :               shift and go to state 176


state 147

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN ( ) { estatutos } END . f_end ;
    (4) f_end -> .

    ;               reduce using rule 4 (f_end -> .)

    f_end                          shift and go to state 177

state 148

    (50) estatuto -> CALL call_func . ;

    ;               shift and go to state 178


state 149

    (63) asignacion -> var = . f_oper expresion ;
    (78) f_oper -> .

    (               reduce using rule 78 (f_oper -> .)
    NUM             reduce using rule 78 (f_oper -> .)
    OPTERM          reduce using rule 78 (f_oper -> .)
    CALL            reduce using rule 78 (f_oper -> .)
    ID              reduce using rule 78 (f_oper -> .)

    f_oper                         shift and go to state 179

state 150

    (90) while -> WHILE ( . expresion ) DO { estatutos }
    (69) expresion -> . exp
    (70) expresion -> . expresion COMP f_oper exp f_expres
    (72) exp -> . term
    (73) exp -> . exp OPTERM f_oper term f_exp
    (75) term -> . fact
    (76) term -> . term OPFACT f_oper fact f_term
    (79) fact -> . ( lparen expresion ) rparen
    (80) fact -> . var
    (81) fact -> . NUM f_fact
    (82) fact -> . OPTERM NUM
    (83) fact -> . CALL call_func
    (64) var -> . ID f_varobj : ID f_verify_type_composite dimension
    (65) var -> . ID f_verify_type dimension

    (               shift and go to state 41
    NUM             shift and go to state 43
    OPTERM          shift and go to state 39
    CALL            shift and go to state 44
    ID              shift and go to state 45

    expresion                      shift and go to state 180
    exp                            shift and go to state 37
    term                           shift and go to state 38
    fact                           shift and go to state 40
    var                            shift and go to state 42

state 151

    (91) for -> FOR expresion . TO expresion { estatutos }
    (70) expresion -> expresion . COMP f_oper exp f_expres

    TO              shift and go to state 181
    COMP            shift and go to state 55


state 152

    (87) condicion -> IF ( . expresion ) THEN { estatutos } condicionp
    (69) expresion -> . exp
    (70) expresion -> . expresion COMP f_oper exp f_expres
    (72) exp -> . term
    (73) exp -> . exp OPTERM f_oper term f_exp
    (75) term -> . fact
    (76) term -> . term OPFACT f_oper fact f_term
    (79) fact -> . ( lparen expresion ) rparen
    (80) fact -> . var
    (81) fact -> . NUM f_fact
    (82) fact -> . OPTERM NUM
    (83) fact -> . CALL call_func
    (64) var -> . ID f_varobj : ID f_verify_type_composite dimension
    (65) var -> . ID f_verify_type dimension

    (               shift and go to state 41
    NUM             shift and go to state 43
    OPTERM          shift and go to state 39
    CALL            shift and go to state 44
    ID              shift and go to state 45

    expresion                      shift and go to state 182
    exp                            shift and go to state 37
    term                           shift and go to state 38
    fact                           shift and go to state 40
    var                            shift and go to state 42

state 153

    (15) funcion -> FUNC ID f_startfunc ( params ) : . tipo f_tipofunc { vars estatutos } f_endfunc
    (16) funcion -> FUNC ID f_startfunc ( params ) : . NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc
    (37) tipo -> . NUMBER
    (38) tipo -> . STRING

    NOTHING         shift and go to state 184
    NUMBER          shift and go to state 22
    STRING          shift and go to state 23

    tipo                           shift and go to state 183

state 154

    (41) pparams -> tipo ID f_param .

    ,               reduce using rule 41 (pparams -> tipo ID f_param .)
    )               reduce using rule 41 (pparams -> tipo ID f_param .)


state 155

    (42) pparams -> pparams , tipo . ID f_param

    ID              shift and go to state 185


state 156

    (28) lista_id -> lista_id , ID f_vars .

    ;               reduce using rule 28 (lista_id -> lista_id , ID f_vars .)
    ,               reduce using rule 28 (lista_id -> lista_id , ID f_vars .)


state 157

    (31) dimension -> [ expresion f_dim1 ] [ expresion . f_dim2 ] f_twodim
    (70) expresion -> expresion . COMP f_oper exp f_expres
    (34) f_dim2 -> .

    COMP            shift and go to state 55
    ]               reduce using rule 34 (f_dim2 -> .)

    f_dim2                         shift and go to state 186

state 158

    (70) expresion -> expresion COMP f_oper exp f_expres .

    COMP            reduce using rule 70 (expresion -> expresion COMP f_oper exp f_expres .)
    ]               reduce using rule 70 (expresion -> expresion COMP f_oper exp f_expres .)
    )               reduce using rule 70 (expresion -> expresion COMP f_oper exp f_expres .)
    ,               reduce using rule 70 (expresion -> expresion COMP f_oper exp f_expres .)
    TO              reduce using rule 70 (expresion -> expresion COMP f_oper exp f_expres .)
    ;               reduce using rule 70 (expresion -> expresion COMP f_oper exp f_expres .)
    {               reduce using rule 70 (expresion -> expresion COMP f_oper exp f_expres .)


state 159

    (73) exp -> exp OPTERM f_oper term f_exp .

    OPTERM          reduce using rule 73 (exp -> exp OPTERM f_oper term f_exp .)
    COMP            reduce using rule 73 (exp -> exp OPTERM f_oper term f_exp .)
    ]               reduce using rule 73 (exp -> exp OPTERM f_oper term f_exp .)
    )               reduce using rule 73 (exp -> exp OPTERM f_oper term f_exp .)
    ,               reduce using rule 73 (exp -> exp OPTERM f_oper term f_exp .)
    TO              reduce using rule 73 (exp -> exp OPTERM f_oper term f_exp .)
    ;               reduce using rule 73 (exp -> exp OPTERM f_oper term f_exp .)
    {               reduce using rule 73 (exp -> exp OPTERM f_oper term f_exp .)


state 160

    (76) term -> term OPFACT f_oper fact f_term .

    OPFACT          reduce using rule 76 (term -> term OPFACT f_oper fact f_term .)
    OPTERM          reduce using rule 76 (term -> term OPFACT f_oper fact f_term .)
    COMP            reduce using rule 76 (term -> term OPFACT f_oper fact f_term .)
    ]               reduce using rule 76 (term -> term OPFACT f_oper fact f_term .)
    )               reduce using rule 76 (term -> term OPFACT f_oper fact f_term .)
    ,               reduce using rule 76 (term -> term OPFACT f_oper fact f_term .)
    TO              reduce using rule 76 (term -> term OPFACT f_oper fact f_term .)
    ;               reduce using rule 76 (term -> term OPFACT f_oper fact f_term .)
    {               reduce using rule 76 (term -> term OPFACT f_oper fact f_term .)


state 161

    (79) fact -> ( lparen expresion ) rparen .

    OPFACT          reduce using rule 79 (fact -> ( lparen expresion ) rparen .)
    OPTERM          reduce using rule 79 (fact -> ( lparen expresion ) rparen .)
    COMP            reduce using rule 79 (fact -> ( lparen expresion ) rparen .)
    ]               reduce using rule 79 (fact -> ( lparen expresion ) rparen .)
    )               reduce using rule 79 (fact -> ( lparen expresion ) rparen .)
    ,               reduce using rule 79 (fact -> ( lparen expresion ) rparen .)
    TO              reduce using rule 79 (fact -> ( lparen expresion ) rparen .)
    ;               reduce using rule 79 (fact -> ( lparen expresion ) rparen .)
    {               reduce using rule 79 (fact -> ( lparen expresion ) rparen .)


state 162

    (57) func -> ID ( args ) .

    OPFACT          reduce using rule 57 (func -> ID ( args ) .)
    OPTERM          reduce using rule 57 (func -> ID ( args ) .)
    COMP            reduce using rule 57 (func -> ID ( args ) .)
    ]               reduce using rule 57 (func -> ID ( args ) .)
    )               reduce using rule 57 (func -> ID ( args ) .)
    ,               reduce using rule 57 (func -> ID ( args ) .)
    TO              reduce using rule 57 (func -> ID ( args ) .)
    ;               reduce using rule 57 (func -> ID ( args ) .)
    {               reduce using rule 57 (func -> ID ( args ) .)


state 163

    (62) args_list -> args_list , . expresion
    (69) expresion -> . exp
    (70) expresion -> . expresion COMP f_oper exp f_expres
    (72) exp -> . term
    (73) exp -> . exp OPTERM f_oper term f_exp
    (75) term -> . fact
    (76) term -> . term OPFACT f_oper fact f_term
    (79) fact -> . ( lparen expresion ) rparen
    (80) fact -> . var
    (81) fact -> . NUM f_fact
    (82) fact -> . OPTERM NUM
    (83) fact -> . CALL call_func
    (64) var -> . ID f_varobj : ID f_verify_type_composite dimension
    (65) var -> . ID f_verify_type dimension

    (               shift and go to state 41
    NUM             shift and go to state 43
    OPTERM          shift and go to state 39
    CALL            shift and go to state 44
    ID              shift and go to state 45

    expresion                      shift and go to state 187
    exp                            shift and go to state 37
    term                           shift and go to state 38
    fact                           shift and go to state 40
    var                            shift and go to state 42

state 164

    (58) func -> ID : ID ( . args )
    (59) args -> . args_list
    (60) args -> . empty
    (61) args_list -> . expresion
    (62) args_list -> . args_list , expresion
    (103) empty -> .
    (69) expresion -> . exp
    (70) expresion -> . expresion COMP f_oper exp f_expres
    (72) exp -> . term
    (73) exp -> . exp OPTERM f_oper term f_exp
    (75) term -> . fact
    (76) term -> . term OPFACT f_oper fact f_term
    (79) fact -> . ( lparen expresion ) rparen
    (80) fact -> . var
    (81) fact -> . NUM f_fact
    (82) fact -> . OPTERM NUM
    (83) fact -> . CALL call_func
    (64) var -> . ID f_varobj : ID f_verify_type_composite dimension
    (65) var -> . ID f_verify_type dimension

    )               reduce using rule 103 (empty -> .)
    (               shift and go to state 41
    NUM             shift and go to state 43
    OPTERM          shift and go to state 39
    CALL            shift and go to state 44
    ID              shift and go to state 45

    args                           shift and go to state 188
    args_list                      shift and go to state 129
    empty                          shift and go to state 130
    expresion                      shift and go to state 131
    exp                            shift and go to state 37
    term                           shift and go to state 38
    fact                           shift and go to state 40
    var                            shift and go to state 42

state 165

    (95) input -> INPUT ( var ) .

    OPFACT          reduce using rule 95 (input -> INPUT ( var ) .)
    OPTERM          reduce using rule 95 (input -> INPUT ( var ) .)
    COMP            reduce using rule 95 (input -> INPUT ( var ) .)
    ]               reduce using rule 95 (input -> INPUT ( var ) .)
    )               reduce using rule 95 (input -> INPUT ( var ) .)
    ,               reduce using rule 95 (input -> INPUT ( var ) .)
    TO              reduce using rule 95 (input -> INPUT ( var ) .)
    ;               reduce using rule 95 (input -> INPUT ( var ) .)
    {               reduce using rule 95 (input -> INPUT ( var ) .)


state 166

    (96) write -> PRINT ( write_list ) .

    OPFACT          reduce using rule 96 (write -> PRINT ( write_list ) .)
    OPTERM          reduce using rule 96 (write -> PRINT ( write_list ) .)
    COMP            reduce using rule 96 (write -> PRINT ( write_list ) .)
    ]               reduce using rule 96 (write -> PRINT ( write_list ) .)
    )               reduce using rule 96 (write -> PRINT ( write_list ) .)
    ,               reduce using rule 96 (write -> PRINT ( write_list ) .)
    TO              reduce using rule 96 (write -> PRINT ( write_list ) .)
    ;               reduce using rule 96 (write -> PRINT ( write_list ) .)
    {               reduce using rule 96 (write -> PRINT ( write_list ) .)


state 167

    (97) write_list -> write_list & . write_listp
    (99) write_listp -> . STR
    (100) write_listp -> . var
    (101) write_listp -> . CALL to_str
    (64) var -> . ID f_varobj : ID f_verify_type_composite dimension
    (65) var -> . ID f_verify_type dimension

    STR             shift and go to state 136
    CALL            shift and go to state 138
    ID              shift and go to state 45

    write_listp                    shift and go to state 189
    var                            shift and go to state 137

state 168

    (101) write_listp -> CALL to_str .

    )               reduce using rule 101 (write_listp -> CALL to_str .)
    &               reduce using rule 101 (write_listp -> CALL to_str .)


state 169

    (92) to_num -> TO_NUMBER ( STR ) .

    OPFACT          reduce using rule 92 (to_num -> TO_NUMBER ( STR ) .)
    OPTERM          reduce using rule 92 (to_num -> TO_NUMBER ( STR ) .)
    COMP            reduce using rule 92 (to_num -> TO_NUMBER ( STR ) .)
    ]               reduce using rule 92 (to_num -> TO_NUMBER ( STR ) .)
    )               reduce using rule 92 (to_num -> TO_NUMBER ( STR ) .)
    ,               reduce using rule 92 (to_num -> TO_NUMBER ( STR ) .)
    TO              reduce using rule 92 (to_num -> TO_NUMBER ( STR ) .)
    ;               reduce using rule 92 (to_num -> TO_NUMBER ( STR ) .)
    {               reduce using rule 92 (to_num -> TO_NUMBER ( STR ) .)


state 170

    (93) to_num -> TO_NUMBER ( var ) .

    OPFACT          reduce using rule 93 (to_num -> TO_NUMBER ( var ) .)
    OPTERM          reduce using rule 93 (to_num -> TO_NUMBER ( var ) .)
    COMP            reduce using rule 93 (to_num -> TO_NUMBER ( var ) .)
    ]               reduce using rule 93 (to_num -> TO_NUMBER ( var ) .)
    )               reduce using rule 93 (to_num -> TO_NUMBER ( var ) .)
    ,               reduce using rule 93 (to_num -> TO_NUMBER ( var ) .)
    TO              reduce using rule 93 (to_num -> TO_NUMBER ( var ) .)
    ;               reduce using rule 93 (to_num -> TO_NUMBER ( var ) .)
    {               reduce using rule 93 (to_num -> TO_NUMBER ( var ) .)


state 171

    (94) to_str -> TO_STRING ( expresion ) .

    OPFACT          reduce using rule 94 (to_str -> TO_STRING ( expresion ) .)
    OPTERM          reduce using rule 94 (to_str -> TO_STRING ( expresion ) .)
    COMP            reduce using rule 94 (to_str -> TO_STRING ( expresion ) .)
    ]               reduce using rule 94 (to_str -> TO_STRING ( expresion ) .)
    )               reduce using rule 94 (to_str -> TO_STRING ( expresion ) .)
    ,               reduce using rule 94 (to_str -> TO_STRING ( expresion ) .)
    TO              reduce using rule 94 (to_str -> TO_STRING ( expresion ) .)
    ;               reduce using rule 94 (to_str -> TO_STRING ( expresion ) .)
    {               reduce using rule 94 (to_str -> TO_STRING ( expresion ) .)
    &               reduce using rule 94 (to_str -> TO_STRING ( expresion ) .)


state 172

    (102) return -> RET ( expresion ) .

    OPFACT          reduce using rule 102 (return -> RET ( expresion ) .)
    OPTERM          reduce using rule 102 (return -> RET ( expresion ) .)
    COMP            reduce using rule 102 (return -> RET ( expresion ) .)
    ]               reduce using rule 102 (return -> RET ( expresion ) .)
    )               reduce using rule 102 (return -> RET ( expresion ) .)
    ,               reduce using rule 102 (return -> RET ( expresion ) .)
    TO              reduce using rule 102 (return -> RET ( expresion ) .)
    ;               reduce using rule 102 (return -> RET ( expresion ) .)
    {               reduce using rule 102 (return -> RET ( expresion ) .)


state 173

    (64) var -> ID f_varobj : ID f_verify_type_composite . dimension
    (30) dimension -> . [ expresion f_dim1 ] f_onedim
    (31) dimension -> . [ expresion f_dim1 ] [ expresion f_dim2 ] f_twodim
    (32) dimension -> . empty
    (103) empty -> .

    [               shift and go to state 28
    OPFACT          reduce using rule 103 (empty -> .)
    OPTERM          reduce using rule 103 (empty -> .)
    COMP            reduce using rule 103 (empty -> .)
    ]               reduce using rule 103 (empty -> .)
    )               reduce using rule 103 (empty -> .)
    =               reduce using rule 103 (empty -> .)
    ,               reduce using rule 103 (empty -> .)
    TO              reduce using rule 103 (empty -> .)
    ;               reduce using rule 103 (empty -> .)
    {               reduce using rule 103 (empty -> .)
    &               reduce using rule 103 (empty -> .)

    dimension                      shift and go to state 190
    empty                          shift and go to state 29

state 174

    (7) clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars . funciones } f_endclass
    (13) funciones -> . funciones funcion
    (14) funciones -> . empty
    (103) empty -> .

    }               reduce using rule 103 (empty -> .)
    FUNC            reduce using rule 103 (empty -> .)

    funciones                      shift and go to state 191
    empty                          shift and go to state 15

state 175

    (8) clase -> TYPE ID f_startclass { cvars f_cvars funciones } f_endclass .

    TYPE            reduce using rule 8 (clase -> TYPE ID f_startclass { cvars f_cvars funciones } f_endclass .)
    DEF             reduce using rule 8 (clase -> TYPE ID f_startclass { cvars f_cvars funciones } f_endclass .)
    MAIN            reduce using rule 8 (clase -> TYPE ID f_startclass { cvars f_cvars funciones } f_endclass .)
    FUNC            reduce using rule 8 (clase -> TYPE ID f_startclass { cvars f_cvars funciones } f_endclass .)


state 176

    (25) cvars -> cvars DEF tipo dimension : . lista_id ;
    (27) lista_id -> . ID f_vars
    (28) lista_id -> . lista_id , ID f_vars

    ID              shift and go to state 53

    lista_id                       shift and go to state 192

state 177

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN ( ) { estatutos } END f_end . ;

    ;               shift and go to state 193


state 178

    (50) estatuto -> CALL call_func ; .

    }               reduce using rule 50 (estatuto -> CALL call_func ; .)
    CALL            reduce using rule 50 (estatuto -> CALL call_func ; .)
    WHILE           reduce using rule 50 (estatuto -> CALL call_func ; .)
    FOR             reduce using rule 50 (estatuto -> CALL call_func ; .)
    IF              reduce using rule 50 (estatuto -> CALL call_func ; .)
    ID              reduce using rule 50 (estatuto -> CALL call_func ; .)


state 179

    (63) asignacion -> var = f_oper . expresion ;
    (69) expresion -> . exp
    (70) expresion -> . expresion COMP f_oper exp f_expres
    (72) exp -> . term
    (73) exp -> . exp OPTERM f_oper term f_exp
    (75) term -> . fact
    (76) term -> . term OPFACT f_oper fact f_term
    (79) fact -> . ( lparen expresion ) rparen
    (80) fact -> . var
    (81) fact -> . NUM f_fact
    (82) fact -> . OPTERM NUM
    (83) fact -> . CALL call_func
    (64) var -> . ID f_varobj : ID f_verify_type_composite dimension
    (65) var -> . ID f_verify_type dimension

    (               shift and go to state 41
    NUM             shift and go to state 43
    OPTERM          shift and go to state 39
    CALL            shift and go to state 44
    ID              shift and go to state 45

    var                            shift and go to state 42
    expresion                      shift and go to state 194
    exp                            shift and go to state 37
    term                           shift and go to state 38
    fact                           shift and go to state 40

state 180

    (90) while -> WHILE ( expresion . ) DO { estatutos }
    (70) expresion -> expresion . COMP f_oper exp f_expres

    )               shift and go to state 195
    COMP            shift and go to state 55


state 181

    (91) for -> FOR expresion TO . expresion { estatutos }
    (69) expresion -> . exp
    (70) expresion -> . expresion COMP f_oper exp f_expres
    (72) exp -> . term
    (73) exp -> . exp OPTERM f_oper term f_exp
    (75) term -> . fact
    (76) term -> . term OPFACT f_oper fact f_term
    (79) fact -> . ( lparen expresion ) rparen
    (80) fact -> . var
    (81) fact -> . NUM f_fact
    (82) fact -> . OPTERM NUM
    (83) fact -> . CALL call_func
    (64) var -> . ID f_varobj : ID f_verify_type_composite dimension
    (65) var -> . ID f_verify_type dimension

    (               shift and go to state 41
    NUM             shift and go to state 43
    OPTERM          shift and go to state 39
    CALL            shift and go to state 44
    ID              shift and go to state 45

    expresion                      shift and go to state 196
    exp                            shift and go to state 37
    term                           shift and go to state 38
    fact                           shift and go to state 40
    var                            shift and go to state 42

state 182

    (87) condicion -> IF ( expresion . ) THEN { estatutos } condicionp
    (70) expresion -> expresion . COMP f_oper exp f_expres

    )               shift and go to state 197
    COMP            shift and go to state 55


state 183

    (15) funcion -> FUNC ID f_startfunc ( params ) : tipo . f_tipofunc { vars estatutos } f_endfunc
    (19) f_tipofunc -> .

    {               reduce using rule 19 (f_tipofunc -> .)

    f_tipofunc                     shift and go to state 198

state 184

    (16) funcion -> FUNC ID f_startfunc ( params ) : NOTHING . f_nothing f_tipofunc { vars estatutos } f_endfunc
    (18) f_nothing -> .

    {               reduce using rule 18 (f_nothing -> .)

    f_nothing                      shift and go to state 199

state 185

    (42) pparams -> pparams , tipo ID . f_param
    (43) f_param -> .

    ,               reduce using rule 43 (f_param -> .)
    )               reduce using rule 43 (f_param -> .)

    f_param                        shift and go to state 200

state 186

    (31) dimension -> [ expresion f_dim1 ] [ expresion f_dim2 . ] f_twodim

    ]               shift and go to state 201


state 187

    (62) args_list -> args_list , expresion .
    (70) expresion -> expresion . COMP f_oper exp f_expres

    ,               reduce using rule 62 (args_list -> args_list , expresion .)
    )               reduce using rule 62 (args_list -> args_list , expresion .)
    COMP            shift and go to state 55


state 188

    (58) func -> ID : ID ( args . )

    )               shift and go to state 202


state 189

    (97) write_list -> write_list & write_listp .

    )               reduce using rule 97 (write_list -> write_list & write_listp .)
    &               reduce using rule 97 (write_list -> write_list & write_listp .)


state 190

    (64) var -> ID f_varobj : ID f_verify_type_composite dimension .

    OPFACT          reduce using rule 64 (var -> ID f_varobj : ID f_verify_type_composite dimension .)
    OPTERM          reduce using rule 64 (var -> ID f_varobj : ID f_verify_type_composite dimension .)
    COMP            reduce using rule 64 (var -> ID f_varobj : ID f_verify_type_composite dimension .)
    ]               reduce using rule 64 (var -> ID f_varobj : ID f_verify_type_composite dimension .)
    )               reduce using rule 64 (var -> ID f_varobj : ID f_verify_type_composite dimension .)
    =               reduce using rule 64 (var -> ID f_varobj : ID f_verify_type_composite dimension .)
    ,               reduce using rule 64 (var -> ID f_varobj : ID f_verify_type_composite dimension .)
    TO              reduce using rule 64 (var -> ID f_varobj : ID f_verify_type_composite dimension .)
    ;               reduce using rule 64 (var -> ID f_varobj : ID f_verify_type_composite dimension .)
    {               reduce using rule 64 (var -> ID f_varobj : ID f_verify_type_composite dimension .)
    &               reduce using rule 64 (var -> ID f_varobj : ID f_verify_type_composite dimension .)


state 191

    (7) clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones . } f_endclass
    (13) funciones -> funciones . funcion
    (15) funcion -> . FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc
    (16) funcion -> . FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc

    }               shift and go to state 203
    FUNC            shift and go to state 19

    funcion                        shift and go to state 18

state 192

    (25) cvars -> cvars DEF tipo dimension : lista_id . ;
    (28) lista_id -> lista_id . , ID f_vars

    ;               shift and go to state 204
    ,               shift and go to state 87


state 193

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN ( ) { estatutos } END f_end ; .

    $end            reduce using rule 1 (start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN ( ) { estatutos } END f_end ; .)


state 194

    (63) asignacion -> var = f_oper expresion . ;
    (70) expresion -> expresion . COMP f_oper exp f_expres

    ;               shift and go to state 205
    COMP            shift and go to state 55


state 195

    (90) while -> WHILE ( expresion ) . DO { estatutos }

    DO              shift and go to state 206


state 196

    (91) for -> FOR expresion TO expresion . { estatutos }
    (70) expresion -> expresion . COMP f_oper exp f_expres

    {               shift and go to state 207
    COMP            shift and go to state 55


state 197

    (87) condicion -> IF ( expresion ) . THEN { estatutos } condicionp

    THEN            shift and go to state 208


state 198

    (15) funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc . { vars estatutos } f_endfunc

    {               shift and go to state 209


state 199

    (16) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing . f_tipofunc { vars estatutos } f_endfunc
    (19) f_tipofunc -> .

    {               reduce using rule 19 (f_tipofunc -> .)

    f_tipofunc                     shift and go to state 210

state 200

    (42) pparams -> pparams , tipo ID f_param .

    ,               reduce using rule 42 (pparams -> pparams , tipo ID f_param .)
    )               reduce using rule 42 (pparams -> pparams , tipo ID f_param .)


state 201

    (31) dimension -> [ expresion f_dim1 ] [ expresion f_dim2 ] . f_twodim
    (36) f_twodim -> .

    :               reduce using rule 36 (f_twodim -> .)
    OPFACT          reduce using rule 36 (f_twodim -> .)
    OPTERM          reduce using rule 36 (f_twodim -> .)
    COMP            reduce using rule 36 (f_twodim -> .)
    ]               reduce using rule 36 (f_twodim -> .)
    )               reduce using rule 36 (f_twodim -> .)
    =               reduce using rule 36 (f_twodim -> .)
    ,               reduce using rule 36 (f_twodim -> .)
    TO              reduce using rule 36 (f_twodim -> .)
    ;               reduce using rule 36 (f_twodim -> .)
    {               reduce using rule 36 (f_twodim -> .)
    &               reduce using rule 36 (f_twodim -> .)

    f_twodim                       shift and go to state 211

state 202

    (58) func -> ID : ID ( args ) .

    OPFACT          reduce using rule 58 (func -> ID : ID ( args ) .)
    OPTERM          reduce using rule 58 (func -> ID : ID ( args ) .)
    COMP            reduce using rule 58 (func -> ID : ID ( args ) .)
    ]               reduce using rule 58 (func -> ID : ID ( args ) .)
    )               reduce using rule 58 (func -> ID : ID ( args ) .)
    ,               reduce using rule 58 (func -> ID : ID ( args ) .)
    TO              reduce using rule 58 (func -> ID : ID ( args ) .)
    ;               reduce using rule 58 (func -> ID : ID ( args ) .)
    {               reduce using rule 58 (func -> ID : ID ( args ) .)


state 203

    (7) clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } . f_endclass
    (12) f_endclass -> .

    TYPE            reduce using rule 12 (f_endclass -> .)
    DEF             reduce using rule 12 (f_endclass -> .)
    MAIN            reduce using rule 12 (f_endclass -> .)
    FUNC            reduce using rule 12 (f_endclass -> .)

    f_endclass                     shift and go to state 212

state 204

    (25) cvars -> cvars DEF tipo dimension : lista_id ; .

    DEF             reduce using rule 25 (cvars -> cvars DEF tipo dimension : lista_id ; .)
    }               reduce using rule 25 (cvars -> cvars DEF tipo dimension : lista_id ; .)
    FUNC            reduce using rule 25 (cvars -> cvars DEF tipo dimension : lista_id ; .)


state 205

    (63) asignacion -> var = f_oper expresion ; .

    }               reduce using rule 63 (asignacion -> var = f_oper expresion ; .)
    CALL            reduce using rule 63 (asignacion -> var = f_oper expresion ; .)
    WHILE           reduce using rule 63 (asignacion -> var = f_oper expresion ; .)
    FOR             reduce using rule 63 (asignacion -> var = f_oper expresion ; .)
    IF              reduce using rule 63 (asignacion -> var = f_oper expresion ; .)
    ID              reduce using rule 63 (asignacion -> var = f_oper expresion ; .)


state 206

    (90) while -> WHILE ( expresion ) DO . { estatutos }

    {               shift and go to state 213


state 207

    (91) for -> FOR expresion TO expresion { . estatutos }
    (44) estatutos -> . estatutos estatuto
    (45) estatutos -> . empty
    (103) empty -> .

    }               reduce using rule 103 (empty -> .)
    CALL            reduce using rule 103 (empty -> .)
    WHILE           reduce using rule 103 (empty -> .)
    FOR             reduce using rule 103 (empty -> .)
    IF              reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)

    estatutos                      shift and go to state 214
    empty                          shift and go to state 81

state 208

    (87) condicion -> IF ( expresion ) THEN . { estatutos } condicionp

    {               shift and go to state 215


state 209

    (15) funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { . vars estatutos } f_endfunc
    (21) vars -> . vars DEF tipo dimension : lista_id ;
    (22) vars -> . vars DEF ID f_varsobj : lista_id ;
    (23) vars -> . empty
    (103) empty -> .

    DEF             reduce using rule 103 (empty -> .)
    }               reduce using rule 103 (empty -> .)
    CALL            reduce using rule 103 (empty -> .)
    WHILE           reduce using rule 103 (empty -> .)
    FOR             reduce using rule 103 (empty -> .)
    IF              reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)

    vars                           shift and go to state 216
    empty                          shift and go to state 11

state 210

    (16) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc . { vars estatutos } f_endfunc

    {               shift and go to state 217


state 211

    (31) dimension -> [ expresion f_dim1 ] [ expresion f_dim2 ] f_twodim .

    :               reduce using rule 31 (dimension -> [ expresion f_dim1 ] [ expresion f_dim2 ] f_twodim .)
    OPFACT          reduce using rule 31 (dimension -> [ expresion f_dim1 ] [ expresion f_dim2 ] f_twodim .)
    OPTERM          reduce using rule 31 (dimension -> [ expresion f_dim1 ] [ expresion f_dim2 ] f_twodim .)
    COMP            reduce using rule 31 (dimension -> [ expresion f_dim1 ] [ expresion f_dim2 ] f_twodim .)
    ]               reduce using rule 31 (dimension -> [ expresion f_dim1 ] [ expresion f_dim2 ] f_twodim .)
    )               reduce using rule 31 (dimension -> [ expresion f_dim1 ] [ expresion f_dim2 ] f_twodim .)
    =               reduce using rule 31 (dimension -> [ expresion f_dim1 ] [ expresion f_dim2 ] f_twodim .)
    ,               reduce using rule 31 (dimension -> [ expresion f_dim1 ] [ expresion f_dim2 ] f_twodim .)
    TO              reduce using rule 31 (dimension -> [ expresion f_dim1 ] [ expresion f_dim2 ] f_twodim .)
    ;               reduce using rule 31 (dimension -> [ expresion f_dim1 ] [ expresion f_dim2 ] f_twodim .)
    {               reduce using rule 31 (dimension -> [ expresion f_dim1 ] [ expresion f_dim2 ] f_twodim .)
    &               reduce using rule 31 (dimension -> [ expresion f_dim1 ] [ expresion f_dim2 ] f_twodim .)


state 212

    (7) clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass .

    TYPE            reduce using rule 7 (clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass .)
    DEF             reduce using rule 7 (clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass .)
    MAIN            reduce using rule 7 (clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass .)
    FUNC            reduce using rule 7 (clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass .)


state 213

    (90) while -> WHILE ( expresion ) DO { . estatutos }
    (44) estatutos -> . estatutos estatuto
    (45) estatutos -> . empty
    (103) empty -> .

    }               reduce using rule 103 (empty -> .)
    CALL            reduce using rule 103 (empty -> .)
    WHILE           reduce using rule 103 (empty -> .)
    FOR             reduce using rule 103 (empty -> .)
    IF              reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)

    estatutos                      shift and go to state 218
    empty                          shift and go to state 81

state 214

    (91) for -> FOR expresion TO expresion { estatutos . }
    (44) estatutos -> estatutos . estatuto
    (46) estatuto -> . asignacion
    (47) estatuto -> . while
    (48) estatuto -> . for
    (49) estatuto -> . condicion
    (50) estatuto -> . CALL call_func ;
    (63) asignacion -> . var = f_oper expresion ;
    (90) while -> . WHILE ( expresion ) DO { estatutos }
    (91) for -> . FOR expresion TO expresion { estatutos }
    (87) condicion -> . IF ( expresion ) THEN { estatutos } condicionp
    (64) var -> . ID f_varobj : ID f_verify_type_composite dimension
    (65) var -> . ID f_verify_type dimension

    }               shift and go to state 219
    CALL            shift and go to state 113
    WHILE           shift and go to state 115
    FOR             shift and go to state 116
    IF              shift and go to state 117
    ID              shift and go to state 45

    estatuto                       shift and go to state 108
    asignacion                     shift and go to state 109
    while                          shift and go to state 110
    for                            shift and go to state 111
    condicion                      shift and go to state 112
    var                            shift and go to state 114

state 215

    (87) condicion -> IF ( expresion ) THEN { . estatutos } condicionp
    (44) estatutos -> . estatutos estatuto
    (45) estatutos -> . empty
    (103) empty -> .

    }               reduce using rule 103 (empty -> .)
    CALL            reduce using rule 103 (empty -> .)
    WHILE           reduce using rule 103 (empty -> .)
    FOR             reduce using rule 103 (empty -> .)
    IF              reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)

    estatutos                      shift and go to state 220
    empty                          shift and go to state 81

state 216

    (15) funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars . estatutos } f_endfunc
    (21) vars -> vars . DEF tipo dimension : lista_id ;
    (22) vars -> vars . DEF ID f_varsobj : lista_id ;
    (44) estatutos -> . estatutos estatuto
    (45) estatutos -> . empty
    (103) empty -> .

    DEF             shift and go to state 14
    }               reduce using rule 103 (empty -> .)
    CALL            reduce using rule 103 (empty -> .)
    WHILE           reduce using rule 103 (empty -> .)
    FOR             reduce using rule 103 (empty -> .)
    IF              reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)

    estatutos                      shift and go to state 221
    empty                          shift and go to state 81

state 217

    (16) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { . vars estatutos } f_endfunc
    (21) vars -> . vars DEF tipo dimension : lista_id ;
    (22) vars -> . vars DEF ID f_varsobj : lista_id ;
    (23) vars -> . empty
    (103) empty -> .

    DEF             reduce using rule 103 (empty -> .)
    }               reduce using rule 103 (empty -> .)
    CALL            reduce using rule 103 (empty -> .)
    WHILE           reduce using rule 103 (empty -> .)
    FOR             reduce using rule 103 (empty -> .)
    IF              reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)

    vars                           shift and go to state 222
    empty                          shift and go to state 11

state 218

    (90) while -> WHILE ( expresion ) DO { estatutos . }
    (44) estatutos -> estatutos . estatuto
    (46) estatuto -> . asignacion
    (47) estatuto -> . while
    (48) estatuto -> . for
    (49) estatuto -> . condicion
    (50) estatuto -> . CALL call_func ;
    (63) asignacion -> . var = f_oper expresion ;
    (90) while -> . WHILE ( expresion ) DO { estatutos }
    (91) for -> . FOR expresion TO expresion { estatutos }
    (87) condicion -> . IF ( expresion ) THEN { estatutos } condicionp
    (64) var -> . ID f_varobj : ID f_verify_type_composite dimension
    (65) var -> . ID f_verify_type dimension

    }               shift and go to state 223
    CALL            shift and go to state 113
    WHILE           shift and go to state 115
    FOR             shift and go to state 116
    IF              shift and go to state 117
    ID              shift and go to state 45

    estatuto                       shift and go to state 108
    asignacion                     shift and go to state 109
    while                          shift and go to state 110
    for                            shift and go to state 111
    condicion                      shift and go to state 112
    var                            shift and go to state 114

state 219

    (91) for -> FOR expresion TO expresion { estatutos } .

    }               reduce using rule 91 (for -> FOR expresion TO expresion { estatutos } .)
    CALL            reduce using rule 91 (for -> FOR expresion TO expresion { estatutos } .)
    WHILE           reduce using rule 91 (for -> FOR expresion TO expresion { estatutos } .)
    FOR             reduce using rule 91 (for -> FOR expresion TO expresion { estatutos } .)
    IF              reduce using rule 91 (for -> FOR expresion TO expresion { estatutos } .)
    ID              reduce using rule 91 (for -> FOR expresion TO expresion { estatutos } .)


state 220

    (87) condicion -> IF ( expresion ) THEN { estatutos . } condicionp
    (44) estatutos -> estatutos . estatuto
    (46) estatuto -> . asignacion
    (47) estatuto -> . while
    (48) estatuto -> . for
    (49) estatuto -> . condicion
    (50) estatuto -> . CALL call_func ;
    (63) asignacion -> . var = f_oper expresion ;
    (90) while -> . WHILE ( expresion ) DO { estatutos }
    (91) for -> . FOR expresion TO expresion { estatutos }
    (87) condicion -> . IF ( expresion ) THEN { estatutos } condicionp
    (64) var -> . ID f_varobj : ID f_verify_type_composite dimension
    (65) var -> . ID f_verify_type dimension

    }               shift and go to state 224
    CALL            shift and go to state 113
    WHILE           shift and go to state 115
    FOR             shift and go to state 116
    IF              shift and go to state 117
    ID              shift and go to state 45

    estatuto                       shift and go to state 108
    asignacion                     shift and go to state 109
    while                          shift and go to state 110
    for                            shift and go to state 111
    condicion                      shift and go to state 112
    var                            shift and go to state 114

state 221

    (15) funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos . } f_endfunc
    (44) estatutos -> estatutos . estatuto
    (46) estatuto -> . asignacion
    (47) estatuto -> . while
    (48) estatuto -> . for
    (49) estatuto -> . condicion
    (50) estatuto -> . CALL call_func ;
    (63) asignacion -> . var = f_oper expresion ;
    (90) while -> . WHILE ( expresion ) DO { estatutos }
    (91) for -> . FOR expresion TO expresion { estatutos }
    (87) condicion -> . IF ( expresion ) THEN { estatutos } condicionp
    (64) var -> . ID f_varobj : ID f_verify_type_composite dimension
    (65) var -> . ID f_verify_type dimension

    }               shift and go to state 225
    CALL            shift and go to state 113
    WHILE           shift and go to state 115
    FOR             shift and go to state 116
    IF              shift and go to state 117
    ID              shift and go to state 45

    estatuto                       shift and go to state 108
    asignacion                     shift and go to state 109
    while                          shift and go to state 110
    for                            shift and go to state 111
    condicion                      shift and go to state 112
    var                            shift and go to state 114

state 222

    (16) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars . estatutos } f_endfunc
    (21) vars -> vars . DEF tipo dimension : lista_id ;
    (22) vars -> vars . DEF ID f_varsobj : lista_id ;
    (44) estatutos -> . estatutos estatuto
    (45) estatutos -> . empty
    (103) empty -> .

    DEF             shift and go to state 14
    }               reduce using rule 103 (empty -> .)
    CALL            reduce using rule 103 (empty -> .)
    WHILE           reduce using rule 103 (empty -> .)
    FOR             reduce using rule 103 (empty -> .)
    IF              reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)

    estatutos                      shift and go to state 226
    empty                          shift and go to state 81

state 223

    (90) while -> WHILE ( expresion ) DO { estatutos } .

    }               reduce using rule 90 (while -> WHILE ( expresion ) DO { estatutos } .)
    CALL            reduce using rule 90 (while -> WHILE ( expresion ) DO { estatutos } .)
    WHILE           reduce using rule 90 (while -> WHILE ( expresion ) DO { estatutos } .)
    FOR             reduce using rule 90 (while -> WHILE ( expresion ) DO { estatutos } .)
    IF              reduce using rule 90 (while -> WHILE ( expresion ) DO { estatutos } .)
    ID              reduce using rule 90 (while -> WHILE ( expresion ) DO { estatutos } .)


state 224

    (87) condicion -> IF ( expresion ) THEN { estatutos } . condicionp
    (88) condicionp -> . ELSE { estatutos }
    (89) condicionp -> . empty
    (103) empty -> .

    ELSE            shift and go to state 228
    }               reduce using rule 103 (empty -> .)
    CALL            reduce using rule 103 (empty -> .)
    WHILE           reduce using rule 103 (empty -> .)
    FOR             reduce using rule 103 (empty -> .)
    IF              reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)

    condicionp                     shift and go to state 227
    empty                          shift and go to state 229

state 225

    (15) funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } . f_endfunc
    (20) f_endfunc -> .

    MAIN            reduce using rule 20 (f_endfunc -> .)
    FUNC            reduce using rule 20 (f_endfunc -> .)
    }               reduce using rule 20 (f_endfunc -> .)

    f_endfunc                      shift and go to state 230

state 226

    (16) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos . } f_endfunc
    (44) estatutos -> estatutos . estatuto
    (46) estatuto -> . asignacion
    (47) estatuto -> . while
    (48) estatuto -> . for
    (49) estatuto -> . condicion
    (50) estatuto -> . CALL call_func ;
    (63) asignacion -> . var = f_oper expresion ;
    (90) while -> . WHILE ( expresion ) DO { estatutos }
    (91) for -> . FOR expresion TO expresion { estatutos }
    (87) condicion -> . IF ( expresion ) THEN { estatutos } condicionp
    (64) var -> . ID f_varobj : ID f_verify_type_composite dimension
    (65) var -> . ID f_verify_type dimension

    }               shift and go to state 231
    CALL            shift and go to state 113
    WHILE           shift and go to state 115
    FOR             shift and go to state 116
    IF              shift and go to state 117
    ID              shift and go to state 45

    estatuto                       shift and go to state 108
    asignacion                     shift and go to state 109
    while                          shift and go to state 110
    for                            shift and go to state 111
    condicion                      shift and go to state 112
    var                            shift and go to state 114

state 227

    (87) condicion -> IF ( expresion ) THEN { estatutos } condicionp .

    }               reduce using rule 87 (condicion -> IF ( expresion ) THEN { estatutos } condicionp .)
    CALL            reduce using rule 87 (condicion -> IF ( expresion ) THEN { estatutos } condicionp .)
    WHILE           reduce using rule 87 (condicion -> IF ( expresion ) THEN { estatutos } condicionp .)
    FOR             reduce using rule 87 (condicion -> IF ( expresion ) THEN { estatutos } condicionp .)
    IF              reduce using rule 87 (condicion -> IF ( expresion ) THEN { estatutos } condicionp .)
    ID              reduce using rule 87 (condicion -> IF ( expresion ) THEN { estatutos } condicionp .)


state 228

    (88) condicionp -> ELSE . { estatutos }

    {               shift and go to state 232


state 229

    (89) condicionp -> empty .

    }               reduce using rule 89 (condicionp -> empty .)
    CALL            reduce using rule 89 (condicionp -> empty .)
    WHILE           reduce using rule 89 (condicionp -> empty .)
    FOR             reduce using rule 89 (condicionp -> empty .)
    IF              reduce using rule 89 (condicionp -> empty .)
    ID              reduce using rule 89 (condicionp -> empty .)


state 230

    (15) funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc .

    MAIN            reduce using rule 15 (funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc .)
    FUNC            reduce using rule 15 (funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc .)
    }               reduce using rule 15 (funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc .)


state 231

    (16) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } . f_endfunc
    (20) f_endfunc -> .

    MAIN            reduce using rule 20 (f_endfunc -> .)
    FUNC            reduce using rule 20 (f_endfunc -> .)
    }               reduce using rule 20 (f_endfunc -> .)

    f_endfunc                      shift and go to state 233

state 232

    (88) condicionp -> ELSE { . estatutos }
    (44) estatutos -> . estatutos estatuto
    (45) estatutos -> . empty
    (103) empty -> .

    }               reduce using rule 103 (empty -> .)
    CALL            reduce using rule 103 (empty -> .)
    WHILE           reduce using rule 103 (empty -> .)
    FOR             reduce using rule 103 (empty -> .)
    IF              reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)

    estatutos                      shift and go to state 234
    empty                          shift and go to state 81

state 233

    (16) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc .

    MAIN            reduce using rule 16 (funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc .)
    FUNC            reduce using rule 16 (funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc .)
    }               reduce using rule 16 (funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc .)


state 234

    (88) condicionp -> ELSE { estatutos . }
    (44) estatutos -> estatutos . estatuto
    (46) estatuto -> . asignacion
    (47) estatuto -> . while
    (48) estatuto -> . for
    (49) estatuto -> . condicion
    (50) estatuto -> . CALL call_func ;
    (63) asignacion -> . var = f_oper expresion ;
    (90) while -> . WHILE ( expresion ) DO { estatutos }
    (91) for -> . FOR expresion TO expresion { estatutos }
    (87) condicion -> . IF ( expresion ) THEN { estatutos } condicionp
    (64) var -> . ID f_varobj : ID f_verify_type_composite dimension
    (65) var -> . ID f_verify_type dimension

    }               shift and go to state 235
    CALL            shift and go to state 113
    WHILE           shift and go to state 115
    FOR             shift and go to state 116
    IF              shift and go to state 117
    ID              shift and go to state 45

    estatuto                       shift and go to state 108
    asignacion                     shift and go to state 109
    while                          shift and go to state 110
    for                            shift and go to state 111
    condicion                      shift and go to state 112
    var                            shift and go to state 114

state 235

    (88) condicionp -> ELSE { estatutos } .

    }               reduce using rule 88 (condicionp -> ELSE { estatutos } .)
    CALL            reduce using rule 88 (condicionp -> ELSE { estatutos } .)
    WHILE           reduce using rule 88 (condicionp -> ELSE { estatutos } .)
    FOR             reduce using rule 88 (condicionp -> ELSE { estatutos } .)
    IF              reduce using rule 88 (condicionp -> ELSE { estatutos } .)
    ID              reduce using rule 88 (condicionp -> ELSE { estatutos } .)

