Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ;
Rule 2     f_start -> <empty>
Rule 3     f_prog -> <empty>
Rule 4     f_main -> <empty>
Rule 5     f_end -> <empty>
Rule 6     clases -> clases clase
Rule 7     clases -> empty
Rule 8     clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass
Rule 9     clase -> TYPE ID f_startclass { cvars f_cvars funciones } f_endclass
Rule 10    f_startclass -> <empty>
Rule 11    f_clasepadre -> <empty>
Rule 12    cvars -> cvars DEF tipo dimension : lista_id ;
Rule 13    cvars -> empty
Rule 14    f_cvars -> <empty>
Rule 15    f_endclass -> <empty>
Rule 16    funciones -> funciones funcion
Rule 17    funciones -> empty
Rule 18    funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { cvars estatutos } f_endfunc
Rule 19    funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { cvars estatutos } f_endfunc
Rule 20    f_startfunc -> <empty>
Rule 21    f_nothing -> <empty>
Rule 22    f_tipofunc -> <empty>
Rule 23    f_endfunc -> <empty>
Rule 24    vars -> vars DEF tipo dimension : lista_id ;
Rule 25    vars -> vars DEF ID f_varsobj : lista_id_obj ;
Rule 26    vars -> empty
Rule 27    f_varsobj -> <empty>
Rule 28    lista_id -> ID f_vars
Rule 29    lista_id -> lista_id , ID f_vars
Rule 30    f_vars -> <empty>
Rule 31    lista_id_obj -> ID f_vars_obj
Rule 32    lista_id_obj -> lista_id_obj , ID f_vars_obj
Rule 33    f_vars_obj -> <empty>
Rule 34    dimension -> [ NUM f_dim1 ] f_enddim
Rule 35    dimension -> [ NUM f_dim1 ] [ NUM f_dim2 ] f_enddim
Rule 36    dimension -> empty
Rule 37    f_dim1 -> <empty>
Rule 38    f_dim2 -> <empty>
Rule 39    f_enddim -> <empty>
Rule 40    tipo -> NUMBER
Rule 41    tipo -> STRING
Rule 42    params -> pparams
Rule 43    params -> empty
Rule 44    pparams -> tipo ID f_param
Rule 45    pparams -> pparams , tipo ID f_param
Rule 46    f_param -> <empty>
Rule 47    estatutos -> estatutos estatuto
Rule 48    estatutos -> empty
Rule 49    estatuto -> asignacion
Rule 50    estatuto -> while
Rule 51    estatuto -> for
Rule 52    estatuto -> condicion
Rule 53    estatuto -> CALL call_func ;
Rule 54    call_func -> func f_end_call f_end_check
Rule 55    call_func -> input
Rule 56    call_func -> write
Rule 57    call_func -> to_num
Rule 58    call_func -> to_str
Rule 59    call_func -> return
Rule 60    f_end_call -> <empty>
Rule 61    func -> ID f_verify_func ( args )
Rule 62    func -> ID f_varobj : ID f_verify_func_composite ( args )
Rule 63    f_verify_func -> <empty>
Rule 64    f_varobj -> <empty>
Rule 65    f_verify_func_composite -> <empty>
Rule 66    args -> args_list f_end_args
Rule 67    args -> f_end_args
Rule 68    args_list -> expresion f_arg
Rule 69    args_list -> args_list , expresion f_arg
Rule 70    f_arg -> <empty>
Rule 71    f_end_args -> <empty>
Rule 72    asignacion -> var = f_oper expresion ;
Rule 73    var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check
Rule 74    var -> ID f_verify_type indexacion f_end_check
Rule 75    indexacion -> f_start_array [ expresion f_index ] f_end_array
Rule 76    indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array
Rule 77    indexacion -> f_no_index empty
Rule 78    f_end_check -> <empty>
Rule 79    f_verify_type -> <empty>
Rule 80    f_verify_type_composite -> <empty>
Rule 81    f_no_index -> <empty>
Rule 82    f_start_array -> <empty>
Rule 83    f_index -> <empty>
Rule 84    f_next_index -> <empty>
Rule 85    f_end_array -> <empty>
Rule 86    expresion -> exp
Rule 87    expresion -> expresion COMP f_oper exp f_expres
Rule 88    f_expres -> <empty>
Rule 89    exp -> term
Rule 90    exp -> exp OPTERM f_oper term f_exp
Rule 91    f_exp -> <empty>
Rule 92    term -> fact
Rule 93    term -> term OPFACT f_oper fact f_term
Rule 94    f_term -> <empty>
Rule 95    f_oper -> <empty>
Rule 96    fact -> ( lparen expresion ) rparen
Rule 97    fact -> var
Rule 98    fact -> NUM f_fact
Rule 99    fact -> OPTERM NUM
Rule 100   fact -> CALL func f_return_val f_end_call f_end_check
Rule 101   fact -> STR f_string
Rule 102   fact -> fact & f_oper var f_concat
Rule 103   fact -> fact & f_oper STR f_string f_concat
Rule 104   f_concat -> <empty>
Rule 105   lparen -> <empty>
Rule 106   rparen -> <empty>
Rule 107   f_fact -> <empty>
Rule 108   f_return_val -> <empty>
Rule 109   condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
Rule 110   condicionp -> ELSE f_else { estatutos }
Rule 111   condicionp -> empty
Rule 112   f_if -> <empty>
Rule 113   f_endif -> <empty>
Rule 114   f_else -> <empty>
Rule 115   while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
Rule 116   f_while -> <empty>
Rule 117   f_exprwhile -> <empty>
Rule 118   f_endwhile -> <empty>
Rule 119   for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
Rule 120   f_for_start -> <empty>
Rule 121   f_for_to -> <empty>
Rule 122   f_for_end -> <empty>
Rule 123   to_num -> TO_NUMBER ( STR )
Rule 124   to_num -> TO_NUMBER ( var )
Rule 125   to_str -> TO_STRING ( expresion )
Rule 126   input -> INPUT ( var )
Rule 127   write -> PRINT ( write_list )
Rule 128   write_list -> write_list & write_listp
Rule 129   write_list -> write_listp
Rule 130   write_listp -> STR f_string
Rule 131   write_listp -> var
Rule 132   write_listp -> CALL to_str
Rule 133   f_string -> <empty>
Rule 134   return -> RET ( expresion )
Rule 135   empty -> <empty>

Terminals, with rules where they appear

&                    : 102 103 128
(                    : 1 18 19 61 62 96 109 115 123 124 125 126 127 134
)                    : 1 18 19 61 62 96 109 115 123 124 125 126 127 134
,                    : 29 32 45 69
:                    : 8 12 18 19 24 25 62 73
;                    : 1 1 12 24 25 53 72
=                    : 72
CALL                 : 53 100 132
COMP                 : 87
DEF                  : 12 24 25
DO                   : 115
ELSE                 : 110
END                  : 1
FOR                  : 119
FUNC                 : 18 19
ID                   : 1 8 8 9 18 19 25 28 29 31 32 44 45 61 62 62 73 73 74
IF                   : 109
INPUT                : 126
MAIN                 : 1
NOTHING              : 19
NUM                  : 34 35 35 98 99
NUMBER               : 40
OPFACT               : 93
OPTERM               : 90 99
PRINT                : 127
PROGRAM              : 1
RET                  : 134
STR                  : 101 103 123 130
STRING               : 41
THEN                 : 109
TO                   : 119
TO_NUMBER            : 123 124
TO_STRING            : 125
TYPE                 : 8 9
WHILE                : 115
[                    : 34 35 35 75 76 76
]                    : 34 35 35 75 76 76
error                : 
{                    : 1 8 9 18 19 109 110 115 119
}                    : 1 8 9 18 19 109 110 115 119

Nonterminals, with rules where they appear

args                 : 61 62
args_list            : 66 69
asignacion           : 49
call_func            : 53
clase                : 6
clases               : 1 6
condicion            : 52
condicionp           : 109
cvars                : 8 9 12 18 19
dimension            : 12 24
empty                : 7 13 17 26 36 43 48 77 111
estatuto             : 47
estatutos            : 1 18 19 47 109 110 115 119
exp                  : 86 87 90
expresion            : 68 69 72 75 76 76 87 96 109 115 119 119 125 134
f_arg                : 68 69
f_clasepadre         : 8
f_concat             : 102 103
f_cvars              : 8 9
f_dim1               : 34 35
f_dim2               : 35
f_else               : 110
f_end                : 1
f_end_args           : 66 67
f_end_array          : 75 76
f_end_call           : 54 100
f_end_check          : 54 73 74 100
f_endclass           : 8 9
f_enddim             : 34 35
f_endfunc            : 18 19
f_endif              : 109
f_endwhile           : 115
f_exp                : 90
f_expres             : 87
f_exprwhile          : 115
f_fact               : 98
f_for_end            : 119
f_for_start          : 119
f_for_to             : 119
f_if                 : 109
f_index              : 75 76 76
f_main               : 1
f_next_index         : 76
f_no_index           : 77
f_nothing            : 19
f_oper               : 72 87 90 93 102 103
f_param              : 44 45
f_prog               : 1
f_return_val         : 100
f_start              : 1
f_start_array        : 75 76
f_startclass         : 8 9
f_startfunc          : 18 19
f_string             : 101 103 130
f_term               : 93
f_tipofunc           : 18 19
f_varobj             : 62 73
f_vars               : 28 29
f_vars_obj           : 31 32
f_varsobj            : 25
f_verify_func        : 61
f_verify_func_composite : 62
f_verify_type        : 74
f_verify_type_composite : 73
f_while              : 115
fact                 : 92 93 102 103
for                  : 51
func                 : 54 100
funcion              : 16
funciones            : 1 8 9 16
indexacion           : 73 74
input                : 55
lista_id             : 12 24 29
lista_id_obj         : 25 32
lparen               : 96
params               : 18 19
pparams              : 42 45
return               : 59
rparen               : 96
start                : 0
term                 : 89 90 93
tipo                 : 12 18 24 44 45
to_num               : 57
to_str               : 58 132
var                  : 72 97 102 124 126 131
vars                 : 1 24 25
while                : 50
write                : 56
write_list           : 127 128
write_listp          : 128 129

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ;

    PROGRAM         shift and go to state 2

    start                          shift and go to state 1

state 1

    (0) S' -> start .



state 2

    (1) start -> PROGRAM . f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ;
    (2) f_start -> .

    ID              reduce using rule 2 (f_start -> .)

    f_start                        shift and go to state 3

state 3

    (1) start -> PROGRAM f_start . ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ;

    ID              shift and go to state 4


state 4

    (1) start -> PROGRAM f_start ID . f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ;
    (3) f_prog -> .

    ;               reduce using rule 3 (f_prog -> .)

    f_prog                         shift and go to state 5

state 5

    (1) start -> PROGRAM f_start ID f_prog . ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ;

    ;               shift and go to state 6


state 6

    (1) start -> PROGRAM f_start ID f_prog ; . clases vars funciones MAIN f_main ( ) { estatutos } END f_end ;
    (6) clases -> . clases clase
    (7) clases -> . empty
    (135) empty -> .

    TYPE            reduce using rule 135 (empty -> .)
    DEF             reduce using rule 135 (empty -> .)
    MAIN            reduce using rule 135 (empty -> .)
    FUNC            reduce using rule 135 (empty -> .)

    clases                         shift and go to state 7
    empty                          shift and go to state 8

state 7

    (1) start -> PROGRAM f_start ID f_prog ; clases . vars funciones MAIN f_main ( ) { estatutos } END f_end ;
    (6) clases -> clases . clase
    (24) vars -> . vars DEF tipo dimension : lista_id ;
    (25) vars -> . vars DEF ID f_varsobj : lista_id_obj ;
    (26) vars -> . empty
    (8) clase -> . TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass
    (9) clase -> . TYPE ID f_startclass { cvars f_cvars funciones } f_endclass
    (135) empty -> .

    TYPE            shift and go to state 12
    DEF             reduce using rule 135 (empty -> .)
    MAIN            reduce using rule 135 (empty -> .)
    FUNC            reduce using rule 135 (empty -> .)

    vars                           shift and go to state 9
    clase                          shift and go to state 10
    empty                          shift and go to state 11

state 8

    (7) clases -> empty .

    TYPE            reduce using rule 7 (clases -> empty .)
    DEF             reduce using rule 7 (clases -> empty .)
    MAIN            reduce using rule 7 (clases -> empty .)
    FUNC            reduce using rule 7 (clases -> empty .)


state 9

    (1) start -> PROGRAM f_start ID f_prog ; clases vars . funciones MAIN f_main ( ) { estatutos } END f_end ;
    (24) vars -> vars . DEF tipo dimension : lista_id ;
    (25) vars -> vars . DEF ID f_varsobj : lista_id_obj ;
    (16) funciones -> . funciones funcion
    (17) funciones -> . empty
    (135) empty -> .

    DEF             shift and go to state 14
    MAIN            reduce using rule 135 (empty -> .)
    FUNC            reduce using rule 135 (empty -> .)

    funciones                      shift and go to state 13
    empty                          shift and go to state 15

state 10

    (6) clases -> clases clase .

    TYPE            reduce using rule 6 (clases -> clases clase .)
    DEF             reduce using rule 6 (clases -> clases clase .)
    MAIN            reduce using rule 6 (clases -> clases clase .)
    FUNC            reduce using rule 6 (clases -> clases clase .)


state 11

    (26) vars -> empty .

    DEF             reduce using rule 26 (vars -> empty .)
    MAIN            reduce using rule 26 (vars -> empty .)
    FUNC            reduce using rule 26 (vars -> empty .)


state 12

    (8) clase -> TYPE . ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass
    (9) clase -> TYPE . ID f_startclass { cvars f_cvars funciones } f_endclass

    ID              shift and go to state 16


state 13

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones . MAIN f_main ( ) { estatutos } END f_end ;
    (16) funciones -> funciones . funcion
    (18) funcion -> . FUNC ID f_startfunc ( params ) : tipo f_tipofunc { cvars estatutos } f_endfunc
    (19) funcion -> . FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { cvars estatutos } f_endfunc

    MAIN            shift and go to state 17
    FUNC            shift and go to state 19

    funcion                        shift and go to state 18

state 14

    (24) vars -> vars DEF . tipo dimension : lista_id ;
    (25) vars -> vars DEF . ID f_varsobj : lista_id_obj ;
    (40) tipo -> . NUMBER
    (41) tipo -> . STRING

    ID              shift and go to state 21
    NUMBER          shift and go to state 22
    STRING          shift and go to state 23

    tipo                           shift and go to state 20

state 15

    (17) funciones -> empty .

    MAIN            reduce using rule 17 (funciones -> empty .)
    FUNC            reduce using rule 17 (funciones -> empty .)
    }               reduce using rule 17 (funciones -> empty .)


state 16

    (8) clase -> TYPE ID . f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass
    (9) clase -> TYPE ID . f_startclass { cvars f_cvars funciones } f_endclass
    (10) f_startclass -> .

    :               reduce using rule 10 (f_startclass -> .)
    {               reduce using rule 10 (f_startclass -> .)

    f_startclass                   shift and go to state 24

state 17

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN . f_main ( ) { estatutos } END f_end ;
    (4) f_main -> .

    (               reduce using rule 4 (f_main -> .)

    f_main                         shift and go to state 25

state 18

    (16) funciones -> funciones funcion .

    MAIN            reduce using rule 16 (funciones -> funciones funcion .)
    FUNC            reduce using rule 16 (funciones -> funciones funcion .)
    }               reduce using rule 16 (funciones -> funciones funcion .)


state 19

    (18) funcion -> FUNC . ID f_startfunc ( params ) : tipo f_tipofunc { cvars estatutos } f_endfunc
    (19) funcion -> FUNC . ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { cvars estatutos } f_endfunc

    ID              shift and go to state 26


state 20

    (24) vars -> vars DEF tipo . dimension : lista_id ;
    (34) dimension -> . [ NUM f_dim1 ] f_enddim
    (35) dimension -> . [ NUM f_dim1 ] [ NUM f_dim2 ] f_enddim
    (36) dimension -> . empty
    (135) empty -> .

    [               shift and go to state 28
    :               reduce using rule 135 (empty -> .)

    dimension                      shift and go to state 27
    empty                          shift and go to state 29

state 21

    (25) vars -> vars DEF ID . f_varsobj : lista_id_obj ;
    (27) f_varsobj -> .

    :               reduce using rule 27 (f_varsobj -> .)

    f_varsobj                      shift and go to state 30

state 22

    (40) tipo -> NUMBER .

    [               reduce using rule 40 (tipo -> NUMBER .)
    :               reduce using rule 40 (tipo -> NUMBER .)
    ID              reduce using rule 40 (tipo -> NUMBER .)
    {               reduce using rule 40 (tipo -> NUMBER .)


state 23

    (41) tipo -> STRING .

    [               reduce using rule 41 (tipo -> STRING .)
    :               reduce using rule 41 (tipo -> STRING .)
    ID              reduce using rule 41 (tipo -> STRING .)
    {               reduce using rule 41 (tipo -> STRING .)


state 24

    (8) clase -> TYPE ID f_startclass . : ID f_clasepadre { cvars f_cvars funciones } f_endclass
    (9) clase -> TYPE ID f_startclass . { cvars f_cvars funciones } f_endclass

    :               shift and go to state 31
    {               shift and go to state 32


state 25

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main . ( ) { estatutos } END f_end ;

    (               shift and go to state 33


state 26

    (18) funcion -> FUNC ID . f_startfunc ( params ) : tipo f_tipofunc { cvars estatutos } f_endfunc
    (19) funcion -> FUNC ID . f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { cvars estatutos } f_endfunc
    (20) f_startfunc -> .

    (               reduce using rule 20 (f_startfunc -> .)

    f_startfunc                    shift and go to state 34

state 27

    (24) vars -> vars DEF tipo dimension . : lista_id ;

    :               shift and go to state 35


state 28

    (34) dimension -> [ . NUM f_dim1 ] f_enddim
    (35) dimension -> [ . NUM f_dim1 ] [ NUM f_dim2 ] f_enddim

    NUM             shift and go to state 36


state 29

    (36) dimension -> empty .

    :               reduce using rule 36 (dimension -> empty .)


state 30

    (25) vars -> vars DEF ID f_varsobj . : lista_id_obj ;

    :               shift and go to state 37


state 31

    (8) clase -> TYPE ID f_startclass : . ID f_clasepadre { cvars f_cvars funciones } f_endclass

    ID              shift and go to state 38


state 32

    (9) clase -> TYPE ID f_startclass { . cvars f_cvars funciones } f_endclass
    (12) cvars -> . cvars DEF tipo dimension : lista_id ;
    (13) cvars -> . empty
    (135) empty -> .

    DEF             reduce using rule 135 (empty -> .)
    }               reduce using rule 135 (empty -> .)
    FUNC            reduce using rule 135 (empty -> .)

    cvars                          shift and go to state 39
    empty                          shift and go to state 40

state 33

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( . ) { estatutos } END f_end ;

    )               shift and go to state 41


state 34

    (18) funcion -> FUNC ID f_startfunc . ( params ) : tipo f_tipofunc { cvars estatutos } f_endfunc
    (19) funcion -> FUNC ID f_startfunc . ( params ) : NOTHING f_nothing f_tipofunc { cvars estatutos } f_endfunc

    (               shift and go to state 42


state 35

    (24) vars -> vars DEF tipo dimension : . lista_id ;
    (28) lista_id -> . ID f_vars
    (29) lista_id -> . lista_id , ID f_vars

    ID              shift and go to state 44

    lista_id                       shift and go to state 43

state 36

    (34) dimension -> [ NUM . f_dim1 ] f_enddim
    (35) dimension -> [ NUM . f_dim1 ] [ NUM f_dim2 ] f_enddim
    (37) f_dim1 -> .

    ]               reduce using rule 37 (f_dim1 -> .)

    f_dim1                         shift and go to state 45

state 37

    (25) vars -> vars DEF ID f_varsobj : . lista_id_obj ;
    (31) lista_id_obj -> . ID f_vars_obj
    (32) lista_id_obj -> . lista_id_obj , ID f_vars_obj

    ID              shift and go to state 46

    lista_id_obj                   shift and go to state 47

state 38

    (8) clase -> TYPE ID f_startclass : ID . f_clasepadre { cvars f_cvars funciones } f_endclass
    (11) f_clasepadre -> .

    {               reduce using rule 11 (f_clasepadre -> .)

    f_clasepadre                   shift and go to state 48

state 39

    (9) clase -> TYPE ID f_startclass { cvars . f_cvars funciones } f_endclass
    (12) cvars -> cvars . DEF tipo dimension : lista_id ;
    (14) f_cvars -> .

    DEF             shift and go to state 50
    }               reduce using rule 14 (f_cvars -> .)
    FUNC            reduce using rule 14 (f_cvars -> .)

    f_cvars                        shift and go to state 49

state 40

    (13) cvars -> empty .

    DEF             reduce using rule 13 (cvars -> empty .)
    }               reduce using rule 13 (cvars -> empty .)
    FUNC            reduce using rule 13 (cvars -> empty .)
    CALL            reduce using rule 13 (cvars -> empty .)
    WHILE           reduce using rule 13 (cvars -> empty .)
    FOR             reduce using rule 13 (cvars -> empty .)
    IF              reduce using rule 13 (cvars -> empty .)
    ID              reduce using rule 13 (cvars -> empty .)


state 41

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) . { estatutos } END f_end ;

    {               shift and go to state 51


state 42

    (18) funcion -> FUNC ID f_startfunc ( . params ) : tipo f_tipofunc { cvars estatutos } f_endfunc
    (19) funcion -> FUNC ID f_startfunc ( . params ) : NOTHING f_nothing f_tipofunc { cvars estatutos } f_endfunc
    (42) params -> . pparams
    (43) params -> . empty
    (44) pparams -> . tipo ID f_param
    (45) pparams -> . pparams , tipo ID f_param
    (135) empty -> .
    (40) tipo -> . NUMBER
    (41) tipo -> . STRING

    )               reduce using rule 135 (empty -> .)
    NUMBER          shift and go to state 22
    STRING          shift and go to state 23

    params                         shift and go to state 52
    tipo                           shift and go to state 53
    pparams                        shift and go to state 54
    empty                          shift and go to state 55

state 43

    (24) vars -> vars DEF tipo dimension : lista_id . ;
    (29) lista_id -> lista_id . , ID f_vars

    ;               shift and go to state 56
    ,               shift and go to state 57


state 44

    (28) lista_id -> ID . f_vars
    (30) f_vars -> .

    ;               reduce using rule 30 (f_vars -> .)
    ,               reduce using rule 30 (f_vars -> .)

    f_vars                         shift and go to state 58

state 45

    (34) dimension -> [ NUM f_dim1 . ] f_enddim
    (35) dimension -> [ NUM f_dim1 . ] [ NUM f_dim2 ] f_enddim

    ]               shift and go to state 59


state 46

    (31) lista_id_obj -> ID . f_vars_obj
    (33) f_vars_obj -> .

    ;               reduce using rule 33 (f_vars_obj -> .)
    ,               reduce using rule 33 (f_vars_obj -> .)

    f_vars_obj                     shift and go to state 60

state 47

    (25) vars -> vars DEF ID f_varsobj : lista_id_obj . ;
    (32) lista_id_obj -> lista_id_obj . , ID f_vars_obj

    ;               shift and go to state 61
    ,               shift and go to state 62


state 48

    (8) clase -> TYPE ID f_startclass : ID f_clasepadre . { cvars f_cvars funciones } f_endclass

    {               shift and go to state 63


state 49

    (9) clase -> TYPE ID f_startclass { cvars f_cvars . funciones } f_endclass
    (16) funciones -> . funciones funcion
    (17) funciones -> . empty
    (135) empty -> .

    }               reduce using rule 135 (empty -> .)
    FUNC            reduce using rule 135 (empty -> .)

    funciones                      shift and go to state 64
    empty                          shift and go to state 15

state 50

    (12) cvars -> cvars DEF . tipo dimension : lista_id ;
    (40) tipo -> . NUMBER
    (41) tipo -> . STRING

    NUMBER          shift and go to state 22
    STRING          shift and go to state 23

    tipo                           shift and go to state 65

state 51

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { . estatutos } END f_end ;
    (47) estatutos -> . estatutos estatuto
    (48) estatutos -> . empty
    (135) empty -> .

    }               reduce using rule 135 (empty -> .)
    CALL            reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    FOR             reduce using rule 135 (empty -> .)
    IF              reduce using rule 135 (empty -> .)
    ID              reduce using rule 135 (empty -> .)

    estatutos                      shift and go to state 66
    empty                          shift and go to state 67

state 52

    (18) funcion -> FUNC ID f_startfunc ( params . ) : tipo f_tipofunc { cvars estatutos } f_endfunc
    (19) funcion -> FUNC ID f_startfunc ( params . ) : NOTHING f_nothing f_tipofunc { cvars estatutos } f_endfunc

    )               shift and go to state 68


state 53

    (44) pparams -> tipo . ID f_param

    ID              shift and go to state 69


state 54

    (42) params -> pparams .
    (45) pparams -> pparams . , tipo ID f_param

    )               reduce using rule 42 (params -> pparams .)
    ,               shift and go to state 70


state 55

    (43) params -> empty .

    )               reduce using rule 43 (params -> empty .)


state 56

    (24) vars -> vars DEF tipo dimension : lista_id ; .

    DEF             reduce using rule 24 (vars -> vars DEF tipo dimension : lista_id ; .)
    MAIN            reduce using rule 24 (vars -> vars DEF tipo dimension : lista_id ; .)
    FUNC            reduce using rule 24 (vars -> vars DEF tipo dimension : lista_id ; .)


state 57

    (29) lista_id -> lista_id , . ID f_vars

    ID              shift and go to state 71


state 58

    (28) lista_id -> ID f_vars .

    ;               reduce using rule 28 (lista_id -> ID f_vars .)
    ,               reduce using rule 28 (lista_id -> ID f_vars .)


state 59

    (34) dimension -> [ NUM f_dim1 ] . f_enddim
    (35) dimension -> [ NUM f_dim1 ] . [ NUM f_dim2 ] f_enddim
    (39) f_enddim -> .

    [               shift and go to state 72
    :               reduce using rule 39 (f_enddim -> .)

    f_enddim                       shift and go to state 73

state 60

    (31) lista_id_obj -> ID f_vars_obj .

    ;               reduce using rule 31 (lista_id_obj -> ID f_vars_obj .)
    ,               reduce using rule 31 (lista_id_obj -> ID f_vars_obj .)


state 61

    (25) vars -> vars DEF ID f_varsobj : lista_id_obj ; .

    DEF             reduce using rule 25 (vars -> vars DEF ID f_varsobj : lista_id_obj ; .)
    MAIN            reduce using rule 25 (vars -> vars DEF ID f_varsobj : lista_id_obj ; .)
    FUNC            reduce using rule 25 (vars -> vars DEF ID f_varsobj : lista_id_obj ; .)


state 62

    (32) lista_id_obj -> lista_id_obj , . ID f_vars_obj

    ID              shift and go to state 74


state 63

    (8) clase -> TYPE ID f_startclass : ID f_clasepadre { . cvars f_cvars funciones } f_endclass
    (12) cvars -> . cvars DEF tipo dimension : lista_id ;
    (13) cvars -> . empty
    (135) empty -> .

    DEF             reduce using rule 135 (empty -> .)
    }               reduce using rule 135 (empty -> .)
    FUNC            reduce using rule 135 (empty -> .)

    cvars                          shift and go to state 75
    empty                          shift and go to state 40

state 64

    (9) clase -> TYPE ID f_startclass { cvars f_cvars funciones . } f_endclass
    (16) funciones -> funciones . funcion
    (18) funcion -> . FUNC ID f_startfunc ( params ) : tipo f_tipofunc { cvars estatutos } f_endfunc
    (19) funcion -> . FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { cvars estatutos } f_endfunc

    }               shift and go to state 76
    FUNC            shift and go to state 19

    funcion                        shift and go to state 18

state 65

    (12) cvars -> cvars DEF tipo . dimension : lista_id ;
    (34) dimension -> . [ NUM f_dim1 ] f_enddim
    (35) dimension -> . [ NUM f_dim1 ] [ NUM f_dim2 ] f_enddim
    (36) dimension -> . empty
    (135) empty -> .

    [               shift and go to state 28
    :               reduce using rule 135 (empty -> .)

    dimension                      shift and go to state 77
    empty                          shift and go to state 29

state 66

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos . } END f_end ;
    (47) estatutos -> estatutos . estatuto
    (49) estatuto -> . asignacion
    (50) estatuto -> . while
    (51) estatuto -> . for
    (52) estatuto -> . condicion
    (53) estatuto -> . CALL call_func ;
    (72) asignacion -> . var = f_oper expresion ;
    (115) while -> . WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (119) for -> . FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (109) condicion -> . IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    }               shift and go to state 79
    CALL            shift and go to state 85
    WHILE           shift and go to state 87
    FOR             shift and go to state 88
    IF              shift and go to state 89
    ID              shift and go to state 78

    estatuto                       shift and go to state 80
    asignacion                     shift and go to state 81
    while                          shift and go to state 82
    for                            shift and go to state 83
    condicion                      shift and go to state 84
    var                            shift and go to state 86

state 67

    (48) estatutos -> empty .

    }               reduce using rule 48 (estatutos -> empty .)
    CALL            reduce using rule 48 (estatutos -> empty .)
    WHILE           reduce using rule 48 (estatutos -> empty .)
    FOR             reduce using rule 48 (estatutos -> empty .)
    IF              reduce using rule 48 (estatutos -> empty .)
    ID              reduce using rule 48 (estatutos -> empty .)


state 68

    (18) funcion -> FUNC ID f_startfunc ( params ) . : tipo f_tipofunc { cvars estatutos } f_endfunc
    (19) funcion -> FUNC ID f_startfunc ( params ) . : NOTHING f_nothing f_tipofunc { cvars estatutos } f_endfunc

    :               shift and go to state 90


state 69

    (44) pparams -> tipo ID . f_param
    (46) f_param -> .

    ,               reduce using rule 46 (f_param -> .)
    )               reduce using rule 46 (f_param -> .)

    f_param                        shift and go to state 91

state 70

    (45) pparams -> pparams , . tipo ID f_param
    (40) tipo -> . NUMBER
    (41) tipo -> . STRING

    NUMBER          shift and go to state 22
    STRING          shift and go to state 23

    tipo                           shift and go to state 92

state 71

    (29) lista_id -> lista_id , ID . f_vars
    (30) f_vars -> .

    ;               reduce using rule 30 (f_vars -> .)
    ,               reduce using rule 30 (f_vars -> .)

    f_vars                         shift and go to state 93

state 72

    (35) dimension -> [ NUM f_dim1 ] [ . NUM f_dim2 ] f_enddim

    NUM             shift and go to state 94


state 73

    (34) dimension -> [ NUM f_dim1 ] f_enddim .

    :               reduce using rule 34 (dimension -> [ NUM f_dim1 ] f_enddim .)


state 74

    (32) lista_id_obj -> lista_id_obj , ID . f_vars_obj
    (33) f_vars_obj -> .

    ;               reduce using rule 33 (f_vars_obj -> .)
    ,               reduce using rule 33 (f_vars_obj -> .)

    f_vars_obj                     shift and go to state 95

state 75

    (8) clase -> TYPE ID f_startclass : ID f_clasepadre { cvars . f_cvars funciones } f_endclass
    (12) cvars -> cvars . DEF tipo dimension : lista_id ;
    (14) f_cvars -> .

    DEF             shift and go to state 50
    }               reduce using rule 14 (f_cvars -> .)
    FUNC            reduce using rule 14 (f_cvars -> .)

    f_cvars                        shift and go to state 96

state 76

    (9) clase -> TYPE ID f_startclass { cvars f_cvars funciones } . f_endclass
    (15) f_endclass -> .

    TYPE            reduce using rule 15 (f_endclass -> .)
    DEF             reduce using rule 15 (f_endclass -> .)
    MAIN            reduce using rule 15 (f_endclass -> .)
    FUNC            reduce using rule 15 (f_endclass -> .)

    f_endclass                     shift and go to state 97

state 77

    (12) cvars -> cvars DEF tipo dimension . : lista_id ;

    :               shift and go to state 98


state 78

    (73) var -> ID . f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> ID . f_verify_type indexacion f_end_check
    (64) f_varobj -> .
    (79) f_verify_type -> .

    :               reduce using rule 64 (f_varobj -> .)
    [               reduce using rule 79 (f_verify_type -> .)
    =               reduce using rule 79 (f_verify_type -> .)
    &               reduce using rule 79 (f_verify_type -> .)
    OPFACT          reduce using rule 79 (f_verify_type -> .)
    OPTERM          reduce using rule 79 (f_verify_type -> .)
    COMP            reduce using rule 79 (f_verify_type -> .)
    TO              reduce using rule 79 (f_verify_type -> .)
    )               reduce using rule 79 (f_verify_type -> .)
    ;               reduce using rule 79 (f_verify_type -> .)
    ]               reduce using rule 79 (f_verify_type -> .)
    ,               reduce using rule 79 (f_verify_type -> .)
    {               reduce using rule 79 (f_verify_type -> .)

    f_varobj                       shift and go to state 99
    f_verify_type                  shift and go to state 100

state 79

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } . END f_end ;

    END             shift and go to state 101


state 80

    (47) estatutos -> estatutos estatuto .

    }               reduce using rule 47 (estatutos -> estatutos estatuto .)
    CALL            reduce using rule 47 (estatutos -> estatutos estatuto .)
    WHILE           reduce using rule 47 (estatutos -> estatutos estatuto .)
    FOR             reduce using rule 47 (estatutos -> estatutos estatuto .)
    IF              reduce using rule 47 (estatutos -> estatutos estatuto .)
    ID              reduce using rule 47 (estatutos -> estatutos estatuto .)


state 81

    (49) estatuto -> asignacion .

    }               reduce using rule 49 (estatuto -> asignacion .)
    CALL            reduce using rule 49 (estatuto -> asignacion .)
    WHILE           reduce using rule 49 (estatuto -> asignacion .)
    FOR             reduce using rule 49 (estatuto -> asignacion .)
    IF              reduce using rule 49 (estatuto -> asignacion .)
    ID              reduce using rule 49 (estatuto -> asignacion .)


state 82

    (50) estatuto -> while .

    }               reduce using rule 50 (estatuto -> while .)
    CALL            reduce using rule 50 (estatuto -> while .)
    WHILE           reduce using rule 50 (estatuto -> while .)
    FOR             reduce using rule 50 (estatuto -> while .)
    IF              reduce using rule 50 (estatuto -> while .)
    ID              reduce using rule 50 (estatuto -> while .)


state 83

    (51) estatuto -> for .

    }               reduce using rule 51 (estatuto -> for .)
    CALL            reduce using rule 51 (estatuto -> for .)
    WHILE           reduce using rule 51 (estatuto -> for .)
    FOR             reduce using rule 51 (estatuto -> for .)
    IF              reduce using rule 51 (estatuto -> for .)
    ID              reduce using rule 51 (estatuto -> for .)


state 84

    (52) estatuto -> condicion .

    }               reduce using rule 52 (estatuto -> condicion .)
    CALL            reduce using rule 52 (estatuto -> condicion .)
    WHILE           reduce using rule 52 (estatuto -> condicion .)
    FOR             reduce using rule 52 (estatuto -> condicion .)
    IF              reduce using rule 52 (estatuto -> condicion .)
    ID              reduce using rule 52 (estatuto -> condicion .)


state 85

    (53) estatuto -> CALL . call_func ;
    (54) call_func -> . func f_end_call f_end_check
    (55) call_func -> . input
    (56) call_func -> . write
    (57) call_func -> . to_num
    (58) call_func -> . to_str
    (59) call_func -> . return
    (61) func -> . ID f_verify_func ( args )
    (62) func -> . ID f_varobj : ID f_verify_func_composite ( args )
    (126) input -> . INPUT ( var )
    (127) write -> . PRINT ( write_list )
    (123) to_num -> . TO_NUMBER ( STR )
    (124) to_num -> . TO_NUMBER ( var )
    (125) to_str -> . TO_STRING ( expresion )
    (134) return -> . RET ( expresion )

    ID              shift and go to state 109
    INPUT           shift and go to state 110
    PRINT           shift and go to state 111
    TO_NUMBER       shift and go to state 112
    TO_STRING       shift and go to state 113
    RET             shift and go to state 114

    call_func                      shift and go to state 102
    func                           shift and go to state 103
    input                          shift and go to state 104
    write                          shift and go to state 105
    to_num                         shift and go to state 106
    to_str                         shift and go to state 107
    return                         shift and go to state 108

state 86

    (72) asignacion -> var . = f_oper expresion ;

    =               shift and go to state 115


state 87

    (115) while -> WHILE . f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (116) f_while -> .

    (               reduce using rule 116 (f_while -> .)

    f_while                        shift and go to state 116

state 88

    (119) for -> FOR . expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (86) expresion -> . exp
    (87) expresion -> . expresion COMP f_oper exp f_expres
    (89) exp -> . term
    (90) exp -> . exp OPTERM f_oper term f_exp
    (92) term -> . fact
    (93) term -> . term OPFACT f_oper fact f_term
    (96) fact -> . ( lparen expresion ) rparen
    (97) fact -> . var
    (98) fact -> . NUM f_fact
    (99) fact -> . OPTERM NUM
    (100) fact -> . CALL func f_return_val f_end_call f_end_check
    (101) fact -> . STR f_string
    (102) fact -> . fact & f_oper var f_concat
    (103) fact -> . fact & f_oper STR f_string f_concat
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    (               shift and go to state 122
    NUM             shift and go to state 124
    OPTERM          shift and go to state 120
    CALL            shift and go to state 125
    STR             shift and go to state 126
    ID              shift and go to state 78

    expresion                      shift and go to state 117
    exp                            shift and go to state 118
    term                           shift and go to state 119
    fact                           shift and go to state 121
    var                            shift and go to state 123

state 89

    (109) condicion -> IF . ( expresion ) f_if THEN { estatutos } condicionp f_endif

    (               shift and go to state 127


state 90

    (18) funcion -> FUNC ID f_startfunc ( params ) : . tipo f_tipofunc { cvars estatutos } f_endfunc
    (19) funcion -> FUNC ID f_startfunc ( params ) : . NOTHING f_nothing f_tipofunc { cvars estatutos } f_endfunc
    (40) tipo -> . NUMBER
    (41) tipo -> . STRING

    NOTHING         shift and go to state 129
    NUMBER          shift and go to state 22
    STRING          shift and go to state 23

    tipo                           shift and go to state 128

state 91

    (44) pparams -> tipo ID f_param .

    ,               reduce using rule 44 (pparams -> tipo ID f_param .)
    )               reduce using rule 44 (pparams -> tipo ID f_param .)


state 92

    (45) pparams -> pparams , tipo . ID f_param

    ID              shift and go to state 130


state 93

    (29) lista_id -> lista_id , ID f_vars .

    ;               reduce using rule 29 (lista_id -> lista_id , ID f_vars .)
    ,               reduce using rule 29 (lista_id -> lista_id , ID f_vars .)


state 94

    (35) dimension -> [ NUM f_dim1 ] [ NUM . f_dim2 ] f_enddim
    (38) f_dim2 -> .

    ]               reduce using rule 38 (f_dim2 -> .)

    f_dim2                         shift and go to state 131

state 95

    (32) lista_id_obj -> lista_id_obj , ID f_vars_obj .

    ;               reduce using rule 32 (lista_id_obj -> lista_id_obj , ID f_vars_obj .)
    ,               reduce using rule 32 (lista_id_obj -> lista_id_obj , ID f_vars_obj .)


state 96

    (8) clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars . funciones } f_endclass
    (16) funciones -> . funciones funcion
    (17) funciones -> . empty
    (135) empty -> .

    }               reduce using rule 135 (empty -> .)
    FUNC            reduce using rule 135 (empty -> .)

    funciones                      shift and go to state 132
    empty                          shift and go to state 15

state 97

    (9) clase -> TYPE ID f_startclass { cvars f_cvars funciones } f_endclass .

    TYPE            reduce using rule 9 (clase -> TYPE ID f_startclass { cvars f_cvars funciones } f_endclass .)
    DEF             reduce using rule 9 (clase -> TYPE ID f_startclass { cvars f_cvars funciones } f_endclass .)
    MAIN            reduce using rule 9 (clase -> TYPE ID f_startclass { cvars f_cvars funciones } f_endclass .)
    FUNC            reduce using rule 9 (clase -> TYPE ID f_startclass { cvars f_cvars funciones } f_endclass .)


state 98

    (12) cvars -> cvars DEF tipo dimension : . lista_id ;
    (28) lista_id -> . ID f_vars
    (29) lista_id -> . lista_id , ID f_vars

    ID              shift and go to state 44

    lista_id                       shift and go to state 133

state 99

    (73) var -> ID f_varobj . : ID f_verify_type_composite indexacion f_end_check

    :               shift and go to state 134


state 100

    (74) var -> ID f_verify_type . indexacion f_end_check
    (75) indexacion -> . f_start_array [ expresion f_index ] f_end_array
    (76) indexacion -> . f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array
    (77) indexacion -> . f_no_index empty
    (82) f_start_array -> .
    (81) f_no_index -> .

    [               reduce using rule 82 (f_start_array -> .)
    =               reduce using rule 81 (f_no_index -> .)
    &               reduce using rule 81 (f_no_index -> .)
    OPFACT          reduce using rule 81 (f_no_index -> .)
    OPTERM          reduce using rule 81 (f_no_index -> .)
    COMP            reduce using rule 81 (f_no_index -> .)
    TO              reduce using rule 81 (f_no_index -> .)
    )               reduce using rule 81 (f_no_index -> .)
    ;               reduce using rule 81 (f_no_index -> .)
    ]               reduce using rule 81 (f_no_index -> .)
    ,               reduce using rule 81 (f_no_index -> .)
    {               reduce using rule 81 (f_no_index -> .)

    indexacion                     shift and go to state 135
    f_start_array                  shift and go to state 136
    f_no_index                     shift and go to state 137

state 101

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END . f_end ;
    (5) f_end -> .

    ;               reduce using rule 5 (f_end -> .)

    f_end                          shift and go to state 138

state 102

    (53) estatuto -> CALL call_func . ;

    ;               shift and go to state 139


state 103

    (54) call_func -> func . f_end_call f_end_check
    (60) f_end_call -> .

    ;               reduce using rule 60 (f_end_call -> .)

    f_end_call                     shift and go to state 140

state 104

    (55) call_func -> input .

    ;               reduce using rule 55 (call_func -> input .)


state 105

    (56) call_func -> write .

    ;               reduce using rule 56 (call_func -> write .)


state 106

    (57) call_func -> to_num .

    ;               reduce using rule 57 (call_func -> to_num .)


state 107

    (58) call_func -> to_str .

    ;               reduce using rule 58 (call_func -> to_str .)


state 108

    (59) call_func -> return .

    ;               reduce using rule 59 (call_func -> return .)


state 109

    (61) func -> ID . f_verify_func ( args )
    (62) func -> ID . f_varobj : ID f_verify_func_composite ( args )
    (63) f_verify_func -> .
    (64) f_varobj -> .

    (               reduce using rule 63 (f_verify_func -> .)
    :               reduce using rule 64 (f_varobj -> .)

    f_verify_func                  shift and go to state 141
    f_varobj                       shift and go to state 142

state 110

    (126) input -> INPUT . ( var )

    (               shift and go to state 143


state 111

    (127) write -> PRINT . ( write_list )

    (               shift and go to state 144


state 112

    (123) to_num -> TO_NUMBER . ( STR )
    (124) to_num -> TO_NUMBER . ( var )

    (               shift and go to state 145


state 113

    (125) to_str -> TO_STRING . ( expresion )

    (               shift and go to state 146


state 114

    (134) return -> RET . ( expresion )

    (               shift and go to state 147


state 115

    (72) asignacion -> var = . f_oper expresion ;
    (95) f_oper -> .

    (               reduce using rule 95 (f_oper -> .)
    NUM             reduce using rule 95 (f_oper -> .)
    OPTERM          reduce using rule 95 (f_oper -> .)
    CALL            reduce using rule 95 (f_oper -> .)
    STR             reduce using rule 95 (f_oper -> .)
    ID              reduce using rule 95 (f_oper -> .)

    f_oper                         shift and go to state 148

state 116

    (115) while -> WHILE f_while . ( expresion f_exprwhile ) DO { estatutos } f_endwhile

    (               shift and go to state 149


state 117

    (119) for -> FOR expresion . f_for_start TO expresion f_for_to { estatutos } f_for_end
    (87) expresion -> expresion . COMP f_oper exp f_expres
    (120) f_for_start -> .

    COMP            shift and go to state 151
    TO              reduce using rule 120 (f_for_start -> .)

    f_for_start                    shift and go to state 150

state 118

    (86) expresion -> exp .
    (90) exp -> exp . OPTERM f_oper term f_exp

    COMP            reduce using rule 86 (expresion -> exp .)
    TO              reduce using rule 86 (expresion -> exp .)
    )               reduce using rule 86 (expresion -> exp .)
    ;               reduce using rule 86 (expresion -> exp .)
    ]               reduce using rule 86 (expresion -> exp .)
    ,               reduce using rule 86 (expresion -> exp .)
    {               reduce using rule 86 (expresion -> exp .)
    OPTERM          shift and go to state 152


state 119

    (89) exp -> term .
    (93) term -> term . OPFACT f_oper fact f_term

    OPTERM          reduce using rule 89 (exp -> term .)
    COMP            reduce using rule 89 (exp -> term .)
    TO              reduce using rule 89 (exp -> term .)
    )               reduce using rule 89 (exp -> term .)
    ;               reduce using rule 89 (exp -> term .)
    ]               reduce using rule 89 (exp -> term .)
    ,               reduce using rule 89 (exp -> term .)
    {               reduce using rule 89 (exp -> term .)
    OPFACT          shift and go to state 153


state 120

    (99) fact -> OPTERM . NUM

    NUM             shift and go to state 154


state 121

    (92) term -> fact .
    (102) fact -> fact . & f_oper var f_concat
    (103) fact -> fact . & f_oper STR f_string f_concat

    OPFACT          reduce using rule 92 (term -> fact .)
    OPTERM          reduce using rule 92 (term -> fact .)
    COMP            reduce using rule 92 (term -> fact .)
    TO              reduce using rule 92 (term -> fact .)
    )               reduce using rule 92 (term -> fact .)
    ;               reduce using rule 92 (term -> fact .)
    ]               reduce using rule 92 (term -> fact .)
    ,               reduce using rule 92 (term -> fact .)
    {               reduce using rule 92 (term -> fact .)
    &               shift and go to state 155


state 122

    (96) fact -> ( . lparen expresion ) rparen
    (105) lparen -> .

    (               reduce using rule 105 (lparen -> .)
    NUM             reduce using rule 105 (lparen -> .)
    OPTERM          reduce using rule 105 (lparen -> .)
    CALL            reduce using rule 105 (lparen -> .)
    STR             reduce using rule 105 (lparen -> .)
    ID              reduce using rule 105 (lparen -> .)

    lparen                         shift and go to state 156

state 123

    (97) fact -> var .

    &               reduce using rule 97 (fact -> var .)
    OPFACT          reduce using rule 97 (fact -> var .)
    OPTERM          reduce using rule 97 (fact -> var .)
    COMP            reduce using rule 97 (fact -> var .)
    TO              reduce using rule 97 (fact -> var .)
    )               reduce using rule 97 (fact -> var .)
    ;               reduce using rule 97 (fact -> var .)
    ]               reduce using rule 97 (fact -> var .)
    ,               reduce using rule 97 (fact -> var .)
    {               reduce using rule 97 (fact -> var .)


state 124

    (98) fact -> NUM . f_fact
    (107) f_fact -> .

    &               reduce using rule 107 (f_fact -> .)
    OPFACT          reduce using rule 107 (f_fact -> .)
    OPTERM          reduce using rule 107 (f_fact -> .)
    COMP            reduce using rule 107 (f_fact -> .)
    TO              reduce using rule 107 (f_fact -> .)
    )               reduce using rule 107 (f_fact -> .)
    ;               reduce using rule 107 (f_fact -> .)
    ]               reduce using rule 107 (f_fact -> .)
    ,               reduce using rule 107 (f_fact -> .)
    {               reduce using rule 107 (f_fact -> .)

    f_fact                         shift and go to state 157

state 125

    (100) fact -> CALL . func f_return_val f_end_call f_end_check
    (61) func -> . ID f_verify_func ( args )
    (62) func -> . ID f_varobj : ID f_verify_func_composite ( args )

    ID              shift and go to state 109

    func                           shift and go to state 158

state 126

    (101) fact -> STR . f_string
    (133) f_string -> .

    &               reduce using rule 133 (f_string -> .)
    OPFACT          reduce using rule 133 (f_string -> .)
    OPTERM          reduce using rule 133 (f_string -> .)
    COMP            reduce using rule 133 (f_string -> .)
    TO              reduce using rule 133 (f_string -> .)
    )               reduce using rule 133 (f_string -> .)
    ;               reduce using rule 133 (f_string -> .)
    ]               reduce using rule 133 (f_string -> .)
    ,               reduce using rule 133 (f_string -> .)
    {               reduce using rule 133 (f_string -> .)

    f_string                       shift and go to state 159

state 127

    (109) condicion -> IF ( . expresion ) f_if THEN { estatutos } condicionp f_endif
    (86) expresion -> . exp
    (87) expresion -> . expresion COMP f_oper exp f_expres
    (89) exp -> . term
    (90) exp -> . exp OPTERM f_oper term f_exp
    (92) term -> . fact
    (93) term -> . term OPFACT f_oper fact f_term
    (96) fact -> . ( lparen expresion ) rparen
    (97) fact -> . var
    (98) fact -> . NUM f_fact
    (99) fact -> . OPTERM NUM
    (100) fact -> . CALL func f_return_val f_end_call f_end_check
    (101) fact -> . STR f_string
    (102) fact -> . fact & f_oper var f_concat
    (103) fact -> . fact & f_oper STR f_string f_concat
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    (               shift and go to state 122
    NUM             shift and go to state 124
    OPTERM          shift and go to state 120
    CALL            shift and go to state 125
    STR             shift and go to state 126
    ID              shift and go to state 78

    expresion                      shift and go to state 160
    exp                            shift and go to state 118
    term                           shift and go to state 119
    fact                           shift and go to state 121
    var                            shift and go to state 123

state 128

    (18) funcion -> FUNC ID f_startfunc ( params ) : tipo . f_tipofunc { cvars estatutos } f_endfunc
    (22) f_tipofunc -> .

    {               reduce using rule 22 (f_tipofunc -> .)

    f_tipofunc                     shift and go to state 161

state 129

    (19) funcion -> FUNC ID f_startfunc ( params ) : NOTHING . f_nothing f_tipofunc { cvars estatutos } f_endfunc
    (21) f_nothing -> .

    {               reduce using rule 21 (f_nothing -> .)

    f_nothing                      shift and go to state 162

state 130

    (45) pparams -> pparams , tipo ID . f_param
    (46) f_param -> .

    ,               reduce using rule 46 (f_param -> .)
    )               reduce using rule 46 (f_param -> .)

    f_param                        shift and go to state 163

state 131

    (35) dimension -> [ NUM f_dim1 ] [ NUM f_dim2 . ] f_enddim

    ]               shift and go to state 164


state 132

    (8) clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones . } f_endclass
    (16) funciones -> funciones . funcion
    (18) funcion -> . FUNC ID f_startfunc ( params ) : tipo f_tipofunc { cvars estatutos } f_endfunc
    (19) funcion -> . FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { cvars estatutos } f_endfunc

    }               shift and go to state 165
    FUNC            shift and go to state 19

    funcion                        shift and go to state 18

state 133

    (12) cvars -> cvars DEF tipo dimension : lista_id . ;
    (29) lista_id -> lista_id . , ID f_vars

    ;               shift and go to state 166
    ,               shift and go to state 57


state 134

    (73) var -> ID f_varobj : . ID f_verify_type_composite indexacion f_end_check

    ID              shift and go to state 167


state 135

    (74) var -> ID f_verify_type indexacion . f_end_check
    (78) f_end_check -> .

    =               reduce using rule 78 (f_end_check -> .)
    &               reduce using rule 78 (f_end_check -> .)
    OPFACT          reduce using rule 78 (f_end_check -> .)
    OPTERM          reduce using rule 78 (f_end_check -> .)
    COMP            reduce using rule 78 (f_end_check -> .)
    TO              reduce using rule 78 (f_end_check -> .)
    )               reduce using rule 78 (f_end_check -> .)
    ;               reduce using rule 78 (f_end_check -> .)
    ]               reduce using rule 78 (f_end_check -> .)
    ,               reduce using rule 78 (f_end_check -> .)
    {               reduce using rule 78 (f_end_check -> .)

    f_end_check                    shift and go to state 168

state 136

    (75) indexacion -> f_start_array . [ expresion f_index ] f_end_array
    (76) indexacion -> f_start_array . [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array

    [               shift and go to state 169


state 137

    (77) indexacion -> f_no_index . empty
    (135) empty -> .

    =               reduce using rule 135 (empty -> .)
    &               reduce using rule 135 (empty -> .)
    OPFACT          reduce using rule 135 (empty -> .)
    OPTERM          reduce using rule 135 (empty -> .)
    COMP            reduce using rule 135 (empty -> .)
    TO              reduce using rule 135 (empty -> .)
    )               reduce using rule 135 (empty -> .)
    ;               reduce using rule 135 (empty -> .)
    ]               reduce using rule 135 (empty -> .)
    ,               reduce using rule 135 (empty -> .)
    {               reduce using rule 135 (empty -> .)

    empty                          shift and go to state 170

state 138

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end . ;

    ;               shift and go to state 171


state 139

    (53) estatuto -> CALL call_func ; .

    }               reduce using rule 53 (estatuto -> CALL call_func ; .)
    CALL            reduce using rule 53 (estatuto -> CALL call_func ; .)
    WHILE           reduce using rule 53 (estatuto -> CALL call_func ; .)
    FOR             reduce using rule 53 (estatuto -> CALL call_func ; .)
    IF              reduce using rule 53 (estatuto -> CALL call_func ; .)
    ID              reduce using rule 53 (estatuto -> CALL call_func ; .)


state 140

    (54) call_func -> func f_end_call . f_end_check
    (78) f_end_check -> .

    ;               reduce using rule 78 (f_end_check -> .)

    f_end_check                    shift and go to state 172

state 141

    (61) func -> ID f_verify_func . ( args )

    (               shift and go to state 173


state 142

    (62) func -> ID f_varobj . : ID f_verify_func_composite ( args )

    :               shift and go to state 174


state 143

    (126) input -> INPUT ( . var )
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    ID              shift and go to state 78

    var                            shift and go to state 175

state 144

    (127) write -> PRINT ( . write_list )
    (128) write_list -> . write_list & write_listp
    (129) write_list -> . write_listp
    (130) write_listp -> . STR f_string
    (131) write_listp -> . var
    (132) write_listp -> . CALL to_str
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    STR             shift and go to state 178
    CALL            shift and go to state 180
    ID              shift and go to state 78

    write_list                     shift and go to state 176
    write_listp                    shift and go to state 177
    var                            shift and go to state 179

state 145

    (123) to_num -> TO_NUMBER ( . STR )
    (124) to_num -> TO_NUMBER ( . var )
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    STR             shift and go to state 181
    ID              shift and go to state 78

    var                            shift and go to state 182

state 146

    (125) to_str -> TO_STRING ( . expresion )
    (86) expresion -> . exp
    (87) expresion -> . expresion COMP f_oper exp f_expres
    (89) exp -> . term
    (90) exp -> . exp OPTERM f_oper term f_exp
    (92) term -> . fact
    (93) term -> . term OPFACT f_oper fact f_term
    (96) fact -> . ( lparen expresion ) rparen
    (97) fact -> . var
    (98) fact -> . NUM f_fact
    (99) fact -> . OPTERM NUM
    (100) fact -> . CALL func f_return_val f_end_call f_end_check
    (101) fact -> . STR f_string
    (102) fact -> . fact & f_oper var f_concat
    (103) fact -> . fact & f_oper STR f_string f_concat
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    (               shift and go to state 122
    NUM             shift and go to state 124
    OPTERM          shift and go to state 120
    CALL            shift and go to state 125
    STR             shift and go to state 126
    ID              shift and go to state 78

    expresion                      shift and go to state 183
    exp                            shift and go to state 118
    term                           shift and go to state 119
    fact                           shift and go to state 121
    var                            shift and go to state 123

state 147

    (134) return -> RET ( . expresion )
    (86) expresion -> . exp
    (87) expresion -> . expresion COMP f_oper exp f_expres
    (89) exp -> . term
    (90) exp -> . exp OPTERM f_oper term f_exp
    (92) term -> . fact
    (93) term -> . term OPFACT f_oper fact f_term
    (96) fact -> . ( lparen expresion ) rparen
    (97) fact -> . var
    (98) fact -> . NUM f_fact
    (99) fact -> . OPTERM NUM
    (100) fact -> . CALL func f_return_val f_end_call f_end_check
    (101) fact -> . STR f_string
    (102) fact -> . fact & f_oper var f_concat
    (103) fact -> . fact & f_oper STR f_string f_concat
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    (               shift and go to state 122
    NUM             shift and go to state 124
    OPTERM          shift and go to state 120
    CALL            shift and go to state 125
    STR             shift and go to state 126
    ID              shift and go to state 78

    expresion                      shift and go to state 184
    exp                            shift and go to state 118
    term                           shift and go to state 119
    fact                           shift and go to state 121
    var                            shift and go to state 123

state 148

    (72) asignacion -> var = f_oper . expresion ;
    (86) expresion -> . exp
    (87) expresion -> . expresion COMP f_oper exp f_expres
    (89) exp -> . term
    (90) exp -> . exp OPTERM f_oper term f_exp
    (92) term -> . fact
    (93) term -> . term OPFACT f_oper fact f_term
    (96) fact -> . ( lparen expresion ) rparen
    (97) fact -> . var
    (98) fact -> . NUM f_fact
    (99) fact -> . OPTERM NUM
    (100) fact -> . CALL func f_return_val f_end_call f_end_check
    (101) fact -> . STR f_string
    (102) fact -> . fact & f_oper var f_concat
    (103) fact -> . fact & f_oper STR f_string f_concat
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    (               shift and go to state 122
    NUM             shift and go to state 124
    OPTERM          shift and go to state 120
    CALL            shift and go to state 125
    STR             shift and go to state 126
    ID              shift and go to state 78

    var                            shift and go to state 123
    expresion                      shift and go to state 185
    exp                            shift and go to state 118
    term                           shift and go to state 119
    fact                           shift and go to state 121

state 149

    (115) while -> WHILE f_while ( . expresion f_exprwhile ) DO { estatutos } f_endwhile
    (86) expresion -> . exp
    (87) expresion -> . expresion COMP f_oper exp f_expres
    (89) exp -> . term
    (90) exp -> . exp OPTERM f_oper term f_exp
    (92) term -> . fact
    (93) term -> . term OPFACT f_oper fact f_term
    (96) fact -> . ( lparen expresion ) rparen
    (97) fact -> . var
    (98) fact -> . NUM f_fact
    (99) fact -> . OPTERM NUM
    (100) fact -> . CALL func f_return_val f_end_call f_end_check
    (101) fact -> . STR f_string
    (102) fact -> . fact & f_oper var f_concat
    (103) fact -> . fact & f_oper STR f_string f_concat
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    (               shift and go to state 122
    NUM             shift and go to state 124
    OPTERM          shift and go to state 120
    CALL            shift and go to state 125
    STR             shift and go to state 126
    ID              shift and go to state 78

    expresion                      shift and go to state 186
    exp                            shift and go to state 118
    term                           shift and go to state 119
    fact                           shift and go to state 121
    var                            shift and go to state 123

state 150

    (119) for -> FOR expresion f_for_start . TO expresion f_for_to { estatutos } f_for_end

    TO              shift and go to state 187


state 151

    (87) expresion -> expresion COMP . f_oper exp f_expres
    (95) f_oper -> .

    (               reduce using rule 95 (f_oper -> .)
    NUM             reduce using rule 95 (f_oper -> .)
    OPTERM          reduce using rule 95 (f_oper -> .)
    CALL            reduce using rule 95 (f_oper -> .)
    STR             reduce using rule 95 (f_oper -> .)
    ID              reduce using rule 95 (f_oper -> .)

    f_oper                         shift and go to state 188

state 152

    (90) exp -> exp OPTERM . f_oper term f_exp
    (95) f_oper -> .

    (               reduce using rule 95 (f_oper -> .)
    NUM             reduce using rule 95 (f_oper -> .)
    OPTERM          reduce using rule 95 (f_oper -> .)
    CALL            reduce using rule 95 (f_oper -> .)
    STR             reduce using rule 95 (f_oper -> .)
    ID              reduce using rule 95 (f_oper -> .)

    f_oper                         shift and go to state 189

state 153

    (93) term -> term OPFACT . f_oper fact f_term
    (95) f_oper -> .

    (               reduce using rule 95 (f_oper -> .)
    NUM             reduce using rule 95 (f_oper -> .)
    OPTERM          reduce using rule 95 (f_oper -> .)
    CALL            reduce using rule 95 (f_oper -> .)
    STR             reduce using rule 95 (f_oper -> .)
    ID              reduce using rule 95 (f_oper -> .)

    f_oper                         shift and go to state 190

state 154

    (99) fact -> OPTERM NUM .

    &               reduce using rule 99 (fact -> OPTERM NUM .)
    OPFACT          reduce using rule 99 (fact -> OPTERM NUM .)
    OPTERM          reduce using rule 99 (fact -> OPTERM NUM .)
    COMP            reduce using rule 99 (fact -> OPTERM NUM .)
    TO              reduce using rule 99 (fact -> OPTERM NUM .)
    )               reduce using rule 99 (fact -> OPTERM NUM .)
    ;               reduce using rule 99 (fact -> OPTERM NUM .)
    ]               reduce using rule 99 (fact -> OPTERM NUM .)
    ,               reduce using rule 99 (fact -> OPTERM NUM .)
    {               reduce using rule 99 (fact -> OPTERM NUM .)


state 155

    (102) fact -> fact & . f_oper var f_concat
    (103) fact -> fact & . f_oper STR f_string f_concat
    (95) f_oper -> .

    STR             reduce using rule 95 (f_oper -> .)
    ID              reduce using rule 95 (f_oper -> .)

    f_oper                         shift and go to state 191

state 156

    (96) fact -> ( lparen . expresion ) rparen
    (86) expresion -> . exp
    (87) expresion -> . expresion COMP f_oper exp f_expres
    (89) exp -> . term
    (90) exp -> . exp OPTERM f_oper term f_exp
    (92) term -> . fact
    (93) term -> . term OPFACT f_oper fact f_term
    (96) fact -> . ( lparen expresion ) rparen
    (97) fact -> . var
    (98) fact -> . NUM f_fact
    (99) fact -> . OPTERM NUM
    (100) fact -> . CALL func f_return_val f_end_call f_end_check
    (101) fact -> . STR f_string
    (102) fact -> . fact & f_oper var f_concat
    (103) fact -> . fact & f_oper STR f_string f_concat
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    (               shift and go to state 122
    NUM             shift and go to state 124
    OPTERM          shift and go to state 120
    CALL            shift and go to state 125
    STR             shift and go to state 126
    ID              shift and go to state 78

    expresion                      shift and go to state 192
    exp                            shift and go to state 118
    term                           shift and go to state 119
    fact                           shift and go to state 121
    var                            shift and go to state 123

state 157

    (98) fact -> NUM f_fact .

    &               reduce using rule 98 (fact -> NUM f_fact .)
    OPFACT          reduce using rule 98 (fact -> NUM f_fact .)
    OPTERM          reduce using rule 98 (fact -> NUM f_fact .)
    COMP            reduce using rule 98 (fact -> NUM f_fact .)
    TO              reduce using rule 98 (fact -> NUM f_fact .)
    )               reduce using rule 98 (fact -> NUM f_fact .)
    ;               reduce using rule 98 (fact -> NUM f_fact .)
    ]               reduce using rule 98 (fact -> NUM f_fact .)
    ,               reduce using rule 98 (fact -> NUM f_fact .)
    {               reduce using rule 98 (fact -> NUM f_fact .)


state 158

    (100) fact -> CALL func . f_return_val f_end_call f_end_check
    (108) f_return_val -> .

    &               reduce using rule 108 (f_return_val -> .)
    OPFACT          reduce using rule 108 (f_return_val -> .)
    OPTERM          reduce using rule 108 (f_return_val -> .)
    COMP            reduce using rule 108 (f_return_val -> .)
    TO              reduce using rule 108 (f_return_val -> .)
    )               reduce using rule 108 (f_return_val -> .)
    ;               reduce using rule 108 (f_return_val -> .)
    ]               reduce using rule 108 (f_return_val -> .)
    ,               reduce using rule 108 (f_return_val -> .)
    {               reduce using rule 108 (f_return_val -> .)

    f_return_val                   shift and go to state 193

state 159

    (101) fact -> STR f_string .

    &               reduce using rule 101 (fact -> STR f_string .)
    OPFACT          reduce using rule 101 (fact -> STR f_string .)
    OPTERM          reduce using rule 101 (fact -> STR f_string .)
    COMP            reduce using rule 101 (fact -> STR f_string .)
    TO              reduce using rule 101 (fact -> STR f_string .)
    )               reduce using rule 101 (fact -> STR f_string .)
    ;               reduce using rule 101 (fact -> STR f_string .)
    ]               reduce using rule 101 (fact -> STR f_string .)
    ,               reduce using rule 101 (fact -> STR f_string .)
    {               reduce using rule 101 (fact -> STR f_string .)


state 160

    (109) condicion -> IF ( expresion . ) f_if THEN { estatutos } condicionp f_endif
    (87) expresion -> expresion . COMP f_oper exp f_expres

    )               shift and go to state 194
    COMP            shift and go to state 151


state 161

    (18) funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc . { cvars estatutos } f_endfunc

    {               shift and go to state 195


state 162

    (19) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing . f_tipofunc { cvars estatutos } f_endfunc
    (22) f_tipofunc -> .

    {               reduce using rule 22 (f_tipofunc -> .)

    f_tipofunc                     shift and go to state 196

state 163

    (45) pparams -> pparams , tipo ID f_param .

    ,               reduce using rule 45 (pparams -> pparams , tipo ID f_param .)
    )               reduce using rule 45 (pparams -> pparams , tipo ID f_param .)


state 164

    (35) dimension -> [ NUM f_dim1 ] [ NUM f_dim2 ] . f_enddim
    (39) f_enddim -> .

    :               reduce using rule 39 (f_enddim -> .)

    f_enddim                       shift and go to state 197

state 165

    (8) clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } . f_endclass
    (15) f_endclass -> .

    TYPE            reduce using rule 15 (f_endclass -> .)
    DEF             reduce using rule 15 (f_endclass -> .)
    MAIN            reduce using rule 15 (f_endclass -> .)
    FUNC            reduce using rule 15 (f_endclass -> .)

    f_endclass                     shift and go to state 198

state 166

    (12) cvars -> cvars DEF tipo dimension : lista_id ; .

    DEF             reduce using rule 12 (cvars -> cvars DEF tipo dimension : lista_id ; .)
    }               reduce using rule 12 (cvars -> cvars DEF tipo dimension : lista_id ; .)
    FUNC            reduce using rule 12 (cvars -> cvars DEF tipo dimension : lista_id ; .)
    CALL            reduce using rule 12 (cvars -> cvars DEF tipo dimension : lista_id ; .)
    WHILE           reduce using rule 12 (cvars -> cvars DEF tipo dimension : lista_id ; .)
    FOR             reduce using rule 12 (cvars -> cvars DEF tipo dimension : lista_id ; .)
    IF              reduce using rule 12 (cvars -> cvars DEF tipo dimension : lista_id ; .)
    ID              reduce using rule 12 (cvars -> cvars DEF tipo dimension : lista_id ; .)


state 167

    (73) var -> ID f_varobj : ID . f_verify_type_composite indexacion f_end_check
    (80) f_verify_type_composite -> .

    [               reduce using rule 80 (f_verify_type_composite -> .)
    =               reduce using rule 80 (f_verify_type_composite -> .)
    &               reduce using rule 80 (f_verify_type_composite -> .)
    OPFACT          reduce using rule 80 (f_verify_type_composite -> .)
    OPTERM          reduce using rule 80 (f_verify_type_composite -> .)
    COMP            reduce using rule 80 (f_verify_type_composite -> .)
    TO              reduce using rule 80 (f_verify_type_composite -> .)
    )               reduce using rule 80 (f_verify_type_composite -> .)
    ;               reduce using rule 80 (f_verify_type_composite -> .)
    ]               reduce using rule 80 (f_verify_type_composite -> .)
    ,               reduce using rule 80 (f_verify_type_composite -> .)
    {               reduce using rule 80 (f_verify_type_composite -> .)

    f_verify_type_composite        shift and go to state 199

state 168

    (74) var -> ID f_verify_type indexacion f_end_check .

    =               reduce using rule 74 (var -> ID f_verify_type indexacion f_end_check .)
    &               reduce using rule 74 (var -> ID f_verify_type indexacion f_end_check .)
    OPFACT          reduce using rule 74 (var -> ID f_verify_type indexacion f_end_check .)
    OPTERM          reduce using rule 74 (var -> ID f_verify_type indexacion f_end_check .)
    COMP            reduce using rule 74 (var -> ID f_verify_type indexacion f_end_check .)
    TO              reduce using rule 74 (var -> ID f_verify_type indexacion f_end_check .)
    )               reduce using rule 74 (var -> ID f_verify_type indexacion f_end_check .)
    ;               reduce using rule 74 (var -> ID f_verify_type indexacion f_end_check .)
    ]               reduce using rule 74 (var -> ID f_verify_type indexacion f_end_check .)
    ,               reduce using rule 74 (var -> ID f_verify_type indexacion f_end_check .)
    {               reduce using rule 74 (var -> ID f_verify_type indexacion f_end_check .)


state 169

    (75) indexacion -> f_start_array [ . expresion f_index ] f_end_array
    (76) indexacion -> f_start_array [ . expresion f_index ] [ f_next_index expresion f_index ] f_end_array
    (86) expresion -> . exp
    (87) expresion -> . expresion COMP f_oper exp f_expres
    (89) exp -> . term
    (90) exp -> . exp OPTERM f_oper term f_exp
    (92) term -> . fact
    (93) term -> . term OPFACT f_oper fact f_term
    (96) fact -> . ( lparen expresion ) rparen
    (97) fact -> . var
    (98) fact -> . NUM f_fact
    (99) fact -> . OPTERM NUM
    (100) fact -> . CALL func f_return_val f_end_call f_end_check
    (101) fact -> . STR f_string
    (102) fact -> . fact & f_oper var f_concat
    (103) fact -> . fact & f_oper STR f_string f_concat
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    (               shift and go to state 122
    NUM             shift and go to state 124
    OPTERM          shift and go to state 120
    CALL            shift and go to state 125
    STR             shift and go to state 126
    ID              shift and go to state 78

    expresion                      shift and go to state 200
    exp                            shift and go to state 118
    term                           shift and go to state 119
    fact                           shift and go to state 121
    var                            shift and go to state 123

state 170

    (77) indexacion -> f_no_index empty .

    =               reduce using rule 77 (indexacion -> f_no_index empty .)
    &               reduce using rule 77 (indexacion -> f_no_index empty .)
    OPFACT          reduce using rule 77 (indexacion -> f_no_index empty .)
    OPTERM          reduce using rule 77 (indexacion -> f_no_index empty .)
    COMP            reduce using rule 77 (indexacion -> f_no_index empty .)
    TO              reduce using rule 77 (indexacion -> f_no_index empty .)
    )               reduce using rule 77 (indexacion -> f_no_index empty .)
    ;               reduce using rule 77 (indexacion -> f_no_index empty .)
    ]               reduce using rule 77 (indexacion -> f_no_index empty .)
    ,               reduce using rule 77 (indexacion -> f_no_index empty .)
    {               reduce using rule 77 (indexacion -> f_no_index empty .)


state 171

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ; .

    $end            reduce using rule 1 (start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ; .)


state 172

    (54) call_func -> func f_end_call f_end_check .

    ;               reduce using rule 54 (call_func -> func f_end_call f_end_check .)


state 173

    (61) func -> ID f_verify_func ( . args )
    (66) args -> . args_list f_end_args
    (67) args -> . f_end_args
    (68) args_list -> . expresion f_arg
    (69) args_list -> . args_list , expresion f_arg
    (71) f_end_args -> .
    (86) expresion -> . exp
    (87) expresion -> . expresion COMP f_oper exp f_expres
    (89) exp -> . term
    (90) exp -> . exp OPTERM f_oper term f_exp
    (92) term -> . fact
    (93) term -> . term OPFACT f_oper fact f_term
    (96) fact -> . ( lparen expresion ) rparen
    (97) fact -> . var
    (98) fact -> . NUM f_fact
    (99) fact -> . OPTERM NUM
    (100) fact -> . CALL func f_return_val f_end_call f_end_check
    (101) fact -> . STR f_string
    (102) fact -> . fact & f_oper var f_concat
    (103) fact -> . fact & f_oper STR f_string f_concat
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    )               reduce using rule 71 (f_end_args -> .)
    (               shift and go to state 122
    NUM             shift and go to state 124
    OPTERM          shift and go to state 120
    CALL            shift and go to state 125
    STR             shift and go to state 126
    ID              shift and go to state 78

    args                           shift and go to state 201
    args_list                      shift and go to state 202
    f_end_args                     shift and go to state 203
    expresion                      shift and go to state 204
    exp                            shift and go to state 118
    term                           shift and go to state 119
    fact                           shift and go to state 121
    var                            shift and go to state 123

state 174

    (62) func -> ID f_varobj : . ID f_verify_func_composite ( args )

    ID              shift and go to state 205


state 175

    (126) input -> INPUT ( var . )

    )               shift and go to state 206


state 176

    (127) write -> PRINT ( write_list . )
    (128) write_list -> write_list . & write_listp

    )               shift and go to state 207
    &               shift and go to state 208


state 177

    (129) write_list -> write_listp .

    )               reduce using rule 129 (write_list -> write_listp .)
    &               reduce using rule 129 (write_list -> write_listp .)


state 178

    (130) write_listp -> STR . f_string
    (133) f_string -> .

    )               reduce using rule 133 (f_string -> .)
    &               reduce using rule 133 (f_string -> .)

    f_string                       shift and go to state 209

state 179

    (131) write_listp -> var .

    )               reduce using rule 131 (write_listp -> var .)
    &               reduce using rule 131 (write_listp -> var .)


state 180

    (132) write_listp -> CALL . to_str
    (125) to_str -> . TO_STRING ( expresion )

    TO_STRING       shift and go to state 113

    to_str                         shift and go to state 210

state 181

    (123) to_num -> TO_NUMBER ( STR . )

    )               shift and go to state 211


state 182

    (124) to_num -> TO_NUMBER ( var . )

    )               shift and go to state 212


state 183

    (125) to_str -> TO_STRING ( expresion . )
    (87) expresion -> expresion . COMP f_oper exp f_expres

    )               shift and go to state 213
    COMP            shift and go to state 151


state 184

    (134) return -> RET ( expresion . )
    (87) expresion -> expresion . COMP f_oper exp f_expres

    )               shift and go to state 214
    COMP            shift and go to state 151


state 185

    (72) asignacion -> var = f_oper expresion . ;
    (87) expresion -> expresion . COMP f_oper exp f_expres

    ;               shift and go to state 215
    COMP            shift and go to state 151


state 186

    (115) while -> WHILE f_while ( expresion . f_exprwhile ) DO { estatutos } f_endwhile
    (87) expresion -> expresion . COMP f_oper exp f_expres
    (117) f_exprwhile -> .

    COMP            shift and go to state 151
    )               reduce using rule 117 (f_exprwhile -> .)

    f_exprwhile                    shift and go to state 216

state 187

    (119) for -> FOR expresion f_for_start TO . expresion f_for_to { estatutos } f_for_end
    (86) expresion -> . exp
    (87) expresion -> . expresion COMP f_oper exp f_expres
    (89) exp -> . term
    (90) exp -> . exp OPTERM f_oper term f_exp
    (92) term -> . fact
    (93) term -> . term OPFACT f_oper fact f_term
    (96) fact -> . ( lparen expresion ) rparen
    (97) fact -> . var
    (98) fact -> . NUM f_fact
    (99) fact -> . OPTERM NUM
    (100) fact -> . CALL func f_return_val f_end_call f_end_check
    (101) fact -> . STR f_string
    (102) fact -> . fact & f_oper var f_concat
    (103) fact -> . fact & f_oper STR f_string f_concat
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    (               shift and go to state 122
    NUM             shift and go to state 124
    OPTERM          shift and go to state 120
    CALL            shift and go to state 125
    STR             shift and go to state 126
    ID              shift and go to state 78

    expresion                      shift and go to state 217
    exp                            shift and go to state 118
    term                           shift and go to state 119
    fact                           shift and go to state 121
    var                            shift and go to state 123

state 188

    (87) expresion -> expresion COMP f_oper . exp f_expres
    (89) exp -> . term
    (90) exp -> . exp OPTERM f_oper term f_exp
    (92) term -> . fact
    (93) term -> . term OPFACT f_oper fact f_term
    (96) fact -> . ( lparen expresion ) rparen
    (97) fact -> . var
    (98) fact -> . NUM f_fact
    (99) fact -> . OPTERM NUM
    (100) fact -> . CALL func f_return_val f_end_call f_end_check
    (101) fact -> . STR f_string
    (102) fact -> . fact & f_oper var f_concat
    (103) fact -> . fact & f_oper STR f_string f_concat
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    (               shift and go to state 122
    NUM             shift and go to state 124
    OPTERM          shift and go to state 120
    CALL            shift and go to state 125
    STR             shift and go to state 126
    ID              shift and go to state 78

    exp                            shift and go to state 218
    term                           shift and go to state 119
    fact                           shift and go to state 121
    var                            shift and go to state 123

state 189

    (90) exp -> exp OPTERM f_oper . term f_exp
    (92) term -> . fact
    (93) term -> . term OPFACT f_oper fact f_term
    (96) fact -> . ( lparen expresion ) rparen
    (97) fact -> . var
    (98) fact -> . NUM f_fact
    (99) fact -> . OPTERM NUM
    (100) fact -> . CALL func f_return_val f_end_call f_end_check
    (101) fact -> . STR f_string
    (102) fact -> . fact & f_oper var f_concat
    (103) fact -> . fact & f_oper STR f_string f_concat
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    (               shift and go to state 122
    NUM             shift and go to state 124
    OPTERM          shift and go to state 120
    CALL            shift and go to state 125
    STR             shift and go to state 126
    ID              shift and go to state 78

    term                           shift and go to state 219
    fact                           shift and go to state 121
    var                            shift and go to state 123

state 190

    (93) term -> term OPFACT f_oper . fact f_term
    (96) fact -> . ( lparen expresion ) rparen
    (97) fact -> . var
    (98) fact -> . NUM f_fact
    (99) fact -> . OPTERM NUM
    (100) fact -> . CALL func f_return_val f_end_call f_end_check
    (101) fact -> . STR f_string
    (102) fact -> . fact & f_oper var f_concat
    (103) fact -> . fact & f_oper STR f_string f_concat
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    (               shift and go to state 122
    NUM             shift and go to state 124
    OPTERM          shift and go to state 120
    CALL            shift and go to state 125
    STR             shift and go to state 126
    ID              shift and go to state 78

    fact                           shift and go to state 220
    var                            shift and go to state 123

state 191

    (102) fact -> fact & f_oper . var f_concat
    (103) fact -> fact & f_oper . STR f_string f_concat
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    STR             shift and go to state 222
    ID              shift and go to state 78

    var                            shift and go to state 221

state 192

    (96) fact -> ( lparen expresion . ) rparen
    (87) expresion -> expresion . COMP f_oper exp f_expres

    )               shift and go to state 223
    COMP            shift and go to state 151


state 193

    (100) fact -> CALL func f_return_val . f_end_call f_end_check
    (60) f_end_call -> .

    &               reduce using rule 60 (f_end_call -> .)
    OPFACT          reduce using rule 60 (f_end_call -> .)
    OPTERM          reduce using rule 60 (f_end_call -> .)
    COMP            reduce using rule 60 (f_end_call -> .)
    TO              reduce using rule 60 (f_end_call -> .)
    )               reduce using rule 60 (f_end_call -> .)
    ;               reduce using rule 60 (f_end_call -> .)
    ]               reduce using rule 60 (f_end_call -> .)
    ,               reduce using rule 60 (f_end_call -> .)
    {               reduce using rule 60 (f_end_call -> .)

    f_end_call                     shift and go to state 224

state 194

    (109) condicion -> IF ( expresion ) . f_if THEN { estatutos } condicionp f_endif
    (112) f_if -> .

    THEN            reduce using rule 112 (f_if -> .)

    f_if                           shift and go to state 225

state 195

    (18) funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { . cvars estatutos } f_endfunc
    (12) cvars -> . cvars DEF tipo dimension : lista_id ;
    (13) cvars -> . empty
    (135) empty -> .

    DEF             reduce using rule 135 (empty -> .)
    }               reduce using rule 135 (empty -> .)
    CALL            reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    FOR             reduce using rule 135 (empty -> .)
    IF              reduce using rule 135 (empty -> .)
    ID              reduce using rule 135 (empty -> .)

    cvars                          shift and go to state 226
    empty                          shift and go to state 40

state 196

    (19) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc . { cvars estatutos } f_endfunc

    {               shift and go to state 227


state 197

    (35) dimension -> [ NUM f_dim1 ] [ NUM f_dim2 ] f_enddim .

    :               reduce using rule 35 (dimension -> [ NUM f_dim1 ] [ NUM f_dim2 ] f_enddim .)


state 198

    (8) clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass .

    TYPE            reduce using rule 8 (clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass .)
    DEF             reduce using rule 8 (clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass .)
    MAIN            reduce using rule 8 (clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass .)
    FUNC            reduce using rule 8 (clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass .)


state 199

    (73) var -> ID f_varobj : ID f_verify_type_composite . indexacion f_end_check
    (75) indexacion -> . f_start_array [ expresion f_index ] f_end_array
    (76) indexacion -> . f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array
    (77) indexacion -> . f_no_index empty
    (82) f_start_array -> .
    (81) f_no_index -> .

    [               reduce using rule 82 (f_start_array -> .)
    =               reduce using rule 81 (f_no_index -> .)
    &               reduce using rule 81 (f_no_index -> .)
    OPFACT          reduce using rule 81 (f_no_index -> .)
    OPTERM          reduce using rule 81 (f_no_index -> .)
    COMP            reduce using rule 81 (f_no_index -> .)
    TO              reduce using rule 81 (f_no_index -> .)
    )               reduce using rule 81 (f_no_index -> .)
    ;               reduce using rule 81 (f_no_index -> .)
    ]               reduce using rule 81 (f_no_index -> .)
    ,               reduce using rule 81 (f_no_index -> .)
    {               reduce using rule 81 (f_no_index -> .)

    indexacion                     shift and go to state 228
    f_start_array                  shift and go to state 136
    f_no_index                     shift and go to state 137

state 200

    (75) indexacion -> f_start_array [ expresion . f_index ] f_end_array
    (76) indexacion -> f_start_array [ expresion . f_index ] [ f_next_index expresion f_index ] f_end_array
    (87) expresion -> expresion . COMP f_oper exp f_expres
    (83) f_index -> .

    COMP            shift and go to state 151
    ]               reduce using rule 83 (f_index -> .)

    f_index                        shift and go to state 229

state 201

    (61) func -> ID f_verify_func ( args . )

    )               shift and go to state 230


state 202

    (66) args -> args_list . f_end_args
    (69) args_list -> args_list . , expresion f_arg
    (71) f_end_args -> .

    ,               shift and go to state 232
    )               reduce using rule 71 (f_end_args -> .)

    f_end_args                     shift and go to state 231

state 203

    (67) args -> f_end_args .

    )               reduce using rule 67 (args -> f_end_args .)


state 204

    (68) args_list -> expresion . f_arg
    (87) expresion -> expresion . COMP f_oper exp f_expres
    (70) f_arg -> .

    COMP            shift and go to state 151
    ,               reduce using rule 70 (f_arg -> .)
    )               reduce using rule 70 (f_arg -> .)

    f_arg                          shift and go to state 233

state 205

    (62) func -> ID f_varobj : ID . f_verify_func_composite ( args )
    (65) f_verify_func_composite -> .

    (               reduce using rule 65 (f_verify_func_composite -> .)

    f_verify_func_composite        shift and go to state 234

state 206

    (126) input -> INPUT ( var ) .

    ;               reduce using rule 126 (input -> INPUT ( var ) .)


state 207

    (127) write -> PRINT ( write_list ) .

    ;               reduce using rule 127 (write -> PRINT ( write_list ) .)


state 208

    (128) write_list -> write_list & . write_listp
    (130) write_listp -> . STR f_string
    (131) write_listp -> . var
    (132) write_listp -> . CALL to_str
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    STR             shift and go to state 178
    CALL            shift and go to state 180
    ID              shift and go to state 78

    write_listp                    shift and go to state 235
    var                            shift and go to state 179

state 209

    (130) write_listp -> STR f_string .

    )               reduce using rule 130 (write_listp -> STR f_string .)
    &               reduce using rule 130 (write_listp -> STR f_string .)


state 210

    (132) write_listp -> CALL to_str .

    )               reduce using rule 132 (write_listp -> CALL to_str .)
    &               reduce using rule 132 (write_listp -> CALL to_str .)


state 211

    (123) to_num -> TO_NUMBER ( STR ) .

    ;               reduce using rule 123 (to_num -> TO_NUMBER ( STR ) .)


state 212

    (124) to_num -> TO_NUMBER ( var ) .

    ;               reduce using rule 124 (to_num -> TO_NUMBER ( var ) .)


state 213

    (125) to_str -> TO_STRING ( expresion ) .

    ;               reduce using rule 125 (to_str -> TO_STRING ( expresion ) .)
    )               reduce using rule 125 (to_str -> TO_STRING ( expresion ) .)
    &               reduce using rule 125 (to_str -> TO_STRING ( expresion ) .)


state 214

    (134) return -> RET ( expresion ) .

    ;               reduce using rule 134 (return -> RET ( expresion ) .)


state 215

    (72) asignacion -> var = f_oper expresion ; .

    }               reduce using rule 72 (asignacion -> var = f_oper expresion ; .)
    CALL            reduce using rule 72 (asignacion -> var = f_oper expresion ; .)
    WHILE           reduce using rule 72 (asignacion -> var = f_oper expresion ; .)
    FOR             reduce using rule 72 (asignacion -> var = f_oper expresion ; .)
    IF              reduce using rule 72 (asignacion -> var = f_oper expresion ; .)
    ID              reduce using rule 72 (asignacion -> var = f_oper expresion ; .)


state 216

    (115) while -> WHILE f_while ( expresion f_exprwhile . ) DO { estatutos } f_endwhile

    )               shift and go to state 236


state 217

    (119) for -> FOR expresion f_for_start TO expresion . f_for_to { estatutos } f_for_end
    (87) expresion -> expresion . COMP f_oper exp f_expres
    (121) f_for_to -> .

    COMP            shift and go to state 151
    {               reduce using rule 121 (f_for_to -> .)

    f_for_to                       shift and go to state 237

state 218

    (87) expresion -> expresion COMP f_oper exp . f_expres
    (90) exp -> exp . OPTERM f_oper term f_exp
    (88) f_expres -> .

    OPTERM          shift and go to state 152
    COMP            reduce using rule 88 (f_expres -> .)
    TO              reduce using rule 88 (f_expres -> .)
    )               reduce using rule 88 (f_expres -> .)
    ;               reduce using rule 88 (f_expres -> .)
    ]               reduce using rule 88 (f_expres -> .)
    ,               reduce using rule 88 (f_expres -> .)
    {               reduce using rule 88 (f_expres -> .)

    f_expres                       shift and go to state 238

state 219

    (90) exp -> exp OPTERM f_oper term . f_exp
    (93) term -> term . OPFACT f_oper fact f_term
    (91) f_exp -> .

    OPFACT          shift and go to state 153
    OPTERM          reduce using rule 91 (f_exp -> .)
    COMP            reduce using rule 91 (f_exp -> .)
    TO              reduce using rule 91 (f_exp -> .)
    )               reduce using rule 91 (f_exp -> .)
    ;               reduce using rule 91 (f_exp -> .)
    ]               reduce using rule 91 (f_exp -> .)
    ,               reduce using rule 91 (f_exp -> .)
    {               reduce using rule 91 (f_exp -> .)

    f_exp                          shift and go to state 239

state 220

    (93) term -> term OPFACT f_oper fact . f_term
    (102) fact -> fact . & f_oper var f_concat
    (103) fact -> fact . & f_oper STR f_string f_concat
    (94) f_term -> .

    &               shift and go to state 155
    OPFACT          reduce using rule 94 (f_term -> .)
    OPTERM          reduce using rule 94 (f_term -> .)
    COMP            reduce using rule 94 (f_term -> .)
    TO              reduce using rule 94 (f_term -> .)
    )               reduce using rule 94 (f_term -> .)
    ;               reduce using rule 94 (f_term -> .)
    ]               reduce using rule 94 (f_term -> .)
    ,               reduce using rule 94 (f_term -> .)
    {               reduce using rule 94 (f_term -> .)

    f_term                         shift and go to state 240

state 221

    (102) fact -> fact & f_oper var . f_concat
    (104) f_concat -> .

    &               reduce using rule 104 (f_concat -> .)
    OPFACT          reduce using rule 104 (f_concat -> .)
    OPTERM          reduce using rule 104 (f_concat -> .)
    COMP            reduce using rule 104 (f_concat -> .)
    TO              reduce using rule 104 (f_concat -> .)
    )               reduce using rule 104 (f_concat -> .)
    ;               reduce using rule 104 (f_concat -> .)
    ]               reduce using rule 104 (f_concat -> .)
    ,               reduce using rule 104 (f_concat -> .)
    {               reduce using rule 104 (f_concat -> .)

    f_concat                       shift and go to state 241

state 222

    (103) fact -> fact & f_oper STR . f_string f_concat
    (133) f_string -> .

    &               reduce using rule 133 (f_string -> .)
    OPFACT          reduce using rule 133 (f_string -> .)
    OPTERM          reduce using rule 133 (f_string -> .)
    COMP            reduce using rule 133 (f_string -> .)
    TO              reduce using rule 133 (f_string -> .)
    )               reduce using rule 133 (f_string -> .)
    ;               reduce using rule 133 (f_string -> .)
    ]               reduce using rule 133 (f_string -> .)
    ,               reduce using rule 133 (f_string -> .)
    {               reduce using rule 133 (f_string -> .)

    f_string                       shift and go to state 242

state 223

    (96) fact -> ( lparen expresion ) . rparen
    (106) rparen -> .

    &               reduce using rule 106 (rparen -> .)
    OPFACT          reduce using rule 106 (rparen -> .)
    OPTERM          reduce using rule 106 (rparen -> .)
    COMP            reduce using rule 106 (rparen -> .)
    TO              reduce using rule 106 (rparen -> .)
    )               reduce using rule 106 (rparen -> .)
    ;               reduce using rule 106 (rparen -> .)
    ]               reduce using rule 106 (rparen -> .)
    ,               reduce using rule 106 (rparen -> .)
    {               reduce using rule 106 (rparen -> .)

    rparen                         shift and go to state 243

state 224

    (100) fact -> CALL func f_return_val f_end_call . f_end_check
    (78) f_end_check -> .

    &               reduce using rule 78 (f_end_check -> .)
    OPFACT          reduce using rule 78 (f_end_check -> .)
    OPTERM          reduce using rule 78 (f_end_check -> .)
    COMP            reduce using rule 78 (f_end_check -> .)
    TO              reduce using rule 78 (f_end_check -> .)
    )               reduce using rule 78 (f_end_check -> .)
    ;               reduce using rule 78 (f_end_check -> .)
    ]               reduce using rule 78 (f_end_check -> .)
    ,               reduce using rule 78 (f_end_check -> .)
    {               reduce using rule 78 (f_end_check -> .)

    f_end_check                    shift and go to state 244

state 225

    (109) condicion -> IF ( expresion ) f_if . THEN { estatutos } condicionp f_endif

    THEN            shift and go to state 245


state 226

    (18) funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { cvars . estatutos } f_endfunc
    (12) cvars -> cvars . DEF tipo dimension : lista_id ;
    (47) estatutos -> . estatutos estatuto
    (48) estatutos -> . empty
    (135) empty -> .

    DEF             shift and go to state 50
    }               reduce using rule 135 (empty -> .)
    CALL            reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    FOR             reduce using rule 135 (empty -> .)
    IF              reduce using rule 135 (empty -> .)
    ID              reduce using rule 135 (empty -> .)

    estatutos                      shift and go to state 246
    empty                          shift and go to state 67

state 227

    (19) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { . cvars estatutos } f_endfunc
    (12) cvars -> . cvars DEF tipo dimension : lista_id ;
    (13) cvars -> . empty
    (135) empty -> .

    DEF             reduce using rule 135 (empty -> .)
    }               reduce using rule 135 (empty -> .)
    CALL            reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    FOR             reduce using rule 135 (empty -> .)
    IF              reduce using rule 135 (empty -> .)
    ID              reduce using rule 135 (empty -> .)

    cvars                          shift and go to state 247
    empty                          shift and go to state 40

state 228

    (73) var -> ID f_varobj : ID f_verify_type_composite indexacion . f_end_check
    (78) f_end_check -> .

    =               reduce using rule 78 (f_end_check -> .)
    &               reduce using rule 78 (f_end_check -> .)
    OPFACT          reduce using rule 78 (f_end_check -> .)
    OPTERM          reduce using rule 78 (f_end_check -> .)
    COMP            reduce using rule 78 (f_end_check -> .)
    TO              reduce using rule 78 (f_end_check -> .)
    )               reduce using rule 78 (f_end_check -> .)
    ;               reduce using rule 78 (f_end_check -> .)
    ]               reduce using rule 78 (f_end_check -> .)
    ,               reduce using rule 78 (f_end_check -> .)
    {               reduce using rule 78 (f_end_check -> .)

    f_end_check                    shift and go to state 248

state 229

    (75) indexacion -> f_start_array [ expresion f_index . ] f_end_array
    (76) indexacion -> f_start_array [ expresion f_index . ] [ f_next_index expresion f_index ] f_end_array

    ]               shift and go to state 249


state 230

    (61) func -> ID f_verify_func ( args ) .

    ;               reduce using rule 61 (func -> ID f_verify_func ( args ) .)
    &               reduce using rule 61 (func -> ID f_verify_func ( args ) .)
    OPFACT          reduce using rule 61 (func -> ID f_verify_func ( args ) .)
    OPTERM          reduce using rule 61 (func -> ID f_verify_func ( args ) .)
    COMP            reduce using rule 61 (func -> ID f_verify_func ( args ) .)
    TO              reduce using rule 61 (func -> ID f_verify_func ( args ) .)
    )               reduce using rule 61 (func -> ID f_verify_func ( args ) .)
    ]               reduce using rule 61 (func -> ID f_verify_func ( args ) .)
    ,               reduce using rule 61 (func -> ID f_verify_func ( args ) .)
    {               reduce using rule 61 (func -> ID f_verify_func ( args ) .)


state 231

    (66) args -> args_list f_end_args .

    )               reduce using rule 66 (args -> args_list f_end_args .)


state 232

    (69) args_list -> args_list , . expresion f_arg
    (86) expresion -> . exp
    (87) expresion -> . expresion COMP f_oper exp f_expres
    (89) exp -> . term
    (90) exp -> . exp OPTERM f_oper term f_exp
    (92) term -> . fact
    (93) term -> . term OPFACT f_oper fact f_term
    (96) fact -> . ( lparen expresion ) rparen
    (97) fact -> . var
    (98) fact -> . NUM f_fact
    (99) fact -> . OPTERM NUM
    (100) fact -> . CALL func f_return_val f_end_call f_end_check
    (101) fact -> . STR f_string
    (102) fact -> . fact & f_oper var f_concat
    (103) fact -> . fact & f_oper STR f_string f_concat
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    (               shift and go to state 122
    NUM             shift and go to state 124
    OPTERM          shift and go to state 120
    CALL            shift and go to state 125
    STR             shift and go to state 126
    ID              shift and go to state 78

    expresion                      shift and go to state 250
    exp                            shift and go to state 118
    term                           shift and go to state 119
    fact                           shift and go to state 121
    var                            shift and go to state 123

state 233

    (68) args_list -> expresion f_arg .

    ,               reduce using rule 68 (args_list -> expresion f_arg .)
    )               reduce using rule 68 (args_list -> expresion f_arg .)


state 234

    (62) func -> ID f_varobj : ID f_verify_func_composite . ( args )

    (               shift and go to state 251


state 235

    (128) write_list -> write_list & write_listp .

    )               reduce using rule 128 (write_list -> write_list & write_listp .)
    &               reduce using rule 128 (write_list -> write_list & write_listp .)


state 236

    (115) while -> WHILE f_while ( expresion f_exprwhile ) . DO { estatutos } f_endwhile

    DO              shift and go to state 252


state 237

    (119) for -> FOR expresion f_for_start TO expresion f_for_to . { estatutos } f_for_end

    {               shift and go to state 253


state 238

    (87) expresion -> expresion COMP f_oper exp f_expres .

    COMP            reduce using rule 87 (expresion -> expresion COMP f_oper exp f_expres .)
    TO              reduce using rule 87 (expresion -> expresion COMP f_oper exp f_expres .)
    )               reduce using rule 87 (expresion -> expresion COMP f_oper exp f_expres .)
    ;               reduce using rule 87 (expresion -> expresion COMP f_oper exp f_expres .)
    ]               reduce using rule 87 (expresion -> expresion COMP f_oper exp f_expres .)
    ,               reduce using rule 87 (expresion -> expresion COMP f_oper exp f_expres .)
    {               reduce using rule 87 (expresion -> expresion COMP f_oper exp f_expres .)


state 239

    (90) exp -> exp OPTERM f_oper term f_exp .

    OPTERM          reduce using rule 90 (exp -> exp OPTERM f_oper term f_exp .)
    COMP            reduce using rule 90 (exp -> exp OPTERM f_oper term f_exp .)
    TO              reduce using rule 90 (exp -> exp OPTERM f_oper term f_exp .)
    )               reduce using rule 90 (exp -> exp OPTERM f_oper term f_exp .)
    ;               reduce using rule 90 (exp -> exp OPTERM f_oper term f_exp .)
    ]               reduce using rule 90 (exp -> exp OPTERM f_oper term f_exp .)
    ,               reduce using rule 90 (exp -> exp OPTERM f_oper term f_exp .)
    {               reduce using rule 90 (exp -> exp OPTERM f_oper term f_exp .)


state 240

    (93) term -> term OPFACT f_oper fact f_term .

    OPFACT          reduce using rule 93 (term -> term OPFACT f_oper fact f_term .)
    OPTERM          reduce using rule 93 (term -> term OPFACT f_oper fact f_term .)
    COMP            reduce using rule 93 (term -> term OPFACT f_oper fact f_term .)
    TO              reduce using rule 93 (term -> term OPFACT f_oper fact f_term .)
    )               reduce using rule 93 (term -> term OPFACT f_oper fact f_term .)
    ;               reduce using rule 93 (term -> term OPFACT f_oper fact f_term .)
    ]               reduce using rule 93 (term -> term OPFACT f_oper fact f_term .)
    ,               reduce using rule 93 (term -> term OPFACT f_oper fact f_term .)
    {               reduce using rule 93 (term -> term OPFACT f_oper fact f_term .)


state 241

    (102) fact -> fact & f_oper var f_concat .

    &               reduce using rule 102 (fact -> fact & f_oper var f_concat .)
    OPFACT          reduce using rule 102 (fact -> fact & f_oper var f_concat .)
    OPTERM          reduce using rule 102 (fact -> fact & f_oper var f_concat .)
    COMP            reduce using rule 102 (fact -> fact & f_oper var f_concat .)
    TO              reduce using rule 102 (fact -> fact & f_oper var f_concat .)
    )               reduce using rule 102 (fact -> fact & f_oper var f_concat .)
    ;               reduce using rule 102 (fact -> fact & f_oper var f_concat .)
    ]               reduce using rule 102 (fact -> fact & f_oper var f_concat .)
    ,               reduce using rule 102 (fact -> fact & f_oper var f_concat .)
    {               reduce using rule 102 (fact -> fact & f_oper var f_concat .)


state 242

    (103) fact -> fact & f_oper STR f_string . f_concat
    (104) f_concat -> .

    &               reduce using rule 104 (f_concat -> .)
    OPFACT          reduce using rule 104 (f_concat -> .)
    OPTERM          reduce using rule 104 (f_concat -> .)
    COMP            reduce using rule 104 (f_concat -> .)
    TO              reduce using rule 104 (f_concat -> .)
    )               reduce using rule 104 (f_concat -> .)
    ;               reduce using rule 104 (f_concat -> .)
    ]               reduce using rule 104 (f_concat -> .)
    ,               reduce using rule 104 (f_concat -> .)
    {               reduce using rule 104 (f_concat -> .)

    f_concat                       shift and go to state 254

state 243

    (96) fact -> ( lparen expresion ) rparen .

    &               reduce using rule 96 (fact -> ( lparen expresion ) rparen .)
    OPFACT          reduce using rule 96 (fact -> ( lparen expresion ) rparen .)
    OPTERM          reduce using rule 96 (fact -> ( lparen expresion ) rparen .)
    COMP            reduce using rule 96 (fact -> ( lparen expresion ) rparen .)
    TO              reduce using rule 96 (fact -> ( lparen expresion ) rparen .)
    )               reduce using rule 96 (fact -> ( lparen expresion ) rparen .)
    ;               reduce using rule 96 (fact -> ( lparen expresion ) rparen .)
    ]               reduce using rule 96 (fact -> ( lparen expresion ) rparen .)
    ,               reduce using rule 96 (fact -> ( lparen expresion ) rparen .)
    {               reduce using rule 96 (fact -> ( lparen expresion ) rparen .)


state 244

    (100) fact -> CALL func f_return_val f_end_call f_end_check .

    &               reduce using rule 100 (fact -> CALL func f_return_val f_end_call f_end_check .)
    OPFACT          reduce using rule 100 (fact -> CALL func f_return_val f_end_call f_end_check .)
    OPTERM          reduce using rule 100 (fact -> CALL func f_return_val f_end_call f_end_check .)
    COMP            reduce using rule 100 (fact -> CALL func f_return_val f_end_call f_end_check .)
    TO              reduce using rule 100 (fact -> CALL func f_return_val f_end_call f_end_check .)
    )               reduce using rule 100 (fact -> CALL func f_return_val f_end_call f_end_check .)
    ;               reduce using rule 100 (fact -> CALL func f_return_val f_end_call f_end_check .)
    ]               reduce using rule 100 (fact -> CALL func f_return_val f_end_call f_end_check .)
    ,               reduce using rule 100 (fact -> CALL func f_return_val f_end_call f_end_check .)
    {               reduce using rule 100 (fact -> CALL func f_return_val f_end_call f_end_check .)


state 245

    (109) condicion -> IF ( expresion ) f_if THEN . { estatutos } condicionp f_endif

    {               shift and go to state 255


state 246

    (18) funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { cvars estatutos . } f_endfunc
    (47) estatutos -> estatutos . estatuto
    (49) estatuto -> . asignacion
    (50) estatuto -> . while
    (51) estatuto -> . for
    (52) estatuto -> . condicion
    (53) estatuto -> . CALL call_func ;
    (72) asignacion -> . var = f_oper expresion ;
    (115) while -> . WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (119) for -> . FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (109) condicion -> . IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    }               shift and go to state 256
    CALL            shift and go to state 85
    WHILE           shift and go to state 87
    FOR             shift and go to state 88
    IF              shift and go to state 89
    ID              shift and go to state 78

    estatuto                       shift and go to state 80
    asignacion                     shift and go to state 81
    while                          shift and go to state 82
    for                            shift and go to state 83
    condicion                      shift and go to state 84
    var                            shift and go to state 86

state 247

    (19) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { cvars . estatutos } f_endfunc
    (12) cvars -> cvars . DEF tipo dimension : lista_id ;
    (47) estatutos -> . estatutos estatuto
    (48) estatutos -> . empty
    (135) empty -> .

    DEF             shift and go to state 50
    }               reduce using rule 135 (empty -> .)
    CALL            reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    FOR             reduce using rule 135 (empty -> .)
    IF              reduce using rule 135 (empty -> .)
    ID              reduce using rule 135 (empty -> .)

    estatutos                      shift and go to state 257
    empty                          shift and go to state 67

state 248

    (73) var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .

    =               reduce using rule 73 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)
    &               reduce using rule 73 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)
    OPFACT          reduce using rule 73 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)
    OPTERM          reduce using rule 73 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)
    COMP            reduce using rule 73 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)
    TO              reduce using rule 73 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)
    )               reduce using rule 73 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)
    ;               reduce using rule 73 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)
    ]               reduce using rule 73 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)
    ,               reduce using rule 73 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)
    {               reduce using rule 73 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)


state 249

    (75) indexacion -> f_start_array [ expresion f_index ] . f_end_array
    (76) indexacion -> f_start_array [ expresion f_index ] . [ f_next_index expresion f_index ] f_end_array
    (85) f_end_array -> .

    [               shift and go to state 258
    =               reduce using rule 85 (f_end_array -> .)
    &               reduce using rule 85 (f_end_array -> .)
    OPFACT          reduce using rule 85 (f_end_array -> .)
    OPTERM          reduce using rule 85 (f_end_array -> .)
    COMP            reduce using rule 85 (f_end_array -> .)
    TO              reduce using rule 85 (f_end_array -> .)
    )               reduce using rule 85 (f_end_array -> .)
    ;               reduce using rule 85 (f_end_array -> .)
    ]               reduce using rule 85 (f_end_array -> .)
    ,               reduce using rule 85 (f_end_array -> .)
    {               reduce using rule 85 (f_end_array -> .)

    f_end_array                    shift and go to state 259

state 250

    (69) args_list -> args_list , expresion . f_arg
    (87) expresion -> expresion . COMP f_oper exp f_expres
    (70) f_arg -> .

    COMP            shift and go to state 151
    ,               reduce using rule 70 (f_arg -> .)
    )               reduce using rule 70 (f_arg -> .)

    f_arg                          shift and go to state 260

state 251

    (62) func -> ID f_varobj : ID f_verify_func_composite ( . args )
    (66) args -> . args_list f_end_args
    (67) args -> . f_end_args
    (68) args_list -> . expresion f_arg
    (69) args_list -> . args_list , expresion f_arg
    (71) f_end_args -> .
    (86) expresion -> . exp
    (87) expresion -> . expresion COMP f_oper exp f_expres
    (89) exp -> . term
    (90) exp -> . exp OPTERM f_oper term f_exp
    (92) term -> . fact
    (93) term -> . term OPFACT f_oper fact f_term
    (96) fact -> . ( lparen expresion ) rparen
    (97) fact -> . var
    (98) fact -> . NUM f_fact
    (99) fact -> . OPTERM NUM
    (100) fact -> . CALL func f_return_val f_end_call f_end_check
    (101) fact -> . STR f_string
    (102) fact -> . fact & f_oper var f_concat
    (103) fact -> . fact & f_oper STR f_string f_concat
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    )               reduce using rule 71 (f_end_args -> .)
    (               shift and go to state 122
    NUM             shift and go to state 124
    OPTERM          shift and go to state 120
    CALL            shift and go to state 125
    STR             shift and go to state 126
    ID              shift and go to state 78

    args                           shift and go to state 261
    args_list                      shift and go to state 202
    f_end_args                     shift and go to state 203
    expresion                      shift and go to state 204
    exp                            shift and go to state 118
    term                           shift and go to state 119
    fact                           shift and go to state 121
    var                            shift and go to state 123

state 252

    (115) while -> WHILE f_while ( expresion f_exprwhile ) DO . { estatutos } f_endwhile

    {               shift and go to state 262


state 253

    (119) for -> FOR expresion f_for_start TO expresion f_for_to { . estatutos } f_for_end
    (47) estatutos -> . estatutos estatuto
    (48) estatutos -> . empty
    (135) empty -> .

    }               reduce using rule 135 (empty -> .)
    CALL            reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    FOR             reduce using rule 135 (empty -> .)
    IF              reduce using rule 135 (empty -> .)
    ID              reduce using rule 135 (empty -> .)

    estatutos                      shift and go to state 263
    empty                          shift and go to state 67

state 254

    (103) fact -> fact & f_oper STR f_string f_concat .

    &               reduce using rule 103 (fact -> fact & f_oper STR f_string f_concat .)
    OPFACT          reduce using rule 103 (fact -> fact & f_oper STR f_string f_concat .)
    OPTERM          reduce using rule 103 (fact -> fact & f_oper STR f_string f_concat .)
    COMP            reduce using rule 103 (fact -> fact & f_oper STR f_string f_concat .)
    TO              reduce using rule 103 (fact -> fact & f_oper STR f_string f_concat .)
    )               reduce using rule 103 (fact -> fact & f_oper STR f_string f_concat .)
    ;               reduce using rule 103 (fact -> fact & f_oper STR f_string f_concat .)
    ]               reduce using rule 103 (fact -> fact & f_oper STR f_string f_concat .)
    ,               reduce using rule 103 (fact -> fact & f_oper STR f_string f_concat .)
    {               reduce using rule 103 (fact -> fact & f_oper STR f_string f_concat .)


state 255

    (109) condicion -> IF ( expresion ) f_if THEN { . estatutos } condicionp f_endif
    (47) estatutos -> . estatutos estatuto
    (48) estatutos -> . empty
    (135) empty -> .

    }               reduce using rule 135 (empty -> .)
    CALL            reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    FOR             reduce using rule 135 (empty -> .)
    IF              reduce using rule 135 (empty -> .)
    ID              reduce using rule 135 (empty -> .)

    estatutos                      shift and go to state 264
    empty                          shift and go to state 67

state 256

    (18) funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { cvars estatutos } . f_endfunc
    (23) f_endfunc -> .

    MAIN            reduce using rule 23 (f_endfunc -> .)
    FUNC            reduce using rule 23 (f_endfunc -> .)
    }               reduce using rule 23 (f_endfunc -> .)

    f_endfunc                      shift and go to state 265

state 257

    (19) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { cvars estatutos . } f_endfunc
    (47) estatutos -> estatutos . estatuto
    (49) estatuto -> . asignacion
    (50) estatuto -> . while
    (51) estatuto -> . for
    (52) estatuto -> . condicion
    (53) estatuto -> . CALL call_func ;
    (72) asignacion -> . var = f_oper expresion ;
    (115) while -> . WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (119) for -> . FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (109) condicion -> . IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    }               shift and go to state 266
    CALL            shift and go to state 85
    WHILE           shift and go to state 87
    FOR             shift and go to state 88
    IF              shift and go to state 89
    ID              shift and go to state 78

    estatuto                       shift and go to state 80
    asignacion                     shift and go to state 81
    while                          shift and go to state 82
    for                            shift and go to state 83
    condicion                      shift and go to state 84
    var                            shift and go to state 86

state 258

    (76) indexacion -> f_start_array [ expresion f_index ] [ . f_next_index expresion f_index ] f_end_array
    (84) f_next_index -> .

    (               reduce using rule 84 (f_next_index -> .)
    NUM             reduce using rule 84 (f_next_index -> .)
    OPTERM          reduce using rule 84 (f_next_index -> .)
    CALL            reduce using rule 84 (f_next_index -> .)
    STR             reduce using rule 84 (f_next_index -> .)
    ID              reduce using rule 84 (f_next_index -> .)

    f_next_index                   shift and go to state 267

state 259

    (75) indexacion -> f_start_array [ expresion f_index ] f_end_array .

    =               reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)
    &               reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)
    OPFACT          reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)
    OPTERM          reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)
    COMP            reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)
    TO              reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)
    )               reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)
    ;               reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)
    ]               reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)
    ,               reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)
    {               reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)


state 260

    (69) args_list -> args_list , expresion f_arg .

    ,               reduce using rule 69 (args_list -> args_list , expresion f_arg .)
    )               reduce using rule 69 (args_list -> args_list , expresion f_arg .)


state 261

    (62) func -> ID f_varobj : ID f_verify_func_composite ( args . )

    )               shift and go to state 268


state 262

    (115) while -> WHILE f_while ( expresion f_exprwhile ) DO { . estatutos } f_endwhile
    (47) estatutos -> . estatutos estatuto
    (48) estatutos -> . empty
    (135) empty -> .

    }               reduce using rule 135 (empty -> .)
    CALL            reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    FOR             reduce using rule 135 (empty -> .)
    IF              reduce using rule 135 (empty -> .)
    ID              reduce using rule 135 (empty -> .)

    estatutos                      shift and go to state 269
    empty                          shift and go to state 67

state 263

    (119) for -> FOR expresion f_for_start TO expresion f_for_to { estatutos . } f_for_end
    (47) estatutos -> estatutos . estatuto
    (49) estatuto -> . asignacion
    (50) estatuto -> . while
    (51) estatuto -> . for
    (52) estatuto -> . condicion
    (53) estatuto -> . CALL call_func ;
    (72) asignacion -> . var = f_oper expresion ;
    (115) while -> . WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (119) for -> . FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (109) condicion -> . IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    }               shift and go to state 270
    CALL            shift and go to state 85
    WHILE           shift and go to state 87
    FOR             shift and go to state 88
    IF              shift and go to state 89
    ID              shift and go to state 78

    estatuto                       shift and go to state 80
    asignacion                     shift and go to state 81
    while                          shift and go to state 82
    for                            shift and go to state 83
    condicion                      shift and go to state 84
    var                            shift and go to state 86

state 264

    (109) condicion -> IF ( expresion ) f_if THEN { estatutos . } condicionp f_endif
    (47) estatutos -> estatutos . estatuto
    (49) estatuto -> . asignacion
    (50) estatuto -> . while
    (51) estatuto -> . for
    (52) estatuto -> . condicion
    (53) estatuto -> . CALL call_func ;
    (72) asignacion -> . var = f_oper expresion ;
    (115) while -> . WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (119) for -> . FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (109) condicion -> . IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    }               shift and go to state 271
    CALL            shift and go to state 85
    WHILE           shift and go to state 87
    FOR             shift and go to state 88
    IF              shift and go to state 89
    ID              shift and go to state 78

    estatuto                       shift and go to state 80
    asignacion                     shift and go to state 81
    while                          shift and go to state 82
    for                            shift and go to state 83
    condicion                      shift and go to state 84
    var                            shift and go to state 86

state 265

    (18) funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { cvars estatutos } f_endfunc .

    MAIN            reduce using rule 18 (funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { cvars estatutos } f_endfunc .)
    FUNC            reduce using rule 18 (funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { cvars estatutos } f_endfunc .)
    }               reduce using rule 18 (funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { cvars estatutos } f_endfunc .)


state 266

    (19) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { cvars estatutos } . f_endfunc
    (23) f_endfunc -> .

    MAIN            reduce using rule 23 (f_endfunc -> .)
    FUNC            reduce using rule 23 (f_endfunc -> .)
    }               reduce using rule 23 (f_endfunc -> .)

    f_endfunc                      shift and go to state 272

state 267

    (76) indexacion -> f_start_array [ expresion f_index ] [ f_next_index . expresion f_index ] f_end_array
    (86) expresion -> . exp
    (87) expresion -> . expresion COMP f_oper exp f_expres
    (89) exp -> . term
    (90) exp -> . exp OPTERM f_oper term f_exp
    (92) term -> . fact
    (93) term -> . term OPFACT f_oper fact f_term
    (96) fact -> . ( lparen expresion ) rparen
    (97) fact -> . var
    (98) fact -> . NUM f_fact
    (99) fact -> . OPTERM NUM
    (100) fact -> . CALL func f_return_val f_end_call f_end_check
    (101) fact -> . STR f_string
    (102) fact -> . fact & f_oper var f_concat
    (103) fact -> . fact & f_oper STR f_string f_concat
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    (               shift and go to state 122
    NUM             shift and go to state 124
    OPTERM          shift and go to state 120
    CALL            shift and go to state 125
    STR             shift and go to state 126
    ID              shift and go to state 78

    expresion                      shift and go to state 273
    exp                            shift and go to state 118
    term                           shift and go to state 119
    fact                           shift and go to state 121
    var                            shift and go to state 123

state 268

    (62) func -> ID f_varobj : ID f_verify_func_composite ( args ) .

    ;               reduce using rule 62 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    &               reduce using rule 62 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    OPFACT          reduce using rule 62 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    OPTERM          reduce using rule 62 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    COMP            reduce using rule 62 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    TO              reduce using rule 62 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    )               reduce using rule 62 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    ]               reduce using rule 62 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    ,               reduce using rule 62 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    {               reduce using rule 62 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)


state 269

    (115) while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos . } f_endwhile
    (47) estatutos -> estatutos . estatuto
    (49) estatuto -> . asignacion
    (50) estatuto -> . while
    (51) estatuto -> . for
    (52) estatuto -> . condicion
    (53) estatuto -> . CALL call_func ;
    (72) asignacion -> . var = f_oper expresion ;
    (115) while -> . WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (119) for -> . FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (109) condicion -> . IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    }               shift and go to state 274
    CALL            shift and go to state 85
    WHILE           shift and go to state 87
    FOR             shift and go to state 88
    IF              shift and go to state 89
    ID              shift and go to state 78

    estatuto                       shift and go to state 80
    asignacion                     shift and go to state 81
    while                          shift and go to state 82
    for                            shift and go to state 83
    condicion                      shift and go to state 84
    var                            shift and go to state 86

state 270

    (119) for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } . f_for_end
    (122) f_for_end -> .

    }               reduce using rule 122 (f_for_end -> .)
    CALL            reduce using rule 122 (f_for_end -> .)
    WHILE           reduce using rule 122 (f_for_end -> .)
    FOR             reduce using rule 122 (f_for_end -> .)
    IF              reduce using rule 122 (f_for_end -> .)
    ID              reduce using rule 122 (f_for_end -> .)

    f_for_end                      shift and go to state 275

state 271

    (109) condicion -> IF ( expresion ) f_if THEN { estatutos } . condicionp f_endif
    (110) condicionp -> . ELSE f_else { estatutos }
    (111) condicionp -> . empty
    (135) empty -> .

    ELSE            shift and go to state 277
    }               reduce using rule 135 (empty -> .)
    CALL            reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    FOR             reduce using rule 135 (empty -> .)
    IF              reduce using rule 135 (empty -> .)
    ID              reduce using rule 135 (empty -> .)

    condicionp                     shift and go to state 276
    empty                          shift and go to state 278

state 272

    (19) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { cvars estatutos } f_endfunc .

    MAIN            reduce using rule 19 (funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { cvars estatutos } f_endfunc .)
    FUNC            reduce using rule 19 (funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { cvars estatutos } f_endfunc .)
    }               reduce using rule 19 (funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { cvars estatutos } f_endfunc .)


state 273

    (76) indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion . f_index ] f_end_array
    (87) expresion -> expresion . COMP f_oper exp f_expres
    (83) f_index -> .

    COMP            shift and go to state 151
    ]               reduce using rule 83 (f_index -> .)

    f_index                        shift and go to state 279

state 274

    (115) while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } . f_endwhile
    (118) f_endwhile -> .

    }               reduce using rule 118 (f_endwhile -> .)
    CALL            reduce using rule 118 (f_endwhile -> .)
    WHILE           reduce using rule 118 (f_endwhile -> .)
    FOR             reduce using rule 118 (f_endwhile -> .)
    IF              reduce using rule 118 (f_endwhile -> .)
    ID              reduce using rule 118 (f_endwhile -> .)

    f_endwhile                     shift and go to state 280

state 275

    (119) for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end .

    }               reduce using rule 119 (for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end .)
    CALL            reduce using rule 119 (for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end .)
    WHILE           reduce using rule 119 (for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end .)
    FOR             reduce using rule 119 (for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end .)
    IF              reduce using rule 119 (for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end .)
    ID              reduce using rule 119 (for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end .)


state 276

    (109) condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp . f_endif
    (113) f_endif -> .

    }               reduce using rule 113 (f_endif -> .)
    CALL            reduce using rule 113 (f_endif -> .)
    WHILE           reduce using rule 113 (f_endif -> .)
    FOR             reduce using rule 113 (f_endif -> .)
    IF              reduce using rule 113 (f_endif -> .)
    ID              reduce using rule 113 (f_endif -> .)

    f_endif                        shift and go to state 281

state 277

    (110) condicionp -> ELSE . f_else { estatutos }
    (114) f_else -> .

    {               reduce using rule 114 (f_else -> .)

    f_else                         shift and go to state 282

state 278

    (111) condicionp -> empty .

    }               reduce using rule 111 (condicionp -> empty .)
    CALL            reduce using rule 111 (condicionp -> empty .)
    WHILE           reduce using rule 111 (condicionp -> empty .)
    FOR             reduce using rule 111 (condicionp -> empty .)
    IF              reduce using rule 111 (condicionp -> empty .)
    ID              reduce using rule 111 (condicionp -> empty .)


state 279

    (76) indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index . ] f_end_array

    ]               shift and go to state 283


state 280

    (115) while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile .

    }               reduce using rule 115 (while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile .)
    CALL            reduce using rule 115 (while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile .)
    WHILE           reduce using rule 115 (while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile .)
    FOR             reduce using rule 115 (while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile .)
    IF              reduce using rule 115 (while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile .)
    ID              reduce using rule 115 (while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile .)


state 281

    (109) condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif .

    }               reduce using rule 109 (condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif .)
    CALL            reduce using rule 109 (condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif .)
    WHILE           reduce using rule 109 (condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif .)
    FOR             reduce using rule 109 (condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif .)
    IF              reduce using rule 109 (condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif .)
    ID              reduce using rule 109 (condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif .)


state 282

    (110) condicionp -> ELSE f_else . { estatutos }

    {               shift and go to state 284


state 283

    (76) indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] . f_end_array
    (85) f_end_array -> .

    =               reduce using rule 85 (f_end_array -> .)
    &               reduce using rule 85 (f_end_array -> .)
    OPFACT          reduce using rule 85 (f_end_array -> .)
    OPTERM          reduce using rule 85 (f_end_array -> .)
    COMP            reduce using rule 85 (f_end_array -> .)
    TO              reduce using rule 85 (f_end_array -> .)
    )               reduce using rule 85 (f_end_array -> .)
    ;               reduce using rule 85 (f_end_array -> .)
    ]               reduce using rule 85 (f_end_array -> .)
    ,               reduce using rule 85 (f_end_array -> .)
    {               reduce using rule 85 (f_end_array -> .)

    f_end_array                    shift and go to state 285

state 284

    (110) condicionp -> ELSE f_else { . estatutos }
    (47) estatutos -> . estatutos estatuto
    (48) estatutos -> . empty
    (135) empty -> .

    }               reduce using rule 135 (empty -> .)
    CALL            reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    FOR             reduce using rule 135 (empty -> .)
    IF              reduce using rule 135 (empty -> .)
    ID              reduce using rule 135 (empty -> .)

    estatutos                      shift and go to state 286
    empty                          shift and go to state 67

state 285

    (76) indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .

    =               reduce using rule 76 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    &               reduce using rule 76 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    OPFACT          reduce using rule 76 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    OPTERM          reduce using rule 76 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    COMP            reduce using rule 76 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    TO              reduce using rule 76 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    )               reduce using rule 76 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    ;               reduce using rule 76 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    ]               reduce using rule 76 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    ,               reduce using rule 76 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    {               reduce using rule 76 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)


state 286

    (110) condicionp -> ELSE f_else { estatutos . }
    (47) estatutos -> estatutos . estatuto
    (49) estatuto -> . asignacion
    (50) estatuto -> . while
    (51) estatuto -> . for
    (52) estatuto -> . condicion
    (53) estatuto -> . CALL call_func ;
    (72) asignacion -> . var = f_oper expresion ;
    (115) while -> . WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (119) for -> . FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (109) condicion -> . IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    }               shift and go to state 287
    CALL            shift and go to state 85
    WHILE           shift and go to state 87
    FOR             shift and go to state 88
    IF              shift and go to state 89
    ID              shift and go to state 78

    estatuto                       shift and go to state 80
    asignacion                     shift and go to state 81
    while                          shift and go to state 82
    for                            shift and go to state 83
    condicion                      shift and go to state 84
    var                            shift and go to state 86

state 287

    (110) condicionp -> ELSE f_else { estatutos } .

    }               reduce using rule 110 (condicionp -> ELSE f_else { estatutos } .)
    CALL            reduce using rule 110 (condicionp -> ELSE f_else { estatutos } .)
    WHILE           reduce using rule 110 (condicionp -> ELSE f_else { estatutos } .)
    FOR             reduce using rule 110 (condicionp -> ELSE f_else { estatutos } .)
    IF              reduce using rule 110 (condicionp -> ELSE f_else { estatutos } .)
    ID              reduce using rule 110 (condicionp -> ELSE f_else { estatutos } .)

