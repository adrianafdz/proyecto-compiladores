Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ;
Rule 2     f_start -> <empty>
Rule 3     f_prog -> <empty>
Rule 4     f_main -> <empty>
Rule 5     f_end -> <empty>
Rule 6     clases -> clases clase
Rule 7     clases -> empty
Rule 8     clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass
Rule 9     clase -> TYPE ID f_startclass { cvars f_cvars funciones } f_endclass
Rule 10    f_startclass -> <empty>
Rule 11    f_clasepadre -> <empty>
Rule 12    f_cvars -> <empty>
Rule 13    f_endclass -> <empty>
Rule 14    funciones -> funciones funcion
Rule 15    funciones -> empty
Rule 16    funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc
Rule 17    funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc
Rule 18    f_startfunc -> <empty>
Rule 19    f_nothing -> <empty>
Rule 20    f_tipofunc -> <empty>
Rule 21    f_endfunc -> <empty>
Rule 22    vars -> vars DEF tipo dimension : lista_id ;
Rule 23    vars -> vars DEF ID f_varsobj : lista_id_obj ;
Rule 24    vars -> empty
Rule 25    f_varsobj -> <empty>
Rule 26    cvars -> cvars DEF tipo dimension : lista_id ;
Rule 27    cvars -> empty
Rule 28    lista_id -> ID f_vars
Rule 29    lista_id -> lista_id , ID f_vars
Rule 30    f_vars -> <empty>
Rule 31    lista_id_obj -> ID f_vars_obj
Rule 32    lista_id_obj -> lista_id_obj , ID f_vars_obj
Rule 33    f_vars_obj -> <empty>
Rule 34    dimension -> [ NUM f_dim1 ] f_onedim
Rule 35    dimension -> [ NUM f_dim1 ] [ NUM f_dim2 ] f_twodim
Rule 36    dimension -> empty
Rule 37    f_dim1 -> <empty>
Rule 38    f_dim2 -> <empty>
Rule 39    f_onedim -> <empty>
Rule 40    f_twodim -> <empty>
Rule 41    tipo -> NUMBER
Rule 42    tipo -> STRING
Rule 43    params -> pparams
Rule 44    params -> empty
Rule 45    pparams -> tipo ID f_param
Rule 46    pparams -> pparams , tipo ID f_param
Rule 47    f_param -> <empty>
Rule 48    estatutos -> estatutos estatuto
Rule 49    estatutos -> empty
Rule 50    estatuto -> asignacion
Rule 51    estatuto -> while
Rule 52    estatuto -> for
Rule 53    estatuto -> condicion
Rule 54    estatuto -> CALL call_func ;
Rule 55    call_func -> func f_end_call f_end_check
Rule 56    call_func -> input
Rule 57    call_func -> write
Rule 58    call_func -> to_num
Rule 59    call_func -> to_str
Rule 60    call_func -> return
Rule 61    f_end_call -> <empty>
Rule 62    func -> ID f_verify_func ( args )
Rule 63    func -> ID f_varobj : ID f_verify_func_composite ( args )
Rule 64    f_verify_func -> <empty>
Rule 65    f_verify_func_composite -> <empty>
Rule 66    args -> args_list f_end_args
Rule 67    args -> f_end_args
Rule 68    args_list -> expresion f_arg
Rule 69    args_list -> args_list , expresion f_arg
Rule 70    f_arg -> <empty>
Rule 71    f_end_args -> <empty>
Rule 72    asignacion -> var = f_oper expresion ;
Rule 73    var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check
Rule 74    var -> ID f_verify_type indexacion f_end_check
Rule 75    indexacion -> f_start_array [ expresion f_index ] f_end_array
Rule 76    indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array
Rule 77    indexacion -> f_no_index empty
Rule 78    f_varobj -> <empty>
Rule 79    f_end_check -> <empty>
Rule 80    f_verify_type -> <empty>
Rule 81    f_verify_type_composite -> <empty>
Rule 82    f_no_index -> <empty>
Rule 83    f_start_array -> <empty>
Rule 84    f_index -> <empty>
Rule 85    f_next_index -> <empty>
Rule 86    f_end_array -> <empty>
Rule 87    expresion -> exp
Rule 88    expresion -> expresion COMP f_oper exp f_expres
Rule 89    expresion -> STR f_string_expr
Rule 90    f_string_expr -> <empty>
Rule 91    f_expres -> <empty>
Rule 92    exp -> term
Rule 93    exp -> exp OPTERM f_oper term f_exp
Rule 94    f_exp -> <empty>
Rule 95    term -> fact
Rule 96    term -> term OPFACT f_oper fact f_term
Rule 97    f_term -> <empty>
Rule 98    f_oper -> <empty>
Rule 99    fact -> ( lparen expresion ) rparen
Rule 100   fact -> var
Rule 101   fact -> NUM f_fact
Rule 102   fact -> OPTERM NUM
Rule 103   fact -> CALL func f_return_val f_end_call f_end_check
Rule 104   f_return_val -> <empty>
Rule 105   lparen -> <empty>
Rule 106   rparen -> <empty>
Rule 107   f_fact -> <empty>
Rule 108   condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
Rule 109   condicionp -> ELSE f_else { estatutos }
Rule 110   condicionp -> empty
Rule 111   f_if -> <empty>
Rule 112   f_endif -> <empty>
Rule 113   f_else -> <empty>
Rule 114   while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
Rule 115   f_while -> <empty>
Rule 116   f_exprwhile -> <empty>
Rule 117   f_endwhile -> <empty>
Rule 118   for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
Rule 119   f_for_start -> <empty>
Rule 120   f_for_to -> <empty>
Rule 121   f_for_end -> <empty>
Rule 122   to_num -> TO_NUMBER ( STR )
Rule 123   to_num -> TO_NUMBER ( var )
Rule 124   to_str -> TO_STRING ( expresion )
Rule 125   input -> INPUT ( var )
Rule 126   write -> PRINT ( write_list )
Rule 127   write_list -> write_list & write_listp
Rule 128   write_list -> write_listp
Rule 129   write_listp -> STR f_string
Rule 130   write_listp -> var
Rule 131   write_listp -> CALL to_str
Rule 132   f_string -> <empty>
Rule 133   return -> RET ( expresion )
Rule 134   empty -> <empty>

Terminals, with rules where they appear

&                    : 127
(                    : 1 16 17 62 63 99 108 114 122 123 124 125 126 133
)                    : 1 16 17 62 63 99 108 114 122 123 124 125 126 133
,                    : 29 32 46 69
:                    : 8 16 17 22 23 26 63 73
;                    : 1 1 22 23 26 54 72
=                    : 72
CALL                 : 54 103 131
COMP                 : 88
DEF                  : 22 23 26
DO                   : 114
ELSE                 : 109
END                  : 1
FOR                  : 118
FUNC                 : 16 17
ID                   : 1 8 8 9 16 17 23 28 29 31 32 45 46 62 63 63 73 73 74
IF                   : 108
INPUT                : 125
MAIN                 : 1
NOTHING              : 17
NUM                  : 34 35 35 101 102
NUMBER               : 41
OPFACT               : 96
OPTERM               : 93 102
PRINT                : 126
PROGRAM              : 1
RET                  : 133
STR                  : 89 122 129
STRING               : 42
THEN                 : 108
TO                   : 118
TO_NUMBER            : 122 123
TO_STRING            : 124
TYPE                 : 8 9
WHILE                : 114
[                    : 34 35 35 75 76 76
]                    : 34 35 35 75 76 76
error                : 
{                    : 1 8 9 16 17 108 109 114 118
}                    : 1 8 9 16 17 108 109 114 118

Nonterminals, with rules where they appear

args                 : 62 63
args_list            : 66 69
asignacion           : 50
call_func            : 54
clase                : 6
clases               : 1 6
condicion            : 53
condicionp           : 108
cvars                : 8 9 26
dimension            : 22 26
empty                : 7 15 24 27 36 44 49 77 110
estatuto             : 48
estatutos            : 1 16 17 48 108 109 114 118
exp                  : 87 88 93
expresion            : 68 69 72 75 76 76 88 99 108 114 118 118 124 133
f_arg                : 68 69
f_clasepadre         : 8
f_cvars              : 8 9
f_dim1               : 34 35
f_dim2               : 35
f_else               : 109
f_end                : 1
f_end_args           : 66 67
f_end_array          : 75 76
f_end_call           : 55 103
f_end_check          : 55 73 74 103
f_endclass           : 8 9
f_endfunc            : 16 17
f_endif              : 108
f_endwhile           : 114
f_exp                : 93
f_expres             : 88
f_exprwhile          : 114
f_fact               : 101
f_for_end            : 118
f_for_start          : 118
f_for_to             : 118
f_if                 : 108
f_index              : 75 76 76
f_main               : 1
f_next_index         : 76
f_no_index           : 77
f_nothing            : 17
f_onedim             : 34
f_oper               : 72 88 93 96
f_param              : 45 46
f_prog               : 1
f_return_val         : 103
f_start              : 1
f_start_array        : 75 76
f_startclass         : 8 9
f_startfunc          : 16 17
f_string             : 129
f_string_expr        : 89
f_term               : 96
f_tipofunc           : 16 17
f_twodim             : 35
f_varobj             : 63 73
f_vars               : 28 29
f_vars_obj           : 31 32
f_varsobj            : 23
f_verify_func        : 62
f_verify_func_composite : 63
f_verify_type        : 74
f_verify_type_composite : 73
f_while              : 114
fact                 : 95 96
for                  : 52
func                 : 55 103
funcion              : 14
funciones            : 1 8 9 14
indexacion           : 73 74
input                : 56
lista_id             : 22 26 29
lista_id_obj         : 23 32
lparen               : 99
params               : 16 17
pparams              : 43 46
return               : 60
rparen               : 99
start                : 0
term                 : 92 93 96
tipo                 : 16 22 26 45 46
to_num               : 58
to_str               : 59 131
var                  : 72 100 123 125 130
vars                 : 1 16 17 22 23
while                : 51
write                : 57
write_list           : 126 127
write_listp          : 127 128

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ;

    PROGRAM         shift and go to state 2

    start                          shift and go to state 1

state 1

    (0) S' -> start .



state 2

    (1) start -> PROGRAM . f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ;
    (2) f_start -> .

    ID              reduce using rule 2 (f_start -> .)

    f_start                        shift and go to state 3

state 3

    (1) start -> PROGRAM f_start . ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ;

    ID              shift and go to state 4


state 4

    (1) start -> PROGRAM f_start ID . f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ;
    (3) f_prog -> .

    ;               reduce using rule 3 (f_prog -> .)

    f_prog                         shift and go to state 5

state 5

    (1) start -> PROGRAM f_start ID f_prog . ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ;

    ;               shift and go to state 6


state 6

    (1) start -> PROGRAM f_start ID f_prog ; . clases vars funciones MAIN f_main ( ) { estatutos } END f_end ;
    (6) clases -> . clases clase
    (7) clases -> . empty
    (134) empty -> .

    TYPE            reduce using rule 134 (empty -> .)
    DEF             reduce using rule 134 (empty -> .)
    MAIN            reduce using rule 134 (empty -> .)
    FUNC            reduce using rule 134 (empty -> .)

    clases                         shift and go to state 7
    empty                          shift and go to state 8

state 7

    (1) start -> PROGRAM f_start ID f_prog ; clases . vars funciones MAIN f_main ( ) { estatutos } END f_end ;
    (6) clases -> clases . clase
    (22) vars -> . vars DEF tipo dimension : lista_id ;
    (23) vars -> . vars DEF ID f_varsobj : lista_id_obj ;
    (24) vars -> . empty
    (8) clase -> . TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass
    (9) clase -> . TYPE ID f_startclass { cvars f_cvars funciones } f_endclass
    (134) empty -> .

    TYPE            shift and go to state 12
    DEF             reduce using rule 134 (empty -> .)
    MAIN            reduce using rule 134 (empty -> .)
    FUNC            reduce using rule 134 (empty -> .)

    vars                           shift and go to state 9
    clase                          shift and go to state 10
    empty                          shift and go to state 11

state 8

    (7) clases -> empty .

    TYPE            reduce using rule 7 (clases -> empty .)
    DEF             reduce using rule 7 (clases -> empty .)
    MAIN            reduce using rule 7 (clases -> empty .)
    FUNC            reduce using rule 7 (clases -> empty .)


state 9

    (1) start -> PROGRAM f_start ID f_prog ; clases vars . funciones MAIN f_main ( ) { estatutos } END f_end ;
    (22) vars -> vars . DEF tipo dimension : lista_id ;
    (23) vars -> vars . DEF ID f_varsobj : lista_id_obj ;
    (14) funciones -> . funciones funcion
    (15) funciones -> . empty
    (134) empty -> .

    DEF             shift and go to state 14
    MAIN            reduce using rule 134 (empty -> .)
    FUNC            reduce using rule 134 (empty -> .)

    funciones                      shift and go to state 13
    empty                          shift and go to state 15

state 10

    (6) clases -> clases clase .

    TYPE            reduce using rule 6 (clases -> clases clase .)
    DEF             reduce using rule 6 (clases -> clases clase .)
    MAIN            reduce using rule 6 (clases -> clases clase .)
    FUNC            reduce using rule 6 (clases -> clases clase .)


state 11

    (24) vars -> empty .

    DEF             reduce using rule 24 (vars -> empty .)
    MAIN            reduce using rule 24 (vars -> empty .)
    FUNC            reduce using rule 24 (vars -> empty .)
    }               reduce using rule 24 (vars -> empty .)
    CALL            reduce using rule 24 (vars -> empty .)
    WHILE           reduce using rule 24 (vars -> empty .)
    FOR             reduce using rule 24 (vars -> empty .)
    IF              reduce using rule 24 (vars -> empty .)
    ID              reduce using rule 24 (vars -> empty .)


state 12

    (8) clase -> TYPE . ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass
    (9) clase -> TYPE . ID f_startclass { cvars f_cvars funciones } f_endclass

    ID              shift and go to state 16


state 13

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones . MAIN f_main ( ) { estatutos } END f_end ;
    (14) funciones -> funciones . funcion
    (16) funcion -> . FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc
    (17) funcion -> . FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc

    MAIN            shift and go to state 17
    FUNC            shift and go to state 19

    funcion                        shift and go to state 18

state 14

    (22) vars -> vars DEF . tipo dimension : lista_id ;
    (23) vars -> vars DEF . ID f_varsobj : lista_id_obj ;
    (41) tipo -> . NUMBER
    (42) tipo -> . STRING

    ID              shift and go to state 21
    NUMBER          shift and go to state 22
    STRING          shift and go to state 23

    tipo                           shift and go to state 20

state 15

    (15) funciones -> empty .

    MAIN            reduce using rule 15 (funciones -> empty .)
    FUNC            reduce using rule 15 (funciones -> empty .)
    }               reduce using rule 15 (funciones -> empty .)


state 16

    (8) clase -> TYPE ID . f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass
    (9) clase -> TYPE ID . f_startclass { cvars f_cvars funciones } f_endclass
    (10) f_startclass -> .

    :               reduce using rule 10 (f_startclass -> .)
    {               reduce using rule 10 (f_startclass -> .)

    f_startclass                   shift and go to state 24

state 17

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN . f_main ( ) { estatutos } END f_end ;
    (4) f_main -> .

    (               reduce using rule 4 (f_main -> .)

    f_main                         shift and go to state 25

state 18

    (14) funciones -> funciones funcion .

    MAIN            reduce using rule 14 (funciones -> funciones funcion .)
    FUNC            reduce using rule 14 (funciones -> funciones funcion .)
    }               reduce using rule 14 (funciones -> funciones funcion .)


state 19

    (16) funcion -> FUNC . ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc
    (17) funcion -> FUNC . ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc

    ID              shift and go to state 26


state 20

    (22) vars -> vars DEF tipo . dimension : lista_id ;
    (34) dimension -> . [ NUM f_dim1 ] f_onedim
    (35) dimension -> . [ NUM f_dim1 ] [ NUM f_dim2 ] f_twodim
    (36) dimension -> . empty
    (134) empty -> .

    [               shift and go to state 28
    :               reduce using rule 134 (empty -> .)

    dimension                      shift and go to state 27
    empty                          shift and go to state 29

state 21

    (23) vars -> vars DEF ID . f_varsobj : lista_id_obj ;
    (25) f_varsobj -> .

    :               reduce using rule 25 (f_varsobj -> .)

    f_varsobj                      shift and go to state 30

state 22

    (41) tipo -> NUMBER .

    [               reduce using rule 41 (tipo -> NUMBER .)
    :               reduce using rule 41 (tipo -> NUMBER .)
    ID              reduce using rule 41 (tipo -> NUMBER .)
    {               reduce using rule 41 (tipo -> NUMBER .)


state 23

    (42) tipo -> STRING .

    [               reduce using rule 42 (tipo -> STRING .)
    :               reduce using rule 42 (tipo -> STRING .)
    ID              reduce using rule 42 (tipo -> STRING .)
    {               reduce using rule 42 (tipo -> STRING .)


state 24

    (8) clase -> TYPE ID f_startclass . : ID f_clasepadre { cvars f_cvars funciones } f_endclass
    (9) clase -> TYPE ID f_startclass . { cvars f_cvars funciones } f_endclass

    :               shift and go to state 31
    {               shift and go to state 32


state 25

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main . ( ) { estatutos } END f_end ;

    (               shift and go to state 33


state 26

    (16) funcion -> FUNC ID . f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc
    (17) funcion -> FUNC ID . f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc
    (18) f_startfunc -> .

    (               reduce using rule 18 (f_startfunc -> .)

    f_startfunc                    shift and go to state 34

state 27

    (22) vars -> vars DEF tipo dimension . : lista_id ;

    :               shift and go to state 35


state 28

    (34) dimension -> [ . NUM f_dim1 ] f_onedim
    (35) dimension -> [ . NUM f_dim1 ] [ NUM f_dim2 ] f_twodim

    NUM             shift and go to state 36


state 29

    (36) dimension -> empty .

    :               reduce using rule 36 (dimension -> empty .)


state 30

    (23) vars -> vars DEF ID f_varsobj . : lista_id_obj ;

    :               shift and go to state 37


state 31

    (8) clase -> TYPE ID f_startclass : . ID f_clasepadre { cvars f_cvars funciones } f_endclass

    ID              shift and go to state 38


state 32

    (9) clase -> TYPE ID f_startclass { . cvars f_cvars funciones } f_endclass
    (26) cvars -> . cvars DEF tipo dimension : lista_id ;
    (27) cvars -> . empty
    (134) empty -> .

    DEF             reduce using rule 134 (empty -> .)
    }               reduce using rule 134 (empty -> .)
    FUNC            reduce using rule 134 (empty -> .)

    cvars                          shift and go to state 39
    empty                          shift and go to state 40

state 33

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( . ) { estatutos } END f_end ;

    )               shift and go to state 41


state 34

    (16) funcion -> FUNC ID f_startfunc . ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc
    (17) funcion -> FUNC ID f_startfunc . ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc

    (               shift and go to state 42


state 35

    (22) vars -> vars DEF tipo dimension : . lista_id ;
    (28) lista_id -> . ID f_vars
    (29) lista_id -> . lista_id , ID f_vars

    ID              shift and go to state 44

    lista_id                       shift and go to state 43

state 36

    (34) dimension -> [ NUM . f_dim1 ] f_onedim
    (35) dimension -> [ NUM . f_dim1 ] [ NUM f_dim2 ] f_twodim
    (37) f_dim1 -> .

    ]               reduce using rule 37 (f_dim1 -> .)

    f_dim1                         shift and go to state 45

state 37

    (23) vars -> vars DEF ID f_varsobj : . lista_id_obj ;
    (31) lista_id_obj -> . ID f_vars_obj
    (32) lista_id_obj -> . lista_id_obj , ID f_vars_obj

    ID              shift and go to state 46

    lista_id_obj                   shift and go to state 47

state 38

    (8) clase -> TYPE ID f_startclass : ID . f_clasepadre { cvars f_cvars funciones } f_endclass
    (11) f_clasepadre -> .

    {               reduce using rule 11 (f_clasepadre -> .)

    f_clasepadre                   shift and go to state 48

state 39

    (9) clase -> TYPE ID f_startclass { cvars . f_cvars funciones } f_endclass
    (26) cvars -> cvars . DEF tipo dimension : lista_id ;
    (12) f_cvars -> .

    DEF             shift and go to state 50
    }               reduce using rule 12 (f_cvars -> .)
    FUNC            reduce using rule 12 (f_cvars -> .)

    f_cvars                        shift and go to state 49

state 40

    (27) cvars -> empty .

    DEF             reduce using rule 27 (cvars -> empty .)
    }               reduce using rule 27 (cvars -> empty .)
    FUNC            reduce using rule 27 (cvars -> empty .)


state 41

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) . { estatutos } END f_end ;

    {               shift and go to state 51


state 42

    (16) funcion -> FUNC ID f_startfunc ( . params ) : tipo f_tipofunc { vars estatutos } f_endfunc
    (17) funcion -> FUNC ID f_startfunc ( . params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc
    (43) params -> . pparams
    (44) params -> . empty
    (45) pparams -> . tipo ID f_param
    (46) pparams -> . pparams , tipo ID f_param
    (134) empty -> .
    (41) tipo -> . NUMBER
    (42) tipo -> . STRING

    )               reduce using rule 134 (empty -> .)
    NUMBER          shift and go to state 22
    STRING          shift and go to state 23

    params                         shift and go to state 52
    tipo                           shift and go to state 53
    pparams                        shift and go to state 54
    empty                          shift and go to state 55

state 43

    (22) vars -> vars DEF tipo dimension : lista_id . ;
    (29) lista_id -> lista_id . , ID f_vars

    ;               shift and go to state 56
    ,               shift and go to state 57


state 44

    (28) lista_id -> ID . f_vars
    (30) f_vars -> .

    ;               reduce using rule 30 (f_vars -> .)
    ,               reduce using rule 30 (f_vars -> .)

    f_vars                         shift and go to state 58

state 45

    (34) dimension -> [ NUM f_dim1 . ] f_onedim
    (35) dimension -> [ NUM f_dim1 . ] [ NUM f_dim2 ] f_twodim

    ]               shift and go to state 59


state 46

    (31) lista_id_obj -> ID . f_vars_obj
    (33) f_vars_obj -> .

    ;               reduce using rule 33 (f_vars_obj -> .)
    ,               reduce using rule 33 (f_vars_obj -> .)

    f_vars_obj                     shift and go to state 60

state 47

    (23) vars -> vars DEF ID f_varsobj : lista_id_obj . ;
    (32) lista_id_obj -> lista_id_obj . , ID f_vars_obj

    ;               shift and go to state 61
    ,               shift and go to state 62


state 48

    (8) clase -> TYPE ID f_startclass : ID f_clasepadre . { cvars f_cvars funciones } f_endclass

    {               shift and go to state 63


state 49

    (9) clase -> TYPE ID f_startclass { cvars f_cvars . funciones } f_endclass
    (14) funciones -> . funciones funcion
    (15) funciones -> . empty
    (134) empty -> .

    }               reduce using rule 134 (empty -> .)
    FUNC            reduce using rule 134 (empty -> .)

    funciones                      shift and go to state 64
    empty                          shift and go to state 15

state 50

    (26) cvars -> cvars DEF . tipo dimension : lista_id ;
    (41) tipo -> . NUMBER
    (42) tipo -> . STRING

    NUMBER          shift and go to state 22
    STRING          shift and go to state 23

    tipo                           shift and go to state 65

state 51

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { . estatutos } END f_end ;
    (48) estatutos -> . estatutos estatuto
    (49) estatutos -> . empty
    (134) empty -> .

    }               reduce using rule 134 (empty -> .)
    CALL            reduce using rule 134 (empty -> .)
    WHILE           reduce using rule 134 (empty -> .)
    FOR             reduce using rule 134 (empty -> .)
    IF              reduce using rule 134 (empty -> .)
    ID              reduce using rule 134 (empty -> .)

    estatutos                      shift and go to state 66
    empty                          shift and go to state 67

state 52

    (16) funcion -> FUNC ID f_startfunc ( params . ) : tipo f_tipofunc { vars estatutos } f_endfunc
    (17) funcion -> FUNC ID f_startfunc ( params . ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc

    )               shift and go to state 68


state 53

    (45) pparams -> tipo . ID f_param

    ID              shift and go to state 69


state 54

    (43) params -> pparams .
    (46) pparams -> pparams . , tipo ID f_param

    )               reduce using rule 43 (params -> pparams .)
    ,               shift and go to state 70


state 55

    (44) params -> empty .

    )               reduce using rule 44 (params -> empty .)


state 56

    (22) vars -> vars DEF tipo dimension : lista_id ; .

    DEF             reduce using rule 22 (vars -> vars DEF tipo dimension : lista_id ; .)
    MAIN            reduce using rule 22 (vars -> vars DEF tipo dimension : lista_id ; .)
    FUNC            reduce using rule 22 (vars -> vars DEF tipo dimension : lista_id ; .)
    }               reduce using rule 22 (vars -> vars DEF tipo dimension : lista_id ; .)
    CALL            reduce using rule 22 (vars -> vars DEF tipo dimension : lista_id ; .)
    WHILE           reduce using rule 22 (vars -> vars DEF tipo dimension : lista_id ; .)
    FOR             reduce using rule 22 (vars -> vars DEF tipo dimension : lista_id ; .)
    IF              reduce using rule 22 (vars -> vars DEF tipo dimension : lista_id ; .)
    ID              reduce using rule 22 (vars -> vars DEF tipo dimension : lista_id ; .)


state 57

    (29) lista_id -> lista_id , . ID f_vars

    ID              shift and go to state 71


state 58

    (28) lista_id -> ID f_vars .

    ;               reduce using rule 28 (lista_id -> ID f_vars .)
    ,               reduce using rule 28 (lista_id -> ID f_vars .)


state 59

    (34) dimension -> [ NUM f_dim1 ] . f_onedim
    (35) dimension -> [ NUM f_dim1 ] . [ NUM f_dim2 ] f_twodim
    (39) f_onedim -> .

    [               shift and go to state 72
    :               reduce using rule 39 (f_onedim -> .)

    f_onedim                       shift and go to state 73

state 60

    (31) lista_id_obj -> ID f_vars_obj .

    ;               reduce using rule 31 (lista_id_obj -> ID f_vars_obj .)
    ,               reduce using rule 31 (lista_id_obj -> ID f_vars_obj .)


state 61

    (23) vars -> vars DEF ID f_varsobj : lista_id_obj ; .

    DEF             reduce using rule 23 (vars -> vars DEF ID f_varsobj : lista_id_obj ; .)
    MAIN            reduce using rule 23 (vars -> vars DEF ID f_varsobj : lista_id_obj ; .)
    FUNC            reduce using rule 23 (vars -> vars DEF ID f_varsobj : lista_id_obj ; .)
    }               reduce using rule 23 (vars -> vars DEF ID f_varsobj : lista_id_obj ; .)
    CALL            reduce using rule 23 (vars -> vars DEF ID f_varsobj : lista_id_obj ; .)
    WHILE           reduce using rule 23 (vars -> vars DEF ID f_varsobj : lista_id_obj ; .)
    FOR             reduce using rule 23 (vars -> vars DEF ID f_varsobj : lista_id_obj ; .)
    IF              reduce using rule 23 (vars -> vars DEF ID f_varsobj : lista_id_obj ; .)
    ID              reduce using rule 23 (vars -> vars DEF ID f_varsobj : lista_id_obj ; .)


state 62

    (32) lista_id_obj -> lista_id_obj , . ID f_vars_obj

    ID              shift and go to state 74


state 63

    (8) clase -> TYPE ID f_startclass : ID f_clasepadre { . cvars f_cvars funciones } f_endclass
    (26) cvars -> . cvars DEF tipo dimension : lista_id ;
    (27) cvars -> . empty
    (134) empty -> .

    DEF             reduce using rule 134 (empty -> .)
    }               reduce using rule 134 (empty -> .)
    FUNC            reduce using rule 134 (empty -> .)

    cvars                          shift and go to state 75
    empty                          shift and go to state 40

state 64

    (9) clase -> TYPE ID f_startclass { cvars f_cvars funciones . } f_endclass
    (14) funciones -> funciones . funcion
    (16) funcion -> . FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc
    (17) funcion -> . FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc

    }               shift and go to state 76
    FUNC            shift and go to state 19

    funcion                        shift and go to state 18

state 65

    (26) cvars -> cvars DEF tipo . dimension : lista_id ;
    (34) dimension -> . [ NUM f_dim1 ] f_onedim
    (35) dimension -> . [ NUM f_dim1 ] [ NUM f_dim2 ] f_twodim
    (36) dimension -> . empty
    (134) empty -> .

    [               shift and go to state 28
    :               reduce using rule 134 (empty -> .)

    dimension                      shift and go to state 77
    empty                          shift and go to state 29

state 66

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos . } END f_end ;
    (48) estatutos -> estatutos . estatuto
    (50) estatuto -> . asignacion
    (51) estatuto -> . while
    (52) estatuto -> . for
    (53) estatuto -> . condicion
    (54) estatuto -> . CALL call_func ;
    (72) asignacion -> . var = f_oper expresion ;
    (114) while -> . WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (118) for -> . FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (108) condicion -> . IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    }               shift and go to state 79
    CALL            shift and go to state 85
    WHILE           shift and go to state 87
    FOR             shift and go to state 88
    IF              shift and go to state 89
    ID              shift and go to state 78

    estatuto                       shift and go to state 80
    asignacion                     shift and go to state 81
    while                          shift and go to state 82
    for                            shift and go to state 83
    condicion                      shift and go to state 84
    var                            shift and go to state 86

state 67

    (49) estatutos -> empty .

    }               reduce using rule 49 (estatutos -> empty .)
    CALL            reduce using rule 49 (estatutos -> empty .)
    WHILE           reduce using rule 49 (estatutos -> empty .)
    FOR             reduce using rule 49 (estatutos -> empty .)
    IF              reduce using rule 49 (estatutos -> empty .)
    ID              reduce using rule 49 (estatutos -> empty .)


state 68

    (16) funcion -> FUNC ID f_startfunc ( params ) . : tipo f_tipofunc { vars estatutos } f_endfunc
    (17) funcion -> FUNC ID f_startfunc ( params ) . : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc

    :               shift and go to state 90


state 69

    (45) pparams -> tipo ID . f_param
    (47) f_param -> .

    ,               reduce using rule 47 (f_param -> .)
    )               reduce using rule 47 (f_param -> .)

    f_param                        shift and go to state 91

state 70

    (46) pparams -> pparams , . tipo ID f_param
    (41) tipo -> . NUMBER
    (42) tipo -> . STRING

    NUMBER          shift and go to state 22
    STRING          shift and go to state 23

    tipo                           shift and go to state 92

state 71

    (29) lista_id -> lista_id , ID . f_vars
    (30) f_vars -> .

    ;               reduce using rule 30 (f_vars -> .)
    ,               reduce using rule 30 (f_vars -> .)

    f_vars                         shift and go to state 93

state 72

    (35) dimension -> [ NUM f_dim1 ] [ . NUM f_dim2 ] f_twodim

    NUM             shift and go to state 94


state 73

    (34) dimension -> [ NUM f_dim1 ] f_onedim .

    :               reduce using rule 34 (dimension -> [ NUM f_dim1 ] f_onedim .)


state 74

    (32) lista_id_obj -> lista_id_obj , ID . f_vars_obj
    (33) f_vars_obj -> .

    ;               reduce using rule 33 (f_vars_obj -> .)
    ,               reduce using rule 33 (f_vars_obj -> .)

    f_vars_obj                     shift and go to state 95

state 75

    (8) clase -> TYPE ID f_startclass : ID f_clasepadre { cvars . f_cvars funciones } f_endclass
    (26) cvars -> cvars . DEF tipo dimension : lista_id ;
    (12) f_cvars -> .

    DEF             shift and go to state 50
    }               reduce using rule 12 (f_cvars -> .)
    FUNC            reduce using rule 12 (f_cvars -> .)

    f_cvars                        shift and go to state 96

state 76

    (9) clase -> TYPE ID f_startclass { cvars f_cvars funciones } . f_endclass
    (13) f_endclass -> .

    TYPE            reduce using rule 13 (f_endclass -> .)
    DEF             reduce using rule 13 (f_endclass -> .)
    MAIN            reduce using rule 13 (f_endclass -> .)
    FUNC            reduce using rule 13 (f_endclass -> .)

    f_endclass                     shift and go to state 97

state 77

    (26) cvars -> cvars DEF tipo dimension . : lista_id ;

    :               shift and go to state 98


state 78

    (73) var -> ID . f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> ID . f_verify_type indexacion f_end_check
    (78) f_varobj -> .
    (80) f_verify_type -> .

    :               reduce using rule 78 (f_varobj -> .)
    [               reduce using rule 80 (f_verify_type -> .)
    =               reduce using rule 80 (f_verify_type -> .)
    OPFACT          reduce using rule 80 (f_verify_type -> .)
    OPTERM          reduce using rule 80 (f_verify_type -> .)
    COMP            reduce using rule 80 (f_verify_type -> .)
    TO              reduce using rule 80 (f_verify_type -> .)
    )               reduce using rule 80 (f_verify_type -> .)
    &               reduce using rule 80 (f_verify_type -> .)
    ;               reduce using rule 80 (f_verify_type -> .)
    ]               reduce using rule 80 (f_verify_type -> .)
    ,               reduce using rule 80 (f_verify_type -> .)
    {               reduce using rule 80 (f_verify_type -> .)

    f_varobj                       shift and go to state 99
    f_verify_type                  shift and go to state 100

state 79

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } . END f_end ;

    END             shift and go to state 101


state 80

    (48) estatutos -> estatutos estatuto .

    }               reduce using rule 48 (estatutos -> estatutos estatuto .)
    CALL            reduce using rule 48 (estatutos -> estatutos estatuto .)
    WHILE           reduce using rule 48 (estatutos -> estatutos estatuto .)
    FOR             reduce using rule 48 (estatutos -> estatutos estatuto .)
    IF              reduce using rule 48 (estatutos -> estatutos estatuto .)
    ID              reduce using rule 48 (estatutos -> estatutos estatuto .)


state 81

    (50) estatuto -> asignacion .

    }               reduce using rule 50 (estatuto -> asignacion .)
    CALL            reduce using rule 50 (estatuto -> asignacion .)
    WHILE           reduce using rule 50 (estatuto -> asignacion .)
    FOR             reduce using rule 50 (estatuto -> asignacion .)
    IF              reduce using rule 50 (estatuto -> asignacion .)
    ID              reduce using rule 50 (estatuto -> asignacion .)


state 82

    (51) estatuto -> while .

    }               reduce using rule 51 (estatuto -> while .)
    CALL            reduce using rule 51 (estatuto -> while .)
    WHILE           reduce using rule 51 (estatuto -> while .)
    FOR             reduce using rule 51 (estatuto -> while .)
    IF              reduce using rule 51 (estatuto -> while .)
    ID              reduce using rule 51 (estatuto -> while .)


state 83

    (52) estatuto -> for .

    }               reduce using rule 52 (estatuto -> for .)
    CALL            reduce using rule 52 (estatuto -> for .)
    WHILE           reduce using rule 52 (estatuto -> for .)
    FOR             reduce using rule 52 (estatuto -> for .)
    IF              reduce using rule 52 (estatuto -> for .)
    ID              reduce using rule 52 (estatuto -> for .)


state 84

    (53) estatuto -> condicion .

    }               reduce using rule 53 (estatuto -> condicion .)
    CALL            reduce using rule 53 (estatuto -> condicion .)
    WHILE           reduce using rule 53 (estatuto -> condicion .)
    FOR             reduce using rule 53 (estatuto -> condicion .)
    IF              reduce using rule 53 (estatuto -> condicion .)
    ID              reduce using rule 53 (estatuto -> condicion .)


state 85

    (54) estatuto -> CALL . call_func ;
    (55) call_func -> . func f_end_call f_end_check
    (56) call_func -> . input
    (57) call_func -> . write
    (58) call_func -> . to_num
    (59) call_func -> . to_str
    (60) call_func -> . return
    (62) func -> . ID f_verify_func ( args )
    (63) func -> . ID f_varobj : ID f_verify_func_composite ( args )
    (125) input -> . INPUT ( var )
    (126) write -> . PRINT ( write_list )
    (122) to_num -> . TO_NUMBER ( STR )
    (123) to_num -> . TO_NUMBER ( var )
    (124) to_str -> . TO_STRING ( expresion )
    (133) return -> . RET ( expresion )

    ID              shift and go to state 109
    INPUT           shift and go to state 110
    PRINT           shift and go to state 111
    TO_NUMBER       shift and go to state 112
    TO_STRING       shift and go to state 113
    RET             shift and go to state 114

    call_func                      shift and go to state 102
    func                           shift and go to state 103
    input                          shift and go to state 104
    write                          shift and go to state 105
    to_num                         shift and go to state 106
    to_str                         shift and go to state 107
    return                         shift and go to state 108

state 86

    (72) asignacion -> var . = f_oper expresion ;

    =               shift and go to state 115


state 87

    (114) while -> WHILE . f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (115) f_while -> .

    (               reduce using rule 115 (f_while -> .)

    f_while                        shift and go to state 116

state 88

    (118) for -> FOR . expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (87) expresion -> . exp
    (88) expresion -> . expresion COMP f_oper exp f_expres
    (89) expresion -> . STR f_string_expr
    (92) exp -> . term
    (93) exp -> . exp OPTERM f_oper term f_exp
    (95) term -> . fact
    (96) term -> . term OPFACT f_oper fact f_term
    (99) fact -> . ( lparen expresion ) rparen
    (100) fact -> . var
    (101) fact -> . NUM f_fact
    (102) fact -> . OPTERM NUM
    (103) fact -> . CALL func f_return_val f_end_call f_end_check
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    STR             shift and go to state 119
    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    expresion                      shift and go to state 117
    exp                            shift and go to state 118
    term                           shift and go to state 120
    fact                           shift and go to state 122
    var                            shift and go to state 124

state 89

    (108) condicion -> IF . ( expresion ) f_if THEN { estatutos } condicionp f_endif

    (               shift and go to state 127


state 90

    (16) funcion -> FUNC ID f_startfunc ( params ) : . tipo f_tipofunc { vars estatutos } f_endfunc
    (17) funcion -> FUNC ID f_startfunc ( params ) : . NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc
    (41) tipo -> . NUMBER
    (42) tipo -> . STRING

    NOTHING         shift and go to state 129
    NUMBER          shift and go to state 22
    STRING          shift and go to state 23

    tipo                           shift and go to state 128

state 91

    (45) pparams -> tipo ID f_param .

    ,               reduce using rule 45 (pparams -> tipo ID f_param .)
    )               reduce using rule 45 (pparams -> tipo ID f_param .)


state 92

    (46) pparams -> pparams , tipo . ID f_param

    ID              shift and go to state 130


state 93

    (29) lista_id -> lista_id , ID f_vars .

    ;               reduce using rule 29 (lista_id -> lista_id , ID f_vars .)
    ,               reduce using rule 29 (lista_id -> lista_id , ID f_vars .)


state 94

    (35) dimension -> [ NUM f_dim1 ] [ NUM . f_dim2 ] f_twodim
    (38) f_dim2 -> .

    ]               reduce using rule 38 (f_dim2 -> .)

    f_dim2                         shift and go to state 131

state 95

    (32) lista_id_obj -> lista_id_obj , ID f_vars_obj .

    ;               reduce using rule 32 (lista_id_obj -> lista_id_obj , ID f_vars_obj .)
    ,               reduce using rule 32 (lista_id_obj -> lista_id_obj , ID f_vars_obj .)


state 96

    (8) clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars . funciones } f_endclass
    (14) funciones -> . funciones funcion
    (15) funciones -> . empty
    (134) empty -> .

    }               reduce using rule 134 (empty -> .)
    FUNC            reduce using rule 134 (empty -> .)

    funciones                      shift and go to state 132
    empty                          shift and go to state 15

state 97

    (9) clase -> TYPE ID f_startclass { cvars f_cvars funciones } f_endclass .

    TYPE            reduce using rule 9 (clase -> TYPE ID f_startclass { cvars f_cvars funciones } f_endclass .)
    DEF             reduce using rule 9 (clase -> TYPE ID f_startclass { cvars f_cvars funciones } f_endclass .)
    MAIN            reduce using rule 9 (clase -> TYPE ID f_startclass { cvars f_cvars funciones } f_endclass .)
    FUNC            reduce using rule 9 (clase -> TYPE ID f_startclass { cvars f_cvars funciones } f_endclass .)


state 98

    (26) cvars -> cvars DEF tipo dimension : . lista_id ;
    (28) lista_id -> . ID f_vars
    (29) lista_id -> . lista_id , ID f_vars

    ID              shift and go to state 44

    lista_id                       shift and go to state 133

state 99

    (73) var -> ID f_varobj . : ID f_verify_type_composite indexacion f_end_check

    :               shift and go to state 134


state 100

    (74) var -> ID f_verify_type . indexacion f_end_check
    (75) indexacion -> . f_start_array [ expresion f_index ] f_end_array
    (76) indexacion -> . f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array
    (77) indexacion -> . f_no_index empty
    (83) f_start_array -> .
    (82) f_no_index -> .

    [               reduce using rule 83 (f_start_array -> .)
    =               reduce using rule 82 (f_no_index -> .)
    OPFACT          reduce using rule 82 (f_no_index -> .)
    OPTERM          reduce using rule 82 (f_no_index -> .)
    COMP            reduce using rule 82 (f_no_index -> .)
    TO              reduce using rule 82 (f_no_index -> .)
    )               reduce using rule 82 (f_no_index -> .)
    &               reduce using rule 82 (f_no_index -> .)
    ;               reduce using rule 82 (f_no_index -> .)
    ]               reduce using rule 82 (f_no_index -> .)
    ,               reduce using rule 82 (f_no_index -> .)
    {               reduce using rule 82 (f_no_index -> .)

    indexacion                     shift and go to state 135
    f_start_array                  shift and go to state 136
    f_no_index                     shift and go to state 137

state 101

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END . f_end ;
    (5) f_end -> .

    ;               reduce using rule 5 (f_end -> .)

    f_end                          shift and go to state 138

state 102

    (54) estatuto -> CALL call_func . ;

    ;               shift and go to state 139


state 103

    (55) call_func -> func . f_end_call f_end_check
    (61) f_end_call -> .

    ;               reduce using rule 61 (f_end_call -> .)

    f_end_call                     shift and go to state 140

state 104

    (56) call_func -> input .

    ;               reduce using rule 56 (call_func -> input .)


state 105

    (57) call_func -> write .

    ;               reduce using rule 57 (call_func -> write .)


state 106

    (58) call_func -> to_num .

    ;               reduce using rule 58 (call_func -> to_num .)


state 107

    (59) call_func -> to_str .

    ;               reduce using rule 59 (call_func -> to_str .)


state 108

    (60) call_func -> return .

    ;               reduce using rule 60 (call_func -> return .)


state 109

    (62) func -> ID . f_verify_func ( args )
    (63) func -> ID . f_varobj : ID f_verify_func_composite ( args )
    (64) f_verify_func -> .
    (78) f_varobj -> .

    (               reduce using rule 64 (f_verify_func -> .)
    :               reduce using rule 78 (f_varobj -> .)

    f_verify_func                  shift and go to state 141
    f_varobj                       shift and go to state 142

state 110

    (125) input -> INPUT . ( var )

    (               shift and go to state 143


state 111

    (126) write -> PRINT . ( write_list )

    (               shift and go to state 144


state 112

    (122) to_num -> TO_NUMBER . ( STR )
    (123) to_num -> TO_NUMBER . ( var )

    (               shift and go to state 145


state 113

    (124) to_str -> TO_STRING . ( expresion )

    (               shift and go to state 146


state 114

    (133) return -> RET . ( expresion )

    (               shift and go to state 147


state 115

    (72) asignacion -> var = . f_oper expresion ;
    (98) f_oper -> .

    STR             reduce using rule 98 (f_oper -> .)
    (               reduce using rule 98 (f_oper -> .)
    NUM             reduce using rule 98 (f_oper -> .)
    OPTERM          reduce using rule 98 (f_oper -> .)
    CALL            reduce using rule 98 (f_oper -> .)
    ID              reduce using rule 98 (f_oper -> .)

    f_oper                         shift and go to state 148

state 116

    (114) while -> WHILE f_while . ( expresion f_exprwhile ) DO { estatutos } f_endwhile

    (               shift and go to state 149


state 117

    (118) for -> FOR expresion . f_for_start TO expresion f_for_to { estatutos } f_for_end
    (88) expresion -> expresion . COMP f_oper exp f_expres
    (119) f_for_start -> .

    COMP            shift and go to state 151
    TO              reduce using rule 119 (f_for_start -> .)

    f_for_start                    shift and go to state 150

state 118

    (87) expresion -> exp .
    (93) exp -> exp . OPTERM f_oper term f_exp

    COMP            reduce using rule 87 (expresion -> exp .)
    TO              reduce using rule 87 (expresion -> exp .)
    )               reduce using rule 87 (expresion -> exp .)
    ;               reduce using rule 87 (expresion -> exp .)
    ]               reduce using rule 87 (expresion -> exp .)
    ,               reduce using rule 87 (expresion -> exp .)
    {               reduce using rule 87 (expresion -> exp .)
    OPTERM          shift and go to state 152


state 119

    (89) expresion -> STR . f_string_expr
    (90) f_string_expr -> .

    COMP            reduce using rule 90 (f_string_expr -> .)
    TO              reduce using rule 90 (f_string_expr -> .)
    )               reduce using rule 90 (f_string_expr -> .)
    ;               reduce using rule 90 (f_string_expr -> .)
    ]               reduce using rule 90 (f_string_expr -> .)
    ,               reduce using rule 90 (f_string_expr -> .)
    {               reduce using rule 90 (f_string_expr -> .)

    f_string_expr                  shift and go to state 153

state 120

    (92) exp -> term .
    (96) term -> term . OPFACT f_oper fact f_term

    OPTERM          reduce using rule 92 (exp -> term .)
    COMP            reduce using rule 92 (exp -> term .)
    TO              reduce using rule 92 (exp -> term .)
    )               reduce using rule 92 (exp -> term .)
    ;               reduce using rule 92 (exp -> term .)
    ]               reduce using rule 92 (exp -> term .)
    ,               reduce using rule 92 (exp -> term .)
    {               reduce using rule 92 (exp -> term .)
    OPFACT          shift and go to state 154


state 121

    (102) fact -> OPTERM . NUM

    NUM             shift and go to state 155


state 122

    (95) term -> fact .

    OPFACT          reduce using rule 95 (term -> fact .)
    OPTERM          reduce using rule 95 (term -> fact .)
    COMP            reduce using rule 95 (term -> fact .)
    TO              reduce using rule 95 (term -> fact .)
    )               reduce using rule 95 (term -> fact .)
    ;               reduce using rule 95 (term -> fact .)
    ]               reduce using rule 95 (term -> fact .)
    ,               reduce using rule 95 (term -> fact .)
    {               reduce using rule 95 (term -> fact .)


state 123

    (99) fact -> ( . lparen expresion ) rparen
    (105) lparen -> .

    STR             reduce using rule 105 (lparen -> .)
    (               reduce using rule 105 (lparen -> .)
    NUM             reduce using rule 105 (lparen -> .)
    OPTERM          reduce using rule 105 (lparen -> .)
    CALL            reduce using rule 105 (lparen -> .)
    ID              reduce using rule 105 (lparen -> .)

    lparen                         shift and go to state 156

state 124

    (100) fact -> var .

    OPFACT          reduce using rule 100 (fact -> var .)
    OPTERM          reduce using rule 100 (fact -> var .)
    COMP            reduce using rule 100 (fact -> var .)
    TO              reduce using rule 100 (fact -> var .)
    )               reduce using rule 100 (fact -> var .)
    ;               reduce using rule 100 (fact -> var .)
    ]               reduce using rule 100 (fact -> var .)
    ,               reduce using rule 100 (fact -> var .)
    {               reduce using rule 100 (fact -> var .)


state 125

    (101) fact -> NUM . f_fact
    (107) f_fact -> .

    OPFACT          reduce using rule 107 (f_fact -> .)
    OPTERM          reduce using rule 107 (f_fact -> .)
    COMP            reduce using rule 107 (f_fact -> .)
    TO              reduce using rule 107 (f_fact -> .)
    )               reduce using rule 107 (f_fact -> .)
    ;               reduce using rule 107 (f_fact -> .)
    ]               reduce using rule 107 (f_fact -> .)
    ,               reduce using rule 107 (f_fact -> .)
    {               reduce using rule 107 (f_fact -> .)

    f_fact                         shift and go to state 157

state 126

    (103) fact -> CALL . func f_return_val f_end_call f_end_check
    (62) func -> . ID f_verify_func ( args )
    (63) func -> . ID f_varobj : ID f_verify_func_composite ( args )

    ID              shift and go to state 109

    func                           shift and go to state 158

state 127

    (108) condicion -> IF ( . expresion ) f_if THEN { estatutos } condicionp f_endif
    (87) expresion -> . exp
    (88) expresion -> . expresion COMP f_oper exp f_expres
    (89) expresion -> . STR f_string_expr
    (92) exp -> . term
    (93) exp -> . exp OPTERM f_oper term f_exp
    (95) term -> . fact
    (96) term -> . term OPFACT f_oper fact f_term
    (99) fact -> . ( lparen expresion ) rparen
    (100) fact -> . var
    (101) fact -> . NUM f_fact
    (102) fact -> . OPTERM NUM
    (103) fact -> . CALL func f_return_val f_end_call f_end_check
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    STR             shift and go to state 119
    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    expresion                      shift and go to state 159
    exp                            shift and go to state 118
    term                           shift and go to state 120
    fact                           shift and go to state 122
    var                            shift and go to state 124

state 128

    (16) funcion -> FUNC ID f_startfunc ( params ) : tipo . f_tipofunc { vars estatutos } f_endfunc
    (20) f_tipofunc -> .

    {               reduce using rule 20 (f_tipofunc -> .)

    f_tipofunc                     shift and go to state 160

state 129

    (17) funcion -> FUNC ID f_startfunc ( params ) : NOTHING . f_nothing f_tipofunc { vars estatutos } f_endfunc
    (19) f_nothing -> .

    {               reduce using rule 19 (f_nothing -> .)

    f_nothing                      shift and go to state 161

state 130

    (46) pparams -> pparams , tipo ID . f_param
    (47) f_param -> .

    ,               reduce using rule 47 (f_param -> .)
    )               reduce using rule 47 (f_param -> .)

    f_param                        shift and go to state 162

state 131

    (35) dimension -> [ NUM f_dim1 ] [ NUM f_dim2 . ] f_twodim

    ]               shift and go to state 163


state 132

    (8) clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones . } f_endclass
    (14) funciones -> funciones . funcion
    (16) funcion -> . FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc
    (17) funcion -> . FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc

    }               shift and go to state 164
    FUNC            shift and go to state 19

    funcion                        shift and go to state 18

state 133

    (26) cvars -> cvars DEF tipo dimension : lista_id . ;
    (29) lista_id -> lista_id . , ID f_vars

    ;               shift and go to state 165
    ,               shift and go to state 57


state 134

    (73) var -> ID f_varobj : . ID f_verify_type_composite indexacion f_end_check

    ID              shift and go to state 166


state 135

    (74) var -> ID f_verify_type indexacion . f_end_check
    (79) f_end_check -> .

    =               reduce using rule 79 (f_end_check -> .)
    OPFACT          reduce using rule 79 (f_end_check -> .)
    OPTERM          reduce using rule 79 (f_end_check -> .)
    COMP            reduce using rule 79 (f_end_check -> .)
    TO              reduce using rule 79 (f_end_check -> .)
    )               reduce using rule 79 (f_end_check -> .)
    &               reduce using rule 79 (f_end_check -> .)
    ;               reduce using rule 79 (f_end_check -> .)
    ]               reduce using rule 79 (f_end_check -> .)
    ,               reduce using rule 79 (f_end_check -> .)
    {               reduce using rule 79 (f_end_check -> .)

    f_end_check                    shift and go to state 167

state 136

    (75) indexacion -> f_start_array . [ expresion f_index ] f_end_array
    (76) indexacion -> f_start_array . [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array

    [               shift and go to state 168


state 137

    (77) indexacion -> f_no_index . empty
    (134) empty -> .

    =               reduce using rule 134 (empty -> .)
    OPFACT          reduce using rule 134 (empty -> .)
    OPTERM          reduce using rule 134 (empty -> .)
    COMP            reduce using rule 134 (empty -> .)
    TO              reduce using rule 134 (empty -> .)
    )               reduce using rule 134 (empty -> .)
    &               reduce using rule 134 (empty -> .)
    ;               reduce using rule 134 (empty -> .)
    ]               reduce using rule 134 (empty -> .)
    ,               reduce using rule 134 (empty -> .)
    {               reduce using rule 134 (empty -> .)

    empty                          shift and go to state 169

state 138

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end . ;

    ;               shift and go to state 170


state 139

    (54) estatuto -> CALL call_func ; .

    }               reduce using rule 54 (estatuto -> CALL call_func ; .)
    CALL            reduce using rule 54 (estatuto -> CALL call_func ; .)
    WHILE           reduce using rule 54 (estatuto -> CALL call_func ; .)
    FOR             reduce using rule 54 (estatuto -> CALL call_func ; .)
    IF              reduce using rule 54 (estatuto -> CALL call_func ; .)
    ID              reduce using rule 54 (estatuto -> CALL call_func ; .)


state 140

    (55) call_func -> func f_end_call . f_end_check
    (79) f_end_check -> .

    ;               reduce using rule 79 (f_end_check -> .)

    f_end_check                    shift and go to state 171

state 141

    (62) func -> ID f_verify_func . ( args )

    (               shift and go to state 172


state 142

    (63) func -> ID f_varobj . : ID f_verify_func_composite ( args )

    :               shift and go to state 173


state 143

    (125) input -> INPUT ( . var )
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    ID              shift and go to state 78

    var                            shift and go to state 174

state 144

    (126) write -> PRINT ( . write_list )
    (127) write_list -> . write_list & write_listp
    (128) write_list -> . write_listp
    (129) write_listp -> . STR f_string
    (130) write_listp -> . var
    (131) write_listp -> . CALL to_str
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    STR             shift and go to state 177
    CALL            shift and go to state 179
    ID              shift and go to state 78

    write_list                     shift and go to state 175
    write_listp                    shift and go to state 176
    var                            shift and go to state 178

state 145

    (122) to_num -> TO_NUMBER ( . STR )
    (123) to_num -> TO_NUMBER ( . var )
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    STR             shift and go to state 180
    ID              shift and go to state 78

    var                            shift and go to state 181

state 146

    (124) to_str -> TO_STRING ( . expresion )
    (87) expresion -> . exp
    (88) expresion -> . expresion COMP f_oper exp f_expres
    (89) expresion -> . STR f_string_expr
    (92) exp -> . term
    (93) exp -> . exp OPTERM f_oper term f_exp
    (95) term -> . fact
    (96) term -> . term OPFACT f_oper fact f_term
    (99) fact -> . ( lparen expresion ) rparen
    (100) fact -> . var
    (101) fact -> . NUM f_fact
    (102) fact -> . OPTERM NUM
    (103) fact -> . CALL func f_return_val f_end_call f_end_check
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    STR             shift and go to state 119
    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    expresion                      shift and go to state 182
    exp                            shift and go to state 118
    term                           shift and go to state 120
    fact                           shift and go to state 122
    var                            shift and go to state 124

state 147

    (133) return -> RET ( . expresion )
    (87) expresion -> . exp
    (88) expresion -> . expresion COMP f_oper exp f_expres
    (89) expresion -> . STR f_string_expr
    (92) exp -> . term
    (93) exp -> . exp OPTERM f_oper term f_exp
    (95) term -> . fact
    (96) term -> . term OPFACT f_oper fact f_term
    (99) fact -> . ( lparen expresion ) rparen
    (100) fact -> . var
    (101) fact -> . NUM f_fact
    (102) fact -> . OPTERM NUM
    (103) fact -> . CALL func f_return_val f_end_call f_end_check
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    STR             shift and go to state 119
    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    expresion                      shift and go to state 183
    exp                            shift and go to state 118
    term                           shift and go to state 120
    fact                           shift and go to state 122
    var                            shift and go to state 124

state 148

    (72) asignacion -> var = f_oper . expresion ;
    (87) expresion -> . exp
    (88) expresion -> . expresion COMP f_oper exp f_expres
    (89) expresion -> . STR f_string_expr
    (92) exp -> . term
    (93) exp -> . exp OPTERM f_oper term f_exp
    (95) term -> . fact
    (96) term -> . term OPFACT f_oper fact f_term
    (99) fact -> . ( lparen expresion ) rparen
    (100) fact -> . var
    (101) fact -> . NUM f_fact
    (102) fact -> . OPTERM NUM
    (103) fact -> . CALL func f_return_val f_end_call f_end_check
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    STR             shift and go to state 119
    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    var                            shift and go to state 124
    expresion                      shift and go to state 184
    exp                            shift and go to state 118
    term                           shift and go to state 120
    fact                           shift and go to state 122

state 149

    (114) while -> WHILE f_while ( . expresion f_exprwhile ) DO { estatutos } f_endwhile
    (87) expresion -> . exp
    (88) expresion -> . expresion COMP f_oper exp f_expres
    (89) expresion -> . STR f_string_expr
    (92) exp -> . term
    (93) exp -> . exp OPTERM f_oper term f_exp
    (95) term -> . fact
    (96) term -> . term OPFACT f_oper fact f_term
    (99) fact -> . ( lparen expresion ) rparen
    (100) fact -> . var
    (101) fact -> . NUM f_fact
    (102) fact -> . OPTERM NUM
    (103) fact -> . CALL func f_return_val f_end_call f_end_check
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    STR             shift and go to state 119
    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    expresion                      shift and go to state 185
    exp                            shift and go to state 118
    term                           shift and go to state 120
    fact                           shift and go to state 122
    var                            shift and go to state 124

state 150

    (118) for -> FOR expresion f_for_start . TO expresion f_for_to { estatutos } f_for_end

    TO              shift and go to state 186


state 151

    (88) expresion -> expresion COMP . f_oper exp f_expres
    (98) f_oper -> .

    (               reduce using rule 98 (f_oper -> .)
    NUM             reduce using rule 98 (f_oper -> .)
    OPTERM          reduce using rule 98 (f_oper -> .)
    CALL            reduce using rule 98 (f_oper -> .)
    ID              reduce using rule 98 (f_oper -> .)

    f_oper                         shift and go to state 187

state 152

    (93) exp -> exp OPTERM . f_oper term f_exp
    (98) f_oper -> .

    (               reduce using rule 98 (f_oper -> .)
    NUM             reduce using rule 98 (f_oper -> .)
    OPTERM          reduce using rule 98 (f_oper -> .)
    CALL            reduce using rule 98 (f_oper -> .)
    ID              reduce using rule 98 (f_oper -> .)

    f_oper                         shift and go to state 188

state 153

    (89) expresion -> STR f_string_expr .

    COMP            reduce using rule 89 (expresion -> STR f_string_expr .)
    TO              reduce using rule 89 (expresion -> STR f_string_expr .)
    )               reduce using rule 89 (expresion -> STR f_string_expr .)
    ;               reduce using rule 89 (expresion -> STR f_string_expr .)
    ]               reduce using rule 89 (expresion -> STR f_string_expr .)
    ,               reduce using rule 89 (expresion -> STR f_string_expr .)
    {               reduce using rule 89 (expresion -> STR f_string_expr .)


state 154

    (96) term -> term OPFACT . f_oper fact f_term
    (98) f_oper -> .

    (               reduce using rule 98 (f_oper -> .)
    NUM             reduce using rule 98 (f_oper -> .)
    OPTERM          reduce using rule 98 (f_oper -> .)
    CALL            reduce using rule 98 (f_oper -> .)
    ID              reduce using rule 98 (f_oper -> .)

    f_oper                         shift and go to state 189

state 155

    (102) fact -> OPTERM NUM .

    OPFACT          reduce using rule 102 (fact -> OPTERM NUM .)
    OPTERM          reduce using rule 102 (fact -> OPTERM NUM .)
    COMP            reduce using rule 102 (fact -> OPTERM NUM .)
    TO              reduce using rule 102 (fact -> OPTERM NUM .)
    )               reduce using rule 102 (fact -> OPTERM NUM .)
    ;               reduce using rule 102 (fact -> OPTERM NUM .)
    ]               reduce using rule 102 (fact -> OPTERM NUM .)
    ,               reduce using rule 102 (fact -> OPTERM NUM .)
    {               reduce using rule 102 (fact -> OPTERM NUM .)


state 156

    (99) fact -> ( lparen . expresion ) rparen
    (87) expresion -> . exp
    (88) expresion -> . expresion COMP f_oper exp f_expres
    (89) expresion -> . STR f_string_expr
    (92) exp -> . term
    (93) exp -> . exp OPTERM f_oper term f_exp
    (95) term -> . fact
    (96) term -> . term OPFACT f_oper fact f_term
    (99) fact -> . ( lparen expresion ) rparen
    (100) fact -> . var
    (101) fact -> . NUM f_fact
    (102) fact -> . OPTERM NUM
    (103) fact -> . CALL func f_return_val f_end_call f_end_check
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    STR             shift and go to state 119
    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    expresion                      shift and go to state 190
    exp                            shift and go to state 118
    term                           shift and go to state 120
    fact                           shift and go to state 122
    var                            shift and go to state 124

state 157

    (101) fact -> NUM f_fact .

    OPFACT          reduce using rule 101 (fact -> NUM f_fact .)
    OPTERM          reduce using rule 101 (fact -> NUM f_fact .)
    COMP            reduce using rule 101 (fact -> NUM f_fact .)
    TO              reduce using rule 101 (fact -> NUM f_fact .)
    )               reduce using rule 101 (fact -> NUM f_fact .)
    ;               reduce using rule 101 (fact -> NUM f_fact .)
    ]               reduce using rule 101 (fact -> NUM f_fact .)
    ,               reduce using rule 101 (fact -> NUM f_fact .)
    {               reduce using rule 101 (fact -> NUM f_fact .)


state 158

    (103) fact -> CALL func . f_return_val f_end_call f_end_check
    (104) f_return_val -> .

    OPFACT          reduce using rule 104 (f_return_val -> .)
    OPTERM          reduce using rule 104 (f_return_val -> .)
    COMP            reduce using rule 104 (f_return_val -> .)
    TO              reduce using rule 104 (f_return_val -> .)
    )               reduce using rule 104 (f_return_val -> .)
    ;               reduce using rule 104 (f_return_val -> .)
    ]               reduce using rule 104 (f_return_val -> .)
    ,               reduce using rule 104 (f_return_val -> .)
    {               reduce using rule 104 (f_return_val -> .)

    f_return_val                   shift and go to state 191

state 159

    (108) condicion -> IF ( expresion . ) f_if THEN { estatutos } condicionp f_endif
    (88) expresion -> expresion . COMP f_oper exp f_expres

    )               shift and go to state 192
    COMP            shift and go to state 151


state 160

    (16) funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc . { vars estatutos } f_endfunc

    {               shift and go to state 193


state 161

    (17) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing . f_tipofunc { vars estatutos } f_endfunc
    (20) f_tipofunc -> .

    {               reduce using rule 20 (f_tipofunc -> .)

    f_tipofunc                     shift and go to state 194

state 162

    (46) pparams -> pparams , tipo ID f_param .

    ,               reduce using rule 46 (pparams -> pparams , tipo ID f_param .)
    )               reduce using rule 46 (pparams -> pparams , tipo ID f_param .)


state 163

    (35) dimension -> [ NUM f_dim1 ] [ NUM f_dim2 ] . f_twodim
    (40) f_twodim -> .

    :               reduce using rule 40 (f_twodim -> .)

    f_twodim                       shift and go to state 195

state 164

    (8) clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } . f_endclass
    (13) f_endclass -> .

    TYPE            reduce using rule 13 (f_endclass -> .)
    DEF             reduce using rule 13 (f_endclass -> .)
    MAIN            reduce using rule 13 (f_endclass -> .)
    FUNC            reduce using rule 13 (f_endclass -> .)

    f_endclass                     shift and go to state 196

state 165

    (26) cvars -> cvars DEF tipo dimension : lista_id ; .

    DEF             reduce using rule 26 (cvars -> cvars DEF tipo dimension : lista_id ; .)
    }               reduce using rule 26 (cvars -> cvars DEF tipo dimension : lista_id ; .)
    FUNC            reduce using rule 26 (cvars -> cvars DEF tipo dimension : lista_id ; .)


state 166

    (73) var -> ID f_varobj : ID . f_verify_type_composite indexacion f_end_check
    (81) f_verify_type_composite -> .

    [               reduce using rule 81 (f_verify_type_composite -> .)
    =               reduce using rule 81 (f_verify_type_composite -> .)
    OPFACT          reduce using rule 81 (f_verify_type_composite -> .)
    OPTERM          reduce using rule 81 (f_verify_type_composite -> .)
    COMP            reduce using rule 81 (f_verify_type_composite -> .)
    TO              reduce using rule 81 (f_verify_type_composite -> .)
    )               reduce using rule 81 (f_verify_type_composite -> .)
    &               reduce using rule 81 (f_verify_type_composite -> .)
    ;               reduce using rule 81 (f_verify_type_composite -> .)
    ]               reduce using rule 81 (f_verify_type_composite -> .)
    ,               reduce using rule 81 (f_verify_type_composite -> .)
    {               reduce using rule 81 (f_verify_type_composite -> .)

    f_verify_type_composite        shift and go to state 197

state 167

    (74) var -> ID f_verify_type indexacion f_end_check .

    =               reduce using rule 74 (var -> ID f_verify_type indexacion f_end_check .)
    OPFACT          reduce using rule 74 (var -> ID f_verify_type indexacion f_end_check .)
    OPTERM          reduce using rule 74 (var -> ID f_verify_type indexacion f_end_check .)
    COMP            reduce using rule 74 (var -> ID f_verify_type indexacion f_end_check .)
    TO              reduce using rule 74 (var -> ID f_verify_type indexacion f_end_check .)
    )               reduce using rule 74 (var -> ID f_verify_type indexacion f_end_check .)
    &               reduce using rule 74 (var -> ID f_verify_type indexacion f_end_check .)
    ;               reduce using rule 74 (var -> ID f_verify_type indexacion f_end_check .)
    ]               reduce using rule 74 (var -> ID f_verify_type indexacion f_end_check .)
    ,               reduce using rule 74 (var -> ID f_verify_type indexacion f_end_check .)
    {               reduce using rule 74 (var -> ID f_verify_type indexacion f_end_check .)


state 168

    (75) indexacion -> f_start_array [ . expresion f_index ] f_end_array
    (76) indexacion -> f_start_array [ . expresion f_index ] [ f_next_index expresion f_index ] f_end_array
    (87) expresion -> . exp
    (88) expresion -> . expresion COMP f_oper exp f_expres
    (89) expresion -> . STR f_string_expr
    (92) exp -> . term
    (93) exp -> . exp OPTERM f_oper term f_exp
    (95) term -> . fact
    (96) term -> . term OPFACT f_oper fact f_term
    (99) fact -> . ( lparen expresion ) rparen
    (100) fact -> . var
    (101) fact -> . NUM f_fact
    (102) fact -> . OPTERM NUM
    (103) fact -> . CALL func f_return_val f_end_call f_end_check
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    STR             shift and go to state 119
    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    expresion                      shift and go to state 198
    exp                            shift and go to state 118
    term                           shift and go to state 120
    fact                           shift and go to state 122
    var                            shift and go to state 124

state 169

    (77) indexacion -> f_no_index empty .

    =               reduce using rule 77 (indexacion -> f_no_index empty .)
    OPFACT          reduce using rule 77 (indexacion -> f_no_index empty .)
    OPTERM          reduce using rule 77 (indexacion -> f_no_index empty .)
    COMP            reduce using rule 77 (indexacion -> f_no_index empty .)
    TO              reduce using rule 77 (indexacion -> f_no_index empty .)
    )               reduce using rule 77 (indexacion -> f_no_index empty .)
    &               reduce using rule 77 (indexacion -> f_no_index empty .)
    ;               reduce using rule 77 (indexacion -> f_no_index empty .)
    ]               reduce using rule 77 (indexacion -> f_no_index empty .)
    ,               reduce using rule 77 (indexacion -> f_no_index empty .)
    {               reduce using rule 77 (indexacion -> f_no_index empty .)


state 170

    (1) start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ; .

    $end            reduce using rule 1 (start -> PROGRAM f_start ID f_prog ; clases vars funciones MAIN f_main ( ) { estatutos } END f_end ; .)


state 171

    (55) call_func -> func f_end_call f_end_check .

    ;               reduce using rule 55 (call_func -> func f_end_call f_end_check .)


state 172

    (62) func -> ID f_verify_func ( . args )
    (66) args -> . args_list f_end_args
    (67) args -> . f_end_args
    (68) args_list -> . expresion f_arg
    (69) args_list -> . args_list , expresion f_arg
    (71) f_end_args -> .
    (87) expresion -> . exp
    (88) expresion -> . expresion COMP f_oper exp f_expres
    (89) expresion -> . STR f_string_expr
    (92) exp -> . term
    (93) exp -> . exp OPTERM f_oper term f_exp
    (95) term -> . fact
    (96) term -> . term OPFACT f_oper fact f_term
    (99) fact -> . ( lparen expresion ) rparen
    (100) fact -> . var
    (101) fact -> . NUM f_fact
    (102) fact -> . OPTERM NUM
    (103) fact -> . CALL func f_return_val f_end_call f_end_check
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    )               reduce using rule 71 (f_end_args -> .)
    STR             shift and go to state 119
    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    args                           shift and go to state 199
    args_list                      shift and go to state 200
    f_end_args                     shift and go to state 201
    expresion                      shift and go to state 202
    exp                            shift and go to state 118
    term                           shift and go to state 120
    fact                           shift and go to state 122
    var                            shift and go to state 124

state 173

    (63) func -> ID f_varobj : . ID f_verify_func_composite ( args )

    ID              shift and go to state 203


state 174

    (125) input -> INPUT ( var . )

    )               shift and go to state 204


state 175

    (126) write -> PRINT ( write_list . )
    (127) write_list -> write_list . & write_listp

    )               shift and go to state 205
    &               shift and go to state 206


state 176

    (128) write_list -> write_listp .

    )               reduce using rule 128 (write_list -> write_listp .)
    &               reduce using rule 128 (write_list -> write_listp .)


state 177

    (129) write_listp -> STR . f_string
    (132) f_string -> .

    )               reduce using rule 132 (f_string -> .)
    &               reduce using rule 132 (f_string -> .)

    f_string                       shift and go to state 207

state 178

    (130) write_listp -> var .

    )               reduce using rule 130 (write_listp -> var .)
    &               reduce using rule 130 (write_listp -> var .)


state 179

    (131) write_listp -> CALL . to_str
    (124) to_str -> . TO_STRING ( expresion )

    TO_STRING       shift and go to state 113

    to_str                         shift and go to state 208

state 180

    (122) to_num -> TO_NUMBER ( STR . )

    )               shift and go to state 209


state 181

    (123) to_num -> TO_NUMBER ( var . )

    )               shift and go to state 210


state 182

    (124) to_str -> TO_STRING ( expresion . )
    (88) expresion -> expresion . COMP f_oper exp f_expres

    )               shift and go to state 211
    COMP            shift and go to state 151


state 183

    (133) return -> RET ( expresion . )
    (88) expresion -> expresion . COMP f_oper exp f_expres

    )               shift and go to state 212
    COMP            shift and go to state 151


state 184

    (72) asignacion -> var = f_oper expresion . ;
    (88) expresion -> expresion . COMP f_oper exp f_expres

    ;               shift and go to state 213
    COMP            shift and go to state 151


state 185

    (114) while -> WHILE f_while ( expresion . f_exprwhile ) DO { estatutos } f_endwhile
    (88) expresion -> expresion . COMP f_oper exp f_expres
    (116) f_exprwhile -> .

    COMP            shift and go to state 151
    )               reduce using rule 116 (f_exprwhile -> .)

    f_exprwhile                    shift and go to state 214

state 186

    (118) for -> FOR expresion f_for_start TO . expresion f_for_to { estatutos } f_for_end
    (87) expresion -> . exp
    (88) expresion -> . expresion COMP f_oper exp f_expres
    (89) expresion -> . STR f_string_expr
    (92) exp -> . term
    (93) exp -> . exp OPTERM f_oper term f_exp
    (95) term -> . fact
    (96) term -> . term OPFACT f_oper fact f_term
    (99) fact -> . ( lparen expresion ) rparen
    (100) fact -> . var
    (101) fact -> . NUM f_fact
    (102) fact -> . OPTERM NUM
    (103) fact -> . CALL func f_return_val f_end_call f_end_check
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    STR             shift and go to state 119
    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    expresion                      shift and go to state 215
    exp                            shift and go to state 118
    term                           shift and go to state 120
    fact                           shift and go to state 122
    var                            shift and go to state 124

state 187

    (88) expresion -> expresion COMP f_oper . exp f_expres
    (92) exp -> . term
    (93) exp -> . exp OPTERM f_oper term f_exp
    (95) term -> . fact
    (96) term -> . term OPFACT f_oper fact f_term
    (99) fact -> . ( lparen expresion ) rparen
    (100) fact -> . var
    (101) fact -> . NUM f_fact
    (102) fact -> . OPTERM NUM
    (103) fact -> . CALL func f_return_val f_end_call f_end_check
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    exp                            shift and go to state 216
    term                           shift and go to state 120
    fact                           shift and go to state 122
    var                            shift and go to state 124

state 188

    (93) exp -> exp OPTERM f_oper . term f_exp
    (95) term -> . fact
    (96) term -> . term OPFACT f_oper fact f_term
    (99) fact -> . ( lparen expresion ) rparen
    (100) fact -> . var
    (101) fact -> . NUM f_fact
    (102) fact -> . OPTERM NUM
    (103) fact -> . CALL func f_return_val f_end_call f_end_check
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    term                           shift and go to state 217
    fact                           shift and go to state 122
    var                            shift and go to state 124

state 189

    (96) term -> term OPFACT f_oper . fact f_term
    (99) fact -> . ( lparen expresion ) rparen
    (100) fact -> . var
    (101) fact -> . NUM f_fact
    (102) fact -> . OPTERM NUM
    (103) fact -> . CALL func f_return_val f_end_call f_end_check
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    fact                           shift and go to state 218
    var                            shift and go to state 124

state 190

    (99) fact -> ( lparen expresion . ) rparen
    (88) expresion -> expresion . COMP f_oper exp f_expres

    )               shift and go to state 219
    COMP            shift and go to state 151


state 191

    (103) fact -> CALL func f_return_val . f_end_call f_end_check
    (61) f_end_call -> .

    OPFACT          reduce using rule 61 (f_end_call -> .)
    OPTERM          reduce using rule 61 (f_end_call -> .)
    COMP            reduce using rule 61 (f_end_call -> .)
    TO              reduce using rule 61 (f_end_call -> .)
    )               reduce using rule 61 (f_end_call -> .)
    ;               reduce using rule 61 (f_end_call -> .)
    ]               reduce using rule 61 (f_end_call -> .)
    ,               reduce using rule 61 (f_end_call -> .)
    {               reduce using rule 61 (f_end_call -> .)

    f_end_call                     shift and go to state 220

state 192

    (108) condicion -> IF ( expresion ) . f_if THEN { estatutos } condicionp f_endif
    (111) f_if -> .

    THEN            reduce using rule 111 (f_if -> .)

    f_if                           shift and go to state 221

state 193

    (16) funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { . vars estatutos } f_endfunc
    (22) vars -> . vars DEF tipo dimension : lista_id ;
    (23) vars -> . vars DEF ID f_varsobj : lista_id_obj ;
    (24) vars -> . empty
    (134) empty -> .

    DEF             reduce using rule 134 (empty -> .)
    }               reduce using rule 134 (empty -> .)
    CALL            reduce using rule 134 (empty -> .)
    WHILE           reduce using rule 134 (empty -> .)
    FOR             reduce using rule 134 (empty -> .)
    IF              reduce using rule 134 (empty -> .)
    ID              reduce using rule 134 (empty -> .)

    vars                           shift and go to state 222
    empty                          shift and go to state 11

state 194

    (17) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc . { vars estatutos } f_endfunc

    {               shift and go to state 223


state 195

    (35) dimension -> [ NUM f_dim1 ] [ NUM f_dim2 ] f_twodim .

    :               reduce using rule 35 (dimension -> [ NUM f_dim1 ] [ NUM f_dim2 ] f_twodim .)


state 196

    (8) clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass .

    TYPE            reduce using rule 8 (clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass .)
    DEF             reduce using rule 8 (clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass .)
    MAIN            reduce using rule 8 (clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass .)
    FUNC            reduce using rule 8 (clase -> TYPE ID f_startclass : ID f_clasepadre { cvars f_cvars funciones } f_endclass .)


state 197

    (73) var -> ID f_varobj : ID f_verify_type_composite . indexacion f_end_check
    (75) indexacion -> . f_start_array [ expresion f_index ] f_end_array
    (76) indexacion -> . f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array
    (77) indexacion -> . f_no_index empty
    (83) f_start_array -> .
    (82) f_no_index -> .

    [               reduce using rule 83 (f_start_array -> .)
    =               reduce using rule 82 (f_no_index -> .)
    OPFACT          reduce using rule 82 (f_no_index -> .)
    OPTERM          reduce using rule 82 (f_no_index -> .)
    COMP            reduce using rule 82 (f_no_index -> .)
    TO              reduce using rule 82 (f_no_index -> .)
    )               reduce using rule 82 (f_no_index -> .)
    &               reduce using rule 82 (f_no_index -> .)
    ;               reduce using rule 82 (f_no_index -> .)
    ]               reduce using rule 82 (f_no_index -> .)
    ,               reduce using rule 82 (f_no_index -> .)
    {               reduce using rule 82 (f_no_index -> .)

    indexacion                     shift and go to state 224
    f_start_array                  shift and go to state 136
    f_no_index                     shift and go to state 137

state 198

    (75) indexacion -> f_start_array [ expresion . f_index ] f_end_array
    (76) indexacion -> f_start_array [ expresion . f_index ] [ f_next_index expresion f_index ] f_end_array
    (88) expresion -> expresion . COMP f_oper exp f_expres
    (84) f_index -> .

    COMP            shift and go to state 151
    ]               reduce using rule 84 (f_index -> .)

    f_index                        shift and go to state 225

state 199

    (62) func -> ID f_verify_func ( args . )

    )               shift and go to state 226


state 200

    (66) args -> args_list . f_end_args
    (69) args_list -> args_list . , expresion f_arg
    (71) f_end_args -> .

    ,               shift and go to state 228
    )               reduce using rule 71 (f_end_args -> .)

    f_end_args                     shift and go to state 227

state 201

    (67) args -> f_end_args .

    )               reduce using rule 67 (args -> f_end_args .)


state 202

    (68) args_list -> expresion . f_arg
    (88) expresion -> expresion . COMP f_oper exp f_expres
    (70) f_arg -> .

    COMP            shift and go to state 151
    ,               reduce using rule 70 (f_arg -> .)
    )               reduce using rule 70 (f_arg -> .)

    f_arg                          shift and go to state 229

state 203

    (63) func -> ID f_varobj : ID . f_verify_func_composite ( args )
    (65) f_verify_func_composite -> .

    (               reduce using rule 65 (f_verify_func_composite -> .)

    f_verify_func_composite        shift and go to state 230

state 204

    (125) input -> INPUT ( var ) .

    ;               reduce using rule 125 (input -> INPUT ( var ) .)


state 205

    (126) write -> PRINT ( write_list ) .

    ;               reduce using rule 126 (write -> PRINT ( write_list ) .)


state 206

    (127) write_list -> write_list & . write_listp
    (129) write_listp -> . STR f_string
    (130) write_listp -> . var
    (131) write_listp -> . CALL to_str
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    STR             shift and go to state 177
    CALL            shift and go to state 179
    ID              shift and go to state 78

    write_listp                    shift and go to state 231
    var                            shift and go to state 178

state 207

    (129) write_listp -> STR f_string .

    )               reduce using rule 129 (write_listp -> STR f_string .)
    &               reduce using rule 129 (write_listp -> STR f_string .)


state 208

    (131) write_listp -> CALL to_str .

    )               reduce using rule 131 (write_listp -> CALL to_str .)
    &               reduce using rule 131 (write_listp -> CALL to_str .)


state 209

    (122) to_num -> TO_NUMBER ( STR ) .

    ;               reduce using rule 122 (to_num -> TO_NUMBER ( STR ) .)


state 210

    (123) to_num -> TO_NUMBER ( var ) .

    ;               reduce using rule 123 (to_num -> TO_NUMBER ( var ) .)


state 211

    (124) to_str -> TO_STRING ( expresion ) .

    ;               reduce using rule 124 (to_str -> TO_STRING ( expresion ) .)
    )               reduce using rule 124 (to_str -> TO_STRING ( expresion ) .)
    &               reduce using rule 124 (to_str -> TO_STRING ( expresion ) .)


state 212

    (133) return -> RET ( expresion ) .

    ;               reduce using rule 133 (return -> RET ( expresion ) .)


state 213

    (72) asignacion -> var = f_oper expresion ; .

    }               reduce using rule 72 (asignacion -> var = f_oper expresion ; .)
    CALL            reduce using rule 72 (asignacion -> var = f_oper expresion ; .)
    WHILE           reduce using rule 72 (asignacion -> var = f_oper expresion ; .)
    FOR             reduce using rule 72 (asignacion -> var = f_oper expresion ; .)
    IF              reduce using rule 72 (asignacion -> var = f_oper expresion ; .)
    ID              reduce using rule 72 (asignacion -> var = f_oper expresion ; .)


state 214

    (114) while -> WHILE f_while ( expresion f_exprwhile . ) DO { estatutos } f_endwhile

    )               shift and go to state 232


state 215

    (118) for -> FOR expresion f_for_start TO expresion . f_for_to { estatutos } f_for_end
    (88) expresion -> expresion . COMP f_oper exp f_expres
    (120) f_for_to -> .

    COMP            shift and go to state 151
    {               reduce using rule 120 (f_for_to -> .)

    f_for_to                       shift and go to state 233

state 216

    (88) expresion -> expresion COMP f_oper exp . f_expres
    (93) exp -> exp . OPTERM f_oper term f_exp
    (91) f_expres -> .

    OPTERM          shift and go to state 152
    COMP            reduce using rule 91 (f_expres -> .)
    TO              reduce using rule 91 (f_expres -> .)
    )               reduce using rule 91 (f_expres -> .)
    ;               reduce using rule 91 (f_expres -> .)
    ]               reduce using rule 91 (f_expres -> .)
    ,               reduce using rule 91 (f_expres -> .)
    {               reduce using rule 91 (f_expres -> .)

    f_expres                       shift and go to state 234

state 217

    (93) exp -> exp OPTERM f_oper term . f_exp
    (96) term -> term . OPFACT f_oper fact f_term
    (94) f_exp -> .

    OPFACT          shift and go to state 154
    OPTERM          reduce using rule 94 (f_exp -> .)
    COMP            reduce using rule 94 (f_exp -> .)
    TO              reduce using rule 94 (f_exp -> .)
    )               reduce using rule 94 (f_exp -> .)
    ;               reduce using rule 94 (f_exp -> .)
    ]               reduce using rule 94 (f_exp -> .)
    ,               reduce using rule 94 (f_exp -> .)
    {               reduce using rule 94 (f_exp -> .)

    f_exp                          shift and go to state 235

state 218

    (96) term -> term OPFACT f_oper fact . f_term
    (97) f_term -> .

    OPFACT          reduce using rule 97 (f_term -> .)
    OPTERM          reduce using rule 97 (f_term -> .)
    COMP            reduce using rule 97 (f_term -> .)
    TO              reduce using rule 97 (f_term -> .)
    )               reduce using rule 97 (f_term -> .)
    ;               reduce using rule 97 (f_term -> .)
    ]               reduce using rule 97 (f_term -> .)
    ,               reduce using rule 97 (f_term -> .)
    {               reduce using rule 97 (f_term -> .)

    f_term                         shift and go to state 236

state 219

    (99) fact -> ( lparen expresion ) . rparen
    (106) rparen -> .

    OPFACT          reduce using rule 106 (rparen -> .)
    OPTERM          reduce using rule 106 (rparen -> .)
    COMP            reduce using rule 106 (rparen -> .)
    TO              reduce using rule 106 (rparen -> .)
    )               reduce using rule 106 (rparen -> .)
    ;               reduce using rule 106 (rparen -> .)
    ]               reduce using rule 106 (rparen -> .)
    ,               reduce using rule 106 (rparen -> .)
    {               reduce using rule 106 (rparen -> .)

    rparen                         shift and go to state 237

state 220

    (103) fact -> CALL func f_return_val f_end_call . f_end_check
    (79) f_end_check -> .

    OPFACT          reduce using rule 79 (f_end_check -> .)
    OPTERM          reduce using rule 79 (f_end_check -> .)
    COMP            reduce using rule 79 (f_end_check -> .)
    TO              reduce using rule 79 (f_end_check -> .)
    )               reduce using rule 79 (f_end_check -> .)
    ;               reduce using rule 79 (f_end_check -> .)
    ]               reduce using rule 79 (f_end_check -> .)
    ,               reduce using rule 79 (f_end_check -> .)
    {               reduce using rule 79 (f_end_check -> .)

    f_end_check                    shift and go to state 238

state 221

    (108) condicion -> IF ( expresion ) f_if . THEN { estatutos } condicionp f_endif

    THEN            shift and go to state 239


state 222

    (16) funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars . estatutos } f_endfunc
    (22) vars -> vars . DEF tipo dimension : lista_id ;
    (23) vars -> vars . DEF ID f_varsobj : lista_id_obj ;
    (48) estatutos -> . estatutos estatuto
    (49) estatutos -> . empty
    (134) empty -> .

    DEF             shift and go to state 14
    }               reduce using rule 134 (empty -> .)
    CALL            reduce using rule 134 (empty -> .)
    WHILE           reduce using rule 134 (empty -> .)
    FOR             reduce using rule 134 (empty -> .)
    IF              reduce using rule 134 (empty -> .)
    ID              reduce using rule 134 (empty -> .)

    estatutos                      shift and go to state 240
    empty                          shift and go to state 67

state 223

    (17) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { . vars estatutos } f_endfunc
    (22) vars -> . vars DEF tipo dimension : lista_id ;
    (23) vars -> . vars DEF ID f_varsobj : lista_id_obj ;
    (24) vars -> . empty
    (134) empty -> .

    DEF             reduce using rule 134 (empty -> .)
    }               reduce using rule 134 (empty -> .)
    CALL            reduce using rule 134 (empty -> .)
    WHILE           reduce using rule 134 (empty -> .)
    FOR             reduce using rule 134 (empty -> .)
    IF              reduce using rule 134 (empty -> .)
    ID              reduce using rule 134 (empty -> .)

    vars                           shift and go to state 241
    empty                          shift and go to state 11

state 224

    (73) var -> ID f_varobj : ID f_verify_type_composite indexacion . f_end_check
    (79) f_end_check -> .

    =               reduce using rule 79 (f_end_check -> .)
    OPFACT          reduce using rule 79 (f_end_check -> .)
    OPTERM          reduce using rule 79 (f_end_check -> .)
    COMP            reduce using rule 79 (f_end_check -> .)
    TO              reduce using rule 79 (f_end_check -> .)
    )               reduce using rule 79 (f_end_check -> .)
    &               reduce using rule 79 (f_end_check -> .)
    ;               reduce using rule 79 (f_end_check -> .)
    ]               reduce using rule 79 (f_end_check -> .)
    ,               reduce using rule 79 (f_end_check -> .)
    {               reduce using rule 79 (f_end_check -> .)

    f_end_check                    shift and go to state 242

state 225

    (75) indexacion -> f_start_array [ expresion f_index . ] f_end_array
    (76) indexacion -> f_start_array [ expresion f_index . ] [ f_next_index expresion f_index ] f_end_array

    ]               shift and go to state 243


state 226

    (62) func -> ID f_verify_func ( args ) .

    ;               reduce using rule 62 (func -> ID f_verify_func ( args ) .)
    OPFACT          reduce using rule 62 (func -> ID f_verify_func ( args ) .)
    OPTERM          reduce using rule 62 (func -> ID f_verify_func ( args ) .)
    COMP            reduce using rule 62 (func -> ID f_verify_func ( args ) .)
    TO              reduce using rule 62 (func -> ID f_verify_func ( args ) .)
    )               reduce using rule 62 (func -> ID f_verify_func ( args ) .)
    ]               reduce using rule 62 (func -> ID f_verify_func ( args ) .)
    ,               reduce using rule 62 (func -> ID f_verify_func ( args ) .)
    {               reduce using rule 62 (func -> ID f_verify_func ( args ) .)


state 227

    (66) args -> args_list f_end_args .

    )               reduce using rule 66 (args -> args_list f_end_args .)


state 228

    (69) args_list -> args_list , . expresion f_arg
    (87) expresion -> . exp
    (88) expresion -> . expresion COMP f_oper exp f_expres
    (89) expresion -> . STR f_string_expr
    (92) exp -> . term
    (93) exp -> . exp OPTERM f_oper term f_exp
    (95) term -> . fact
    (96) term -> . term OPFACT f_oper fact f_term
    (99) fact -> . ( lparen expresion ) rparen
    (100) fact -> . var
    (101) fact -> . NUM f_fact
    (102) fact -> . OPTERM NUM
    (103) fact -> . CALL func f_return_val f_end_call f_end_check
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    STR             shift and go to state 119
    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    expresion                      shift and go to state 244
    exp                            shift and go to state 118
    term                           shift and go to state 120
    fact                           shift and go to state 122
    var                            shift and go to state 124

state 229

    (68) args_list -> expresion f_arg .

    ,               reduce using rule 68 (args_list -> expresion f_arg .)
    )               reduce using rule 68 (args_list -> expresion f_arg .)


state 230

    (63) func -> ID f_varobj : ID f_verify_func_composite . ( args )

    (               shift and go to state 245


state 231

    (127) write_list -> write_list & write_listp .

    )               reduce using rule 127 (write_list -> write_list & write_listp .)
    &               reduce using rule 127 (write_list -> write_list & write_listp .)


state 232

    (114) while -> WHILE f_while ( expresion f_exprwhile ) . DO { estatutos } f_endwhile

    DO              shift and go to state 246


state 233

    (118) for -> FOR expresion f_for_start TO expresion f_for_to . { estatutos } f_for_end

    {               shift and go to state 247


state 234

    (88) expresion -> expresion COMP f_oper exp f_expres .

    COMP            reduce using rule 88 (expresion -> expresion COMP f_oper exp f_expres .)
    TO              reduce using rule 88 (expresion -> expresion COMP f_oper exp f_expres .)
    )               reduce using rule 88 (expresion -> expresion COMP f_oper exp f_expres .)
    ;               reduce using rule 88 (expresion -> expresion COMP f_oper exp f_expres .)
    ]               reduce using rule 88 (expresion -> expresion COMP f_oper exp f_expres .)
    ,               reduce using rule 88 (expresion -> expresion COMP f_oper exp f_expres .)
    {               reduce using rule 88 (expresion -> expresion COMP f_oper exp f_expres .)


state 235

    (93) exp -> exp OPTERM f_oper term f_exp .

    OPTERM          reduce using rule 93 (exp -> exp OPTERM f_oper term f_exp .)
    COMP            reduce using rule 93 (exp -> exp OPTERM f_oper term f_exp .)
    TO              reduce using rule 93 (exp -> exp OPTERM f_oper term f_exp .)
    )               reduce using rule 93 (exp -> exp OPTERM f_oper term f_exp .)
    ;               reduce using rule 93 (exp -> exp OPTERM f_oper term f_exp .)
    ]               reduce using rule 93 (exp -> exp OPTERM f_oper term f_exp .)
    ,               reduce using rule 93 (exp -> exp OPTERM f_oper term f_exp .)
    {               reduce using rule 93 (exp -> exp OPTERM f_oper term f_exp .)


state 236

    (96) term -> term OPFACT f_oper fact f_term .

    OPFACT          reduce using rule 96 (term -> term OPFACT f_oper fact f_term .)
    OPTERM          reduce using rule 96 (term -> term OPFACT f_oper fact f_term .)
    COMP            reduce using rule 96 (term -> term OPFACT f_oper fact f_term .)
    TO              reduce using rule 96 (term -> term OPFACT f_oper fact f_term .)
    )               reduce using rule 96 (term -> term OPFACT f_oper fact f_term .)
    ;               reduce using rule 96 (term -> term OPFACT f_oper fact f_term .)
    ]               reduce using rule 96 (term -> term OPFACT f_oper fact f_term .)
    ,               reduce using rule 96 (term -> term OPFACT f_oper fact f_term .)
    {               reduce using rule 96 (term -> term OPFACT f_oper fact f_term .)


state 237

    (99) fact -> ( lparen expresion ) rparen .

    OPFACT          reduce using rule 99 (fact -> ( lparen expresion ) rparen .)
    OPTERM          reduce using rule 99 (fact -> ( lparen expresion ) rparen .)
    COMP            reduce using rule 99 (fact -> ( lparen expresion ) rparen .)
    TO              reduce using rule 99 (fact -> ( lparen expresion ) rparen .)
    )               reduce using rule 99 (fact -> ( lparen expresion ) rparen .)
    ;               reduce using rule 99 (fact -> ( lparen expresion ) rparen .)
    ]               reduce using rule 99 (fact -> ( lparen expresion ) rparen .)
    ,               reduce using rule 99 (fact -> ( lparen expresion ) rparen .)
    {               reduce using rule 99 (fact -> ( lparen expresion ) rparen .)


state 238

    (103) fact -> CALL func f_return_val f_end_call f_end_check .

    OPFACT          reduce using rule 103 (fact -> CALL func f_return_val f_end_call f_end_check .)
    OPTERM          reduce using rule 103 (fact -> CALL func f_return_val f_end_call f_end_check .)
    COMP            reduce using rule 103 (fact -> CALL func f_return_val f_end_call f_end_check .)
    TO              reduce using rule 103 (fact -> CALL func f_return_val f_end_call f_end_check .)
    )               reduce using rule 103 (fact -> CALL func f_return_val f_end_call f_end_check .)
    ;               reduce using rule 103 (fact -> CALL func f_return_val f_end_call f_end_check .)
    ]               reduce using rule 103 (fact -> CALL func f_return_val f_end_call f_end_check .)
    ,               reduce using rule 103 (fact -> CALL func f_return_val f_end_call f_end_check .)
    {               reduce using rule 103 (fact -> CALL func f_return_val f_end_call f_end_check .)


state 239

    (108) condicion -> IF ( expresion ) f_if THEN . { estatutos } condicionp f_endif

    {               shift and go to state 248


state 240

    (16) funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos . } f_endfunc
    (48) estatutos -> estatutos . estatuto
    (50) estatuto -> . asignacion
    (51) estatuto -> . while
    (52) estatuto -> . for
    (53) estatuto -> . condicion
    (54) estatuto -> . CALL call_func ;
    (72) asignacion -> . var = f_oper expresion ;
    (114) while -> . WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (118) for -> . FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (108) condicion -> . IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    }               shift and go to state 249
    CALL            shift and go to state 85
    WHILE           shift and go to state 87
    FOR             shift and go to state 88
    IF              shift and go to state 89
    ID              shift and go to state 78

    estatuto                       shift and go to state 80
    asignacion                     shift and go to state 81
    while                          shift and go to state 82
    for                            shift and go to state 83
    condicion                      shift and go to state 84
    var                            shift and go to state 86

state 241

    (17) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars . estatutos } f_endfunc
    (22) vars -> vars . DEF tipo dimension : lista_id ;
    (23) vars -> vars . DEF ID f_varsobj : lista_id_obj ;
    (48) estatutos -> . estatutos estatuto
    (49) estatutos -> . empty
    (134) empty -> .

    DEF             shift and go to state 14
    }               reduce using rule 134 (empty -> .)
    CALL            reduce using rule 134 (empty -> .)
    WHILE           reduce using rule 134 (empty -> .)
    FOR             reduce using rule 134 (empty -> .)
    IF              reduce using rule 134 (empty -> .)
    ID              reduce using rule 134 (empty -> .)

    estatutos                      shift and go to state 250
    empty                          shift and go to state 67

state 242

    (73) var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .

    =               reduce using rule 73 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)
    OPFACT          reduce using rule 73 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)
    OPTERM          reduce using rule 73 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)
    COMP            reduce using rule 73 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)
    TO              reduce using rule 73 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)
    )               reduce using rule 73 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)
    &               reduce using rule 73 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)
    ;               reduce using rule 73 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)
    ]               reduce using rule 73 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)
    ,               reduce using rule 73 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)
    {               reduce using rule 73 (var -> ID f_varobj : ID f_verify_type_composite indexacion f_end_check .)


state 243

    (75) indexacion -> f_start_array [ expresion f_index ] . f_end_array
    (76) indexacion -> f_start_array [ expresion f_index ] . [ f_next_index expresion f_index ] f_end_array
    (86) f_end_array -> .

    [               shift and go to state 251
    =               reduce using rule 86 (f_end_array -> .)
    OPFACT          reduce using rule 86 (f_end_array -> .)
    OPTERM          reduce using rule 86 (f_end_array -> .)
    COMP            reduce using rule 86 (f_end_array -> .)
    TO              reduce using rule 86 (f_end_array -> .)
    )               reduce using rule 86 (f_end_array -> .)
    &               reduce using rule 86 (f_end_array -> .)
    ;               reduce using rule 86 (f_end_array -> .)
    ]               reduce using rule 86 (f_end_array -> .)
    ,               reduce using rule 86 (f_end_array -> .)
    {               reduce using rule 86 (f_end_array -> .)

    f_end_array                    shift and go to state 252

state 244

    (69) args_list -> args_list , expresion . f_arg
    (88) expresion -> expresion . COMP f_oper exp f_expres
    (70) f_arg -> .

    COMP            shift and go to state 151
    ,               reduce using rule 70 (f_arg -> .)
    )               reduce using rule 70 (f_arg -> .)

    f_arg                          shift and go to state 253

state 245

    (63) func -> ID f_varobj : ID f_verify_func_composite ( . args )
    (66) args -> . args_list f_end_args
    (67) args -> . f_end_args
    (68) args_list -> . expresion f_arg
    (69) args_list -> . args_list , expresion f_arg
    (71) f_end_args -> .
    (87) expresion -> . exp
    (88) expresion -> . expresion COMP f_oper exp f_expres
    (89) expresion -> . STR f_string_expr
    (92) exp -> . term
    (93) exp -> . exp OPTERM f_oper term f_exp
    (95) term -> . fact
    (96) term -> . term OPFACT f_oper fact f_term
    (99) fact -> . ( lparen expresion ) rparen
    (100) fact -> . var
    (101) fact -> . NUM f_fact
    (102) fact -> . OPTERM NUM
    (103) fact -> . CALL func f_return_val f_end_call f_end_check
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    )               reduce using rule 71 (f_end_args -> .)
    STR             shift and go to state 119
    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    args                           shift and go to state 254
    args_list                      shift and go to state 200
    f_end_args                     shift and go to state 201
    expresion                      shift and go to state 202
    exp                            shift and go to state 118
    term                           shift and go to state 120
    fact                           shift and go to state 122
    var                            shift and go to state 124

state 246

    (114) while -> WHILE f_while ( expresion f_exprwhile ) DO . { estatutos } f_endwhile

    {               shift and go to state 255


state 247

    (118) for -> FOR expresion f_for_start TO expresion f_for_to { . estatutos } f_for_end
    (48) estatutos -> . estatutos estatuto
    (49) estatutos -> . empty
    (134) empty -> .

    }               reduce using rule 134 (empty -> .)
    CALL            reduce using rule 134 (empty -> .)
    WHILE           reduce using rule 134 (empty -> .)
    FOR             reduce using rule 134 (empty -> .)
    IF              reduce using rule 134 (empty -> .)
    ID              reduce using rule 134 (empty -> .)

    estatutos                      shift and go to state 256
    empty                          shift and go to state 67

state 248

    (108) condicion -> IF ( expresion ) f_if THEN { . estatutos } condicionp f_endif
    (48) estatutos -> . estatutos estatuto
    (49) estatutos -> . empty
    (134) empty -> .

    }               reduce using rule 134 (empty -> .)
    CALL            reduce using rule 134 (empty -> .)
    WHILE           reduce using rule 134 (empty -> .)
    FOR             reduce using rule 134 (empty -> .)
    IF              reduce using rule 134 (empty -> .)
    ID              reduce using rule 134 (empty -> .)

    estatutos                      shift and go to state 257
    empty                          shift and go to state 67

state 249

    (16) funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } . f_endfunc
    (21) f_endfunc -> .

    MAIN            reduce using rule 21 (f_endfunc -> .)
    FUNC            reduce using rule 21 (f_endfunc -> .)
    }               reduce using rule 21 (f_endfunc -> .)

    f_endfunc                      shift and go to state 258

state 250

    (17) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos . } f_endfunc
    (48) estatutos -> estatutos . estatuto
    (50) estatuto -> . asignacion
    (51) estatuto -> . while
    (52) estatuto -> . for
    (53) estatuto -> . condicion
    (54) estatuto -> . CALL call_func ;
    (72) asignacion -> . var = f_oper expresion ;
    (114) while -> . WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (118) for -> . FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (108) condicion -> . IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    }               shift and go to state 259
    CALL            shift and go to state 85
    WHILE           shift and go to state 87
    FOR             shift and go to state 88
    IF              shift and go to state 89
    ID              shift and go to state 78

    estatuto                       shift and go to state 80
    asignacion                     shift and go to state 81
    while                          shift and go to state 82
    for                            shift and go to state 83
    condicion                      shift and go to state 84
    var                            shift and go to state 86

state 251

    (76) indexacion -> f_start_array [ expresion f_index ] [ . f_next_index expresion f_index ] f_end_array
    (85) f_next_index -> .

    STR             reduce using rule 85 (f_next_index -> .)
    (               reduce using rule 85 (f_next_index -> .)
    NUM             reduce using rule 85 (f_next_index -> .)
    OPTERM          reduce using rule 85 (f_next_index -> .)
    CALL            reduce using rule 85 (f_next_index -> .)
    ID              reduce using rule 85 (f_next_index -> .)

    f_next_index                   shift and go to state 260

state 252

    (75) indexacion -> f_start_array [ expresion f_index ] f_end_array .

    =               reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)
    OPFACT          reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)
    OPTERM          reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)
    COMP            reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)
    TO              reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)
    )               reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)
    &               reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)
    ;               reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)
    ]               reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)
    ,               reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)
    {               reduce using rule 75 (indexacion -> f_start_array [ expresion f_index ] f_end_array .)


state 253

    (69) args_list -> args_list , expresion f_arg .

    ,               reduce using rule 69 (args_list -> args_list , expresion f_arg .)
    )               reduce using rule 69 (args_list -> args_list , expresion f_arg .)


state 254

    (63) func -> ID f_varobj : ID f_verify_func_composite ( args . )

    )               shift and go to state 261


state 255

    (114) while -> WHILE f_while ( expresion f_exprwhile ) DO { . estatutos } f_endwhile
    (48) estatutos -> . estatutos estatuto
    (49) estatutos -> . empty
    (134) empty -> .

    }               reduce using rule 134 (empty -> .)
    CALL            reduce using rule 134 (empty -> .)
    WHILE           reduce using rule 134 (empty -> .)
    FOR             reduce using rule 134 (empty -> .)
    IF              reduce using rule 134 (empty -> .)
    ID              reduce using rule 134 (empty -> .)

    estatutos                      shift and go to state 262
    empty                          shift and go to state 67

state 256

    (118) for -> FOR expresion f_for_start TO expresion f_for_to { estatutos . } f_for_end
    (48) estatutos -> estatutos . estatuto
    (50) estatuto -> . asignacion
    (51) estatuto -> . while
    (52) estatuto -> . for
    (53) estatuto -> . condicion
    (54) estatuto -> . CALL call_func ;
    (72) asignacion -> . var = f_oper expresion ;
    (114) while -> . WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (118) for -> . FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (108) condicion -> . IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    }               shift and go to state 263
    CALL            shift and go to state 85
    WHILE           shift and go to state 87
    FOR             shift and go to state 88
    IF              shift and go to state 89
    ID              shift and go to state 78

    estatuto                       shift and go to state 80
    asignacion                     shift and go to state 81
    while                          shift and go to state 82
    for                            shift and go to state 83
    condicion                      shift and go to state 84
    var                            shift and go to state 86

state 257

    (108) condicion -> IF ( expresion ) f_if THEN { estatutos . } condicionp f_endif
    (48) estatutos -> estatutos . estatuto
    (50) estatuto -> . asignacion
    (51) estatuto -> . while
    (52) estatuto -> . for
    (53) estatuto -> . condicion
    (54) estatuto -> . CALL call_func ;
    (72) asignacion -> . var = f_oper expresion ;
    (114) while -> . WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (118) for -> . FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (108) condicion -> . IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    }               shift and go to state 264
    CALL            shift and go to state 85
    WHILE           shift and go to state 87
    FOR             shift and go to state 88
    IF              shift and go to state 89
    ID              shift and go to state 78

    estatuto                       shift and go to state 80
    asignacion                     shift and go to state 81
    while                          shift and go to state 82
    for                            shift and go to state 83
    condicion                      shift and go to state 84
    var                            shift and go to state 86

state 258

    (16) funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc .

    MAIN            reduce using rule 16 (funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc .)
    FUNC            reduce using rule 16 (funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc .)
    }               reduce using rule 16 (funcion -> FUNC ID f_startfunc ( params ) : tipo f_tipofunc { vars estatutos } f_endfunc .)


state 259

    (17) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } . f_endfunc
    (21) f_endfunc -> .

    MAIN            reduce using rule 21 (f_endfunc -> .)
    FUNC            reduce using rule 21 (f_endfunc -> .)
    }               reduce using rule 21 (f_endfunc -> .)

    f_endfunc                      shift and go to state 265

state 260

    (76) indexacion -> f_start_array [ expresion f_index ] [ f_next_index . expresion f_index ] f_end_array
    (87) expresion -> . exp
    (88) expresion -> . expresion COMP f_oper exp f_expres
    (89) expresion -> . STR f_string_expr
    (92) exp -> . term
    (93) exp -> . exp OPTERM f_oper term f_exp
    (95) term -> . fact
    (96) term -> . term OPFACT f_oper fact f_term
    (99) fact -> . ( lparen expresion ) rparen
    (100) fact -> . var
    (101) fact -> . NUM f_fact
    (102) fact -> . OPTERM NUM
    (103) fact -> . CALL func f_return_val f_end_call f_end_check
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    STR             shift and go to state 119
    (               shift and go to state 123
    NUM             shift and go to state 125
    OPTERM          shift and go to state 121
    CALL            shift and go to state 126
    ID              shift and go to state 78

    expresion                      shift and go to state 266
    exp                            shift and go to state 118
    term                           shift and go to state 120
    fact                           shift and go to state 122
    var                            shift and go to state 124

state 261

    (63) func -> ID f_varobj : ID f_verify_func_composite ( args ) .

    ;               reduce using rule 63 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    OPFACT          reduce using rule 63 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    OPTERM          reduce using rule 63 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    COMP            reduce using rule 63 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    TO              reduce using rule 63 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    )               reduce using rule 63 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    ]               reduce using rule 63 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    ,               reduce using rule 63 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)
    {               reduce using rule 63 (func -> ID f_varobj : ID f_verify_func_composite ( args ) .)


state 262

    (114) while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos . } f_endwhile
    (48) estatutos -> estatutos . estatuto
    (50) estatuto -> . asignacion
    (51) estatuto -> . while
    (52) estatuto -> . for
    (53) estatuto -> . condicion
    (54) estatuto -> . CALL call_func ;
    (72) asignacion -> . var = f_oper expresion ;
    (114) while -> . WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (118) for -> . FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (108) condicion -> . IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    }               shift and go to state 267
    CALL            shift and go to state 85
    WHILE           shift and go to state 87
    FOR             shift and go to state 88
    IF              shift and go to state 89
    ID              shift and go to state 78

    estatuto                       shift and go to state 80
    asignacion                     shift and go to state 81
    while                          shift and go to state 82
    for                            shift and go to state 83
    condicion                      shift and go to state 84
    var                            shift and go to state 86

state 263

    (118) for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } . f_for_end
    (121) f_for_end -> .

    }               reduce using rule 121 (f_for_end -> .)
    CALL            reduce using rule 121 (f_for_end -> .)
    WHILE           reduce using rule 121 (f_for_end -> .)
    FOR             reduce using rule 121 (f_for_end -> .)
    IF              reduce using rule 121 (f_for_end -> .)
    ID              reduce using rule 121 (f_for_end -> .)

    f_for_end                      shift and go to state 268

state 264

    (108) condicion -> IF ( expresion ) f_if THEN { estatutos } . condicionp f_endif
    (109) condicionp -> . ELSE f_else { estatutos }
    (110) condicionp -> . empty
    (134) empty -> .

    ELSE            shift and go to state 270
    }               reduce using rule 134 (empty -> .)
    CALL            reduce using rule 134 (empty -> .)
    WHILE           reduce using rule 134 (empty -> .)
    FOR             reduce using rule 134 (empty -> .)
    IF              reduce using rule 134 (empty -> .)
    ID              reduce using rule 134 (empty -> .)

    condicionp                     shift and go to state 269
    empty                          shift and go to state 271

state 265

    (17) funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc .

    MAIN            reduce using rule 17 (funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc .)
    FUNC            reduce using rule 17 (funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc .)
    }               reduce using rule 17 (funcion -> FUNC ID f_startfunc ( params ) : NOTHING f_nothing f_tipofunc { vars estatutos } f_endfunc .)


state 266

    (76) indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion . f_index ] f_end_array
    (88) expresion -> expresion . COMP f_oper exp f_expres
    (84) f_index -> .

    COMP            shift and go to state 151
    ]               reduce using rule 84 (f_index -> .)

    f_index                        shift and go to state 272

state 267

    (114) while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } . f_endwhile
    (117) f_endwhile -> .

    }               reduce using rule 117 (f_endwhile -> .)
    CALL            reduce using rule 117 (f_endwhile -> .)
    WHILE           reduce using rule 117 (f_endwhile -> .)
    FOR             reduce using rule 117 (f_endwhile -> .)
    IF              reduce using rule 117 (f_endwhile -> .)
    ID              reduce using rule 117 (f_endwhile -> .)

    f_endwhile                     shift and go to state 273

state 268

    (118) for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end .

    }               reduce using rule 118 (for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end .)
    CALL            reduce using rule 118 (for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end .)
    WHILE           reduce using rule 118 (for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end .)
    FOR             reduce using rule 118 (for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end .)
    IF              reduce using rule 118 (for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end .)
    ID              reduce using rule 118 (for -> FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end .)


state 269

    (108) condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp . f_endif
    (112) f_endif -> .

    }               reduce using rule 112 (f_endif -> .)
    CALL            reduce using rule 112 (f_endif -> .)
    WHILE           reduce using rule 112 (f_endif -> .)
    FOR             reduce using rule 112 (f_endif -> .)
    IF              reduce using rule 112 (f_endif -> .)
    ID              reduce using rule 112 (f_endif -> .)

    f_endif                        shift and go to state 274

state 270

    (109) condicionp -> ELSE . f_else { estatutos }
    (113) f_else -> .

    {               reduce using rule 113 (f_else -> .)

    f_else                         shift and go to state 275

state 271

    (110) condicionp -> empty .

    }               reduce using rule 110 (condicionp -> empty .)
    CALL            reduce using rule 110 (condicionp -> empty .)
    WHILE           reduce using rule 110 (condicionp -> empty .)
    FOR             reduce using rule 110 (condicionp -> empty .)
    IF              reduce using rule 110 (condicionp -> empty .)
    ID              reduce using rule 110 (condicionp -> empty .)


state 272

    (76) indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index . ] f_end_array

    ]               shift and go to state 276


state 273

    (114) while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile .

    }               reduce using rule 114 (while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile .)
    CALL            reduce using rule 114 (while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile .)
    WHILE           reduce using rule 114 (while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile .)
    FOR             reduce using rule 114 (while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile .)
    IF              reduce using rule 114 (while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile .)
    ID              reduce using rule 114 (while -> WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile .)


state 274

    (108) condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif .

    }               reduce using rule 108 (condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif .)
    CALL            reduce using rule 108 (condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif .)
    WHILE           reduce using rule 108 (condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif .)
    FOR             reduce using rule 108 (condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif .)
    IF              reduce using rule 108 (condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif .)
    ID              reduce using rule 108 (condicion -> IF ( expresion ) f_if THEN { estatutos } condicionp f_endif .)


state 275

    (109) condicionp -> ELSE f_else . { estatutos }

    {               shift and go to state 277


state 276

    (76) indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] . f_end_array
    (86) f_end_array -> .

    =               reduce using rule 86 (f_end_array -> .)
    OPFACT          reduce using rule 86 (f_end_array -> .)
    OPTERM          reduce using rule 86 (f_end_array -> .)
    COMP            reduce using rule 86 (f_end_array -> .)
    TO              reduce using rule 86 (f_end_array -> .)
    )               reduce using rule 86 (f_end_array -> .)
    &               reduce using rule 86 (f_end_array -> .)
    ;               reduce using rule 86 (f_end_array -> .)
    ]               reduce using rule 86 (f_end_array -> .)
    ,               reduce using rule 86 (f_end_array -> .)
    {               reduce using rule 86 (f_end_array -> .)

    f_end_array                    shift and go to state 278

state 277

    (109) condicionp -> ELSE f_else { . estatutos }
    (48) estatutos -> . estatutos estatuto
    (49) estatutos -> . empty
    (134) empty -> .

    }               reduce using rule 134 (empty -> .)
    CALL            reduce using rule 134 (empty -> .)
    WHILE           reduce using rule 134 (empty -> .)
    FOR             reduce using rule 134 (empty -> .)
    IF              reduce using rule 134 (empty -> .)
    ID              reduce using rule 134 (empty -> .)

    estatutos                      shift and go to state 279
    empty                          shift and go to state 67

state 278

    (76) indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .

    =               reduce using rule 76 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    OPFACT          reduce using rule 76 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    OPTERM          reduce using rule 76 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    COMP            reduce using rule 76 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    TO              reduce using rule 76 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    )               reduce using rule 76 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    &               reduce using rule 76 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    ;               reduce using rule 76 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    ]               reduce using rule 76 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    ,               reduce using rule 76 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)
    {               reduce using rule 76 (indexacion -> f_start_array [ expresion f_index ] [ f_next_index expresion f_index ] f_end_array .)


state 279

    (109) condicionp -> ELSE f_else { estatutos . }
    (48) estatutos -> estatutos . estatuto
    (50) estatuto -> . asignacion
    (51) estatuto -> . while
    (52) estatuto -> . for
    (53) estatuto -> . condicion
    (54) estatuto -> . CALL call_func ;
    (72) asignacion -> . var = f_oper expresion ;
    (114) while -> . WHILE f_while ( expresion f_exprwhile ) DO { estatutos } f_endwhile
    (118) for -> . FOR expresion f_for_start TO expresion f_for_to { estatutos } f_for_end
    (108) condicion -> . IF ( expresion ) f_if THEN { estatutos } condicionp f_endif
    (73) var -> . ID f_varobj : ID f_verify_type_composite indexacion f_end_check
    (74) var -> . ID f_verify_type indexacion f_end_check

    }               shift and go to state 280
    CALL            shift and go to state 85
    WHILE           shift and go to state 87
    FOR             shift and go to state 88
    IF              shift and go to state 89
    ID              shift and go to state 78

    estatuto                       shift and go to state 80
    asignacion                     shift and go to state 81
    while                          shift and go to state 82
    for                            shift and go to state 83
    condicion                      shift and go to state 84
    var                            shift and go to state 86

state 280

    (109) condicionp -> ELSE f_else { estatutos } .

    }               reduce using rule 109 (condicionp -> ELSE f_else { estatutos } .)
    CALL            reduce using rule 109 (condicionp -> ELSE f_else { estatutos } .)
    WHILE           reduce using rule 109 (condicionp -> ELSE f_else { estatutos } .)
    FOR             reduce using rule 109 (condicionp -> ELSE f_else { estatutos } .)
    IF              reduce using rule 109 (condicionp -> ELSE f_else { estatutos } .)
    ID              reduce using rule 109 (condicionp -> ELSE f_else { estatutos } .)

